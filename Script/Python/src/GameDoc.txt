Help on module Game:

NAME
    Game

CLASSES
    Boost.Python.enum(builtins.int)
        AlphaBlend
        AxisId
        KeyId
        STGDrawPriority
    Boost.Python.instance(builtins.object)
        ArrowLocator
        BulletML
        BulletMLHandler
        BulletMLParser
        BulletMLState
        CirclingF
        ColorF
        Console
        Consts
        File
        FileObject
        Font
        FontObject
        HitCircleF
        HitCircleI
        HitRectF
        HitRectI
        Input
        InputController
        LocatorLinearF
        LocatorML
        LocatorRotateF
        LocatorTraceF
        Point2DF
        Point2DI
        Random
        RectF
        RectI
        RepeatCounter
        STG
        STGActor
            STGActorBase
                STGAnimation
                STGBulletBase(STGActorBase, STGBullet)
                    STGBulletLinear
                    STGBulletMLActor
                    STGBulletRotate
                STGEnemyBase(STGActorBase, STGEnemy)
                STGFadeOut
                STGItemBase(STGActorBase, STGItem)
                    STGItemExtend
                    STGItemPowerUp
                    STGItemSpAttack
                STGMyShotBase(STGActorBase, STGMyShot)
                    STGMyShotLinear
                STGParticle
            STGBullet
            STGEnemy
            STGItem
            STGMyShot
        STGActors
        STGAuxs
        STGBulletMLCreateParam
        STGConf
        STGEnemyHPGauge
        STGMyShip
            STGMyShipBase
        STGParticleCreator
        STGParticleParameter
        STGStage
        Scene
        Sound
        Sound_Static
        Sound_Stream
        Sprite
        SpriteAnimationFrameHolder
            SpriteAnimationSequenceFrameHolder
            SpriteAnimationTextureFrameHolder
        SpriteAnimationManager
        SpriteDrawParam
        SpriteTexture
        Vector2DF
        Vector2DI
        stdout
    
    class AlphaBlend(Boost.Python.enum)
     |  Method resolution order:
     |      AlphaBlend
     |      Boost.Python.enum
     |      builtins.int
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  Add = Game.AlphaBlend.Add
     |  
     |  Blend = Game.AlphaBlend.Blend
     |  
     |  Mul = Game.AlphaBlend.Mul
     |  
     |  Opacity = Game.AlphaBlend.Opacity
     |  
     |  Screen = Game.AlphaBlend.Screen
     |  
     |  Sub = Game.AlphaBlend.Sub
     |  
     |  names = {'Add': Game.AlphaBlend.Add, 'Blend': Game.AlphaBlend.Blend, '...
     |  
     |  values = {0: Game.AlphaBlend.Opacity, 1: Game.AlphaBlend.Blend, 2: Gam...
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Boost.Python.enum:
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.enum:
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.int:
     |  
     |  __abs__(...)
     |      x.__abs__() <==> abs(x)
     |  
     |  __add__(...)
     |      x.__add__(y) <==> x+y
     |  
     |  __and__(...)
     |      x.__and__(y) <==> x&y
     |  
     |  __bool__(...)
     |      x.__bool__() <==> x != 0
     |  
     |  __ceil__(...)
     |      Ceiling of an Integral returns itself.
     |  
     |  __divmod__(...)
     |      x.__divmod__(y) <==> divmod(x, y)
     |  
     |  __eq__(...)
     |      x.__eq__(y) <==> x==y
     |  
     |  __float__(...)
     |      x.__float__() <==> float(x)
     |  
     |  __floor__(...)
     |      Flooring an Integral returns itself.
     |  
     |  __floordiv__(...)
     |      x.__floordiv__(y) <==> x//y
     |  
     |  __format__(...)
     |  
     |  __ge__(...)
     |      x.__ge__(y) <==> x>=y
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __getnewargs__(...)
     |  
     |  __gt__(...)
     |      x.__gt__(y) <==> x>y
     |  
     |  __hash__(...)
     |      x.__hash__() <==> hash(x)
     |  
     |  __index__(...)
     |      x[y:z] <==> x[y.__index__():z.__index__()]
     |  
     |  __int__(...)
     |      x.__int__() <==> int(x)
     |  
     |  __invert__(...)
     |      x.__invert__() <==> ~x
     |  
     |  __le__(...)
     |      x.__le__(y) <==> x<=y
     |  
     |  __lshift__(...)
     |      x.__lshift__(y) <==> x<<y
     |  
     |  __lt__(...)
     |      x.__lt__(y) <==> x<y
     |  
     |  __mod__(...)
     |      x.__mod__(y) <==> x%y
     |  
     |  __mul__(...)
     |      x.__mul__(y) <==> x*y
     |  
     |  __ne__(...)
     |      x.__ne__(y) <==> x!=y
     |  
     |  __neg__(...)
     |      x.__neg__() <==> -x
     |  
     |  __or__(...)
     |      x.__or__(y) <==> x|y
     |  
     |  __pos__(...)
     |      x.__pos__() <==> +x
     |  
     |  __pow__(...)
     |      x.__pow__(y[, z]) <==> pow(x, y[, z])
     |  
     |  __radd__(...)
     |      x.__radd__(y) <==> y+x
     |  
     |  __rand__(...)
     |      x.__rand__(y) <==> y&x
     |  
     |  __rdivmod__(...)
     |      x.__rdivmod__(y) <==> divmod(y, x)
     |  
     |  __rfloordiv__(...)
     |      x.__rfloordiv__(y) <==> y//x
     |  
     |  __rlshift__(...)
     |      x.__rlshift__(y) <==> y<<x
     |  
     |  __rmod__(...)
     |      x.__rmod__(y) <==> y%x
     |  
     |  __rmul__(...)
     |      x.__rmul__(y) <==> y*x
     |  
     |  __ror__(...)
     |      x.__ror__(y) <==> y|x
     |  
     |  __round__(...)
     |      Rounding an Integral returns itself.
     |      Rounding with an ndigits argument also returns an integer.
     |  
     |  __rpow__(...)
     |      y.__rpow__(x[, z]) <==> pow(x, y[, z])
     |  
     |  __rrshift__(...)
     |      x.__rrshift__(y) <==> y>>x
     |  
     |  __rshift__(...)
     |      x.__rshift__(y) <==> x>>y
     |  
     |  __rsub__(...)
     |      x.__rsub__(y) <==> y-x
     |  
     |  __rtruediv__(...)
     |      x.__rtruediv__(y) <==> y/x
     |  
     |  __rxor__(...)
     |      x.__rxor__(y) <==> y^x
     |  
     |  __sizeof__(...)
     |      Returns size in memory, in bytes
     |  
     |  __sub__(...)
     |      x.__sub__(y) <==> x-y
     |  
     |  __truediv__(...)
     |      x.__truediv__(y) <==> x/y
     |  
     |  __trunc__(...)
     |      Truncating an Integral returns itself.
     |  
     |  __xor__(...)
     |      x.__xor__(y) <==> x^y
     |  
     |  bit_length(...)
     |      int.bit_length() -> int
     |      
     |      Number of bits necessary to represent self in binary.
     |      >>> bin(37)
     |      '0b100101'
     |      >>> (37).bit_length()
     |      6
     |  
     |  conjugate(...)
     |      Returns self, the complex conjugate of any int.
     |  
     |  to_bytes(...)
     |      int.to_bytes(length, byteorder, *, signed=False) -> bytes
     |      
     |      Return an array of bytes representing an integer.
     |      
     |      The integer is represented using length bytes.  An OverflowError is
     |      raised if the integer is not representable with the given number of
     |      bytes.
     |      
     |      The byteorder argument determines the byte order used to represent the
     |      integer.  If byteorder is 'big', the most significant byte is at the
     |      beginning of the byte array.  If byteorder is 'little', the most
     |      significant byte is at the end of the byte array.  To request the native
     |      byte order of the host system, use `sys.byteorder' as the byte order value.
     |      
     |      The signed keyword-only argument determines whether two's complement is
     |      used to represent the integer.  If signed is False and a negative integer
     |      is given, an OverflowError is raised.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.int:
     |  
     |  denominator
     |      the denominator of a rational number in lowest terms
     |  
     |  imag
     |      the imaginary part of a complex number
     |  
     |  numerator
     |      the numerator of a rational number in lowest terms
     |  
     |  real
     |      the real part of a complex number
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from builtins.int:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  from_bytes = <built-in method from_bytes of type object>
     |      int.from_bytes(bytes, byteorder, *, signed=False) -> int
     |      
     |      Return the integer represented by the given array of bytes.
     |      
     |      The bytes argument must either support the buffer protocol or be an
     |      iterable object producing bytes.  Bytes and bytearray are examples of
     |      built-in objects that support the buffer protocol.
     |      
     |      The byteorder argument determines the byte order used to represent the
     |      integer.  If byteorder is 'big', the most significant byte is at the
     |      beginning of the byte array.  If byteorder is 'little', the most
     |      significant byte is at the end of the byte array.  To request the native
     |      byte order of the host system, use `sys.byteorder' as the byte order value.
     |      
     |      The signed keyword-only argument indicates whether two's complement is
     |      used to represent the integer.
    
    class ArrowLocator(Boost.Python.instance)
     |  項目を選択する矢印を管理するクラス
     |  
     |  何らかの選択項目を指し示す矢印またはそれに準ずるものを管理するクラスです。
     |  
     |  @ivar position: 矢印の位置
     |  @ivar top: 最上項目の位置
     |  @ivar bottom: 最下項目の位置
     |  @ivar horizontal: 水平モード
     |  @ivar repeatWait: 入力リピートの待ち間隔
     |  @ivar repeatInterval: 入力リピートの間隔
     |  @ivar controller: 入力コントローラー
     |  
     |  Method resolution order:
     |      ArrowLocator
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      __init__( (object)arg1, (int)arg2, (int)arg3, (int)arg4) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,int,int,int)
     |      
     |      __init__( (object)arg1, (int)arg2, (int)arg3, (int)arg4, (bool)arg5) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,int,int,int,bool)
     |      
     |      
     |      コンストラクタ
     |      
     |      __init__( (object)self, (int)initialArrowPos, (int)top, (int)bottom[, (bool)loop[, (bool)horizontal]]) -> None :
     |              '''
     |              初期位置と、最上項目と最下項目と、最上と最下のループと、水平モードにするかを指定して初期化します
     |              
     |              @param initialArrowPos: 初期位置
     |              @param top: 最上位置
     |              @param bottom: 最下位置
     |              @param loop: ループ可否
     |              @param horizontal: 水平モードかどうか
     |              
     |                C++ signature :
     |                        void __init__(
     |                        struct _object * __ptr64,
     |                        int,
     |                        int,
     |                        int,
     |                        [bool, [bool]])
     |              '''
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  setMoveCallback(...)
     |      矢印の移動時に呼ばれるコールバック関数を設定します
     |      
     |      setMoveCallback( (ArrowLocator)self, (object)callback) -> None :
     |      
     |      @param callback: 引数が0個の関数
     |      
     |        C++ signature :
     |                void setMoveCallback(
     |                class Defs::Util::ArrowLocator {lvalue},
     |                class boost::python::api::object)
     |  
     |  update(...)
     |      状態を更新します
     |      
     |      update( (ArrowLocator)self) -> None :
     |      
     |        C++ signature :
     |                void update(class Defs::Util::ArrowLocator {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  bottom
     |  
     |  controller
     |  
     |  horizontal
     |  
     |  position
     |  
     |  repeatInterval
     |  
     |  repeatWait
     |  
     |  top
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 104
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class AxisId(Boost.Python.enum)
     |  Method resolution order:
     |      AxisId
     |      Boost.Python.enum
     |      builtins.int
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  XMinus = Game.AxisId.XMinus
     |  
     |  XPlus = Game.AxisId.XPlus
     |  
     |  YMinus = Game.AxisId.YMinus
     |  
     |  YPlus = Game.AxisId.YPlus
     |  
     |  names = {'XMinus': Game.AxisId.XMinus, 'XPlus': Game.AxisId.XPlus, 'YM...
     |  
     |  values = {16: Game.AxisId.YMinus, 17: Game.AxisId.YPlus, 18: Game.Axis...
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Boost.Python.enum:
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.enum:
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.int:
     |  
     |  __abs__(...)
     |      x.__abs__() <==> abs(x)
     |  
     |  __add__(...)
     |      x.__add__(y) <==> x+y
     |  
     |  __and__(...)
     |      x.__and__(y) <==> x&y
     |  
     |  __bool__(...)
     |      x.__bool__() <==> x != 0
     |  
     |  __ceil__(...)
     |      Ceiling of an Integral returns itself.
     |  
     |  __divmod__(...)
     |      x.__divmod__(y) <==> divmod(x, y)
     |  
     |  __eq__(...)
     |      x.__eq__(y) <==> x==y
     |  
     |  __float__(...)
     |      x.__float__() <==> float(x)
     |  
     |  __floor__(...)
     |      Flooring an Integral returns itself.
     |  
     |  __floordiv__(...)
     |      x.__floordiv__(y) <==> x//y
     |  
     |  __format__(...)
     |  
     |  __ge__(...)
     |      x.__ge__(y) <==> x>=y
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __getnewargs__(...)
     |  
     |  __gt__(...)
     |      x.__gt__(y) <==> x>y
     |  
     |  __hash__(...)
     |      x.__hash__() <==> hash(x)
     |  
     |  __index__(...)
     |      x[y:z] <==> x[y.__index__():z.__index__()]
     |  
     |  __int__(...)
     |      x.__int__() <==> int(x)
     |  
     |  __invert__(...)
     |      x.__invert__() <==> ~x
     |  
     |  __le__(...)
     |      x.__le__(y) <==> x<=y
     |  
     |  __lshift__(...)
     |      x.__lshift__(y) <==> x<<y
     |  
     |  __lt__(...)
     |      x.__lt__(y) <==> x<y
     |  
     |  __mod__(...)
     |      x.__mod__(y) <==> x%y
     |  
     |  __mul__(...)
     |      x.__mul__(y) <==> x*y
     |  
     |  __ne__(...)
     |      x.__ne__(y) <==> x!=y
     |  
     |  __neg__(...)
     |      x.__neg__() <==> -x
     |  
     |  __or__(...)
     |      x.__or__(y) <==> x|y
     |  
     |  __pos__(...)
     |      x.__pos__() <==> +x
     |  
     |  __pow__(...)
     |      x.__pow__(y[, z]) <==> pow(x, y[, z])
     |  
     |  __radd__(...)
     |      x.__radd__(y) <==> y+x
     |  
     |  __rand__(...)
     |      x.__rand__(y) <==> y&x
     |  
     |  __rdivmod__(...)
     |      x.__rdivmod__(y) <==> divmod(y, x)
     |  
     |  __rfloordiv__(...)
     |      x.__rfloordiv__(y) <==> y//x
     |  
     |  __rlshift__(...)
     |      x.__rlshift__(y) <==> y<<x
     |  
     |  __rmod__(...)
     |      x.__rmod__(y) <==> y%x
     |  
     |  __rmul__(...)
     |      x.__rmul__(y) <==> y*x
     |  
     |  __ror__(...)
     |      x.__ror__(y) <==> y|x
     |  
     |  __round__(...)
     |      Rounding an Integral returns itself.
     |      Rounding with an ndigits argument also returns an integer.
     |  
     |  __rpow__(...)
     |      y.__rpow__(x[, z]) <==> pow(x, y[, z])
     |  
     |  __rrshift__(...)
     |      x.__rrshift__(y) <==> y>>x
     |  
     |  __rshift__(...)
     |      x.__rshift__(y) <==> x>>y
     |  
     |  __rsub__(...)
     |      x.__rsub__(y) <==> y-x
     |  
     |  __rtruediv__(...)
     |      x.__rtruediv__(y) <==> y/x
     |  
     |  __rxor__(...)
     |      x.__rxor__(y) <==> y^x
     |  
     |  __sizeof__(...)
     |      Returns size in memory, in bytes
     |  
     |  __sub__(...)
     |      x.__sub__(y) <==> x-y
     |  
     |  __truediv__(...)
     |      x.__truediv__(y) <==> x/y
     |  
     |  __trunc__(...)
     |      Truncating an Integral returns itself.
     |  
     |  __xor__(...)
     |      x.__xor__(y) <==> x^y
     |  
     |  bit_length(...)
     |      int.bit_length() -> int
     |      
     |      Number of bits necessary to represent self in binary.
     |      >>> bin(37)
     |      '0b100101'
     |      >>> (37).bit_length()
     |      6
     |  
     |  conjugate(...)
     |      Returns self, the complex conjugate of any int.
     |  
     |  to_bytes(...)
     |      int.to_bytes(length, byteorder, *, signed=False) -> bytes
     |      
     |      Return an array of bytes representing an integer.
     |      
     |      The integer is represented using length bytes.  An OverflowError is
     |      raised if the integer is not representable with the given number of
     |      bytes.
     |      
     |      The byteorder argument determines the byte order used to represent the
     |      integer.  If byteorder is 'big', the most significant byte is at the
     |      beginning of the byte array.  If byteorder is 'little', the most
     |      significant byte is at the end of the byte array.  To request the native
     |      byte order of the host system, use `sys.byteorder' as the byte order value.
     |      
     |      The signed keyword-only argument determines whether two's complement is
     |      used to represent the integer.  If signed is False and a negative integer
     |      is given, an OverflowError is raised.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.int:
     |  
     |  denominator
     |      the denominator of a rational number in lowest terms
     |  
     |  imag
     |      the imaginary part of a complex number
     |  
     |  numerator
     |      the numerator of a rational number in lowest terms
     |  
     |  real
     |      the real part of a complex number
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from builtins.int:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  from_bytes = <built-in method from_bytes of type object>
     |      int.from_bytes(bytes, byteorder, *, signed=False) -> int
     |      
     |      Return the integer represented by the given array of bytes.
     |      
     |      The bytes argument must either support the buffer protocol or be an
     |      iterable object producing bytes.  Bytes and bytearray are examples of
     |      built-in objects that support the buffer protocol.
     |      
     |      The byteorder argument determines the byte order used to represent the
     |      integer.  If byteorder is 'big', the most significant byte is at the
     |      beginning of the byte array.  If byteorder is 'little', the most
     |      significant byte is at the end of the byte array.  To request the native
     |      byte order of the host system, use `sys.byteorder' as the byte order value.
     |      
     |      The signed keyword-only argument indicates whether two's complement is
     |      used to represent the integer.
    
    class BulletML(Boost.Python.instance)
     |  Method resolution order:
     |      BulletML
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  createParser(...)
     |      createParser( (str)arg1) -> BulletMLParser :
     |      
     |          C++ signature :
     |              class boost::shared_ptr<class BulletMLParser> createParser(class std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __init__ = <built-in function __init__>
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class BulletMLHandler(Boost.Python.instance)
     |  Method resolution order:
     |      BulletMLHandler
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      __init__( (object)arg1, (object)arg2, (BulletMLParser)arg3) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class boost::python::api::object,class boost::shared_ptr<class BulletMLParser>)
     |      
     |      __init__( (object)arg1, (object)arg2, (BulletMLParser)arg3, (BulletMLState)arg4) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class boost::python::api::object,class boost::shared_ptr<class BulletMLParser>,class BulletMLState * __ptr64)
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  getParser(...)
     |      getParser( (BulletMLHandler)arg1) -> BulletMLParser :
     |      
     |          C++ signature :
     |              class boost::shared_ptr<class BulletMLParser> getParser(class Defs::Util::BulletML::RunnerHandler {lvalue})
     |  
     |  isEnd(...)
     |      isEnd( (BulletMLHandler)arg1) -> bool :
     |      
     |          C++ signature :
     |              bool isEnd(class Defs::Util::BulletML::RunnerHandler {lvalue})
     |  
     |  run(...)
     |      run( (BulletMLHandler)arg1) -> None :
     |      
     |          C++ signature :
     |              void run(class Defs::Util::BulletML::RunnerHandler {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 80
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class BulletMLParser(Boost.Python.instance)
     |  Method resolution order:
     |      BulletMLParser
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  build(...)
     |      build( (BulletMLParser)arg1) -> None :
     |      
     |          C++ signature :
     |              void build(class BulletMLParser {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __init__ = <built-in function __init__>
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class BulletMLState(Boost.Python.instance)
     |  Method resolution order:
     |      BulletMLState
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __init__ = <built-in function __init__>
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class CirclingF(Boost.Python.instance)
     |  旋回角度を管理するクラス
     |  
     |  @ivar circling: 旋回の可否(デフォルトでFalse)
     |  @ivar angle: 現在の角度
     |  @ivar circlingAngle: 旋回角度
     |  @ivar targetAngle: 旋回目標角度 この角度へ向けて旋回していきます
     |  
     |  Method resolution order:
     |      CirclingF
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      __init__( (object)arg1) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64)
     |      
     |      
     |      コンストラクタ
     |      
     |      __init__( (object)self) -> None :
     |              '''
     |              デフォルト状態で初期化します
     |              
     |              後で個別にプロパティを設定する必要があります。
     |              
     |                C++ signature :
     |                        void __init__(struct _object * __ptr64)
     |              '''
     |      
     |      __init__( (object)self, (float)circlingAngle) -> None :
     |              '''
     |              旋回角度を指定して初期化します
     |              
     |              @param circlingAngle: 旋回角度
     |              
     |                C++ signature :
     |                        void __init__(
     |                        struct _object * __ptr64,
     |                        float)
     |              '''
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  update(...)
     |      状態を更新します
     |      
     |      update( (CirclingF)self) -> None :
     |      
     |        C++ signature :
     |                void update(class Game::Util::STG::Circling<float> {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  angle
     |  
     |  circling
     |  
     |  circlingAngle
     |  
     |  targetAngle
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 32
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class ColorF(Boost.Python.instance)
     |  色を表現するクラス
     |  
     |  色をRGBAで表現します。
     |  各要素の範囲は、[0, 1]です。
     |  演算子は、+, -, *, /, +=, -=, *=, /=, ==, != が定義されています。
     |  
     |  @ivar r: R要素
     |  @ivar g: G要素
     |  @ivar b: B要素
     |  @ivar a: A要素
     |  
     |  Method resolution order:
     |      ColorF
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __add__(...)
     |      __add__( (ColorF)arg1, (ColorF)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __add__(struct Selene::ColorF {lvalue},struct Selene::ColorF)
     |  
     |  __eq__(...)
     |      __eq__( (ColorF)arg1, (ColorF)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __eq__(struct Selene::ColorF {lvalue},struct Selene::ColorF)
     |  
     |  __iadd__(...)
     |      __iadd__( (object)arg1, (ColorF)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __iadd__(struct boost::python::back_reference<struct Selene::ColorF & __ptr64>,struct Selene::ColorF)
     |  
     |  __idiv__(...)
     |      __idiv__( (object)arg1, (ColorF)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __idiv__(struct boost::python::back_reference<struct Selene::ColorF & __ptr64>,struct Selene::ColorF)
     |  
     |  __imul__(...)
     |      __imul__( (object)arg1, (ColorF)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __imul__(struct boost::python::back_reference<struct Selene::ColorF & __ptr64>,struct Selene::ColorF)
     |  
     |  __init__(...)
     |      __init__( (object)arg1) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64)
     |      
     |      __init__( (object)arg1, (float)arg2) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,float)
     |      
     |      __init__( (object)arg1, (float)arg2, (float)arg3) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,float,float)
     |      
     |      __init__( (object)arg1, (float)arg2, (float)arg3, (float)arg4) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,float,float,float)
     |      
     |      __init__( (object)arg1, (float)arg2, (float)arg3, (float)arg4, (float)arg5) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,float,float,float,float)
     |      
     |      
     |      コンストラクタ
     |      
     |      __init__( (object)self) -> None :
     |              '''
     |              各要素を1で初期化します
     |              
     |                C++ signature :
     |                        void __init__(struct _object * __ptr64)
     |              '''
     |      
     |      __init__( (object)self, (float)r[, (float)g[, (float)b[, (float)a]]]) -> None :
     |              '''
     |              各要素を指定した値で初期化します
     |              
     |              @param r: 赤
     |              @param g: 緑
     |              @param b: 青
     |              @param a: アルファ値
     |              
     |                C++ signature :
     |                        void __init__(
     |                        struct _object * __ptr64,
     |                        float,float,float,float)
     |              '''
     |      
     |      __init__( (object)self, (ColorF)color) -> None :
     |              '''
     |              色を表現する他のオブジェクトで初期化します
     |              
     |              @param color: 他のオブジェクト
     |              
     |                C++ signature :
     |                        void __init__(
     |                        struct _object * __ptr64,
     |                        struct Selene::ColorF)
     |              '''
     |  
     |  __isub__(...)
     |      __isub__( (object)arg1, (ColorF)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __isub__(struct boost::python::back_reference<struct Selene::ColorF & __ptr64>,struct Selene::ColorF)
     |  
     |  __mul__(...)
     |      __mul__( (ColorF)arg1, (ColorF)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __mul__(struct Selene::ColorF {lvalue},struct Selene::ColorF)
     |  
     |  __ne__(...)
     |      __ne__( (ColorF)arg1, (ColorF)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __ne__(struct Selene::ColorF {lvalue},struct Selene::ColorF)
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  __sub__(...)
     |      __sub__( (ColorF)arg1, (ColorF)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __sub__(struct Selene::ColorF {lvalue},struct Selene::ColorF)
     |  
     |  __truediv__(...)
     |      __truediv__( (ColorF)arg1, (ColorF)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __truediv__(struct Selene::ColorF {lvalue},struct Selene::ColorF)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  a
     |  
     |  b
     |  
     |  g
     |  
     |  r
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 32
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Console(Boost.Python.instance)
     |  Method resolution order:
     |      Console
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  create(...)
     |      create() -> bool :
     |      
     |          C++ signature :
     |              bool create()
     |  
     |  delete(...)
     |      delete() -> bool :
     |      
     |          C++ signature :
     |              bool delete()
     |  
     |  write(...)
     |      write( (str)arg1) -> bool :
     |      
     |          C++ signature :
     |              bool write(class std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >)
     |  
     |  writeLine(...)
     |      writeLine( (str)arg1) -> bool :
     |      
     |          C++ signature :
     |              bool writeLine(class std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __init__ = <built-in function __init__>
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Consts(Boost.Python.instance)
     |  定数クラス
     |  
     |  __init__ = <built-in function __init__>
     |    Raises an exception
     |    This class cannot be instantiated from Python
     |  
     |  @cvar ScreenSize: スクリーンのサイズ
     |  @cvar StgInfAreaSize: STG画面の情報表示領域のサイズ
     |  
     |  Method resolution order:
     |      Consts
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ScreenSize
     |  
     |  StgInfAreaSize
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __init__ = <built-in function __init__>
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class File(Boost.Python.instance)
     |  Method resolution order:
     |      File
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  clearCache(...)
     |      clearCache() -> None :
     |      
     |          C++ signature :
     |              void clearCache()
     |  
     |  eraseCache(...)
     |      eraseCache( (str)arg1) -> None :
     |      
     |          C++ signature :
     |              void eraseCache(class std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >)
     |  
     |  getCacheSize(...)
     |      getCacheSize() -> int :
     |      
     |          C++ signature :
     |              unsigned int getCacheSize()
     |  
     |  getMaxCacheSize(...)
     |      getMaxCacheSize() -> int :
     |      
     |          C++ signature :
     |              unsigned int getMaxCacheSize()
     |  
     |  open(...)
     |      open( (str)arg1) -> object :
     |      
     |          C++ signature :
     |              class boost::python::api::object open(class std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >)
     |      
     |      open( (str)arg1, (bool)arg2) -> object :
     |      
     |          C++ signature :
     |              class boost::python::api::object open(class std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >,bool)
     |      
     |      open( (str)arg1, (bool)arg2, (bool)arg3) -> object :
     |      
     |          C++ signature :
     |              class boost::python::api::object open(class std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >,bool,bool)
     |  
     |  openASync(...)
     |      openASync( (str)arg1) -> object :
     |      
     |          C++ signature :
     |              class boost::python::api::object openASync(class std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >)
     |      
     |      openASync( (str)arg1, (bool)arg2) -> object :
     |      
     |          C++ signature :
     |              class boost::python::api::object openASync(class std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >,bool)
     |      
     |      openASync( (str)arg1, (bool)arg2, (bool)arg3) -> object :
     |      
     |          C++ signature :
     |              class boost::python::api::object openASync(class std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >,bool,bool)
     |  
     |  setMaxCacheSize(...)
     |      setMaxCacheSize( (int)arg1) -> None :
     |      
     |          C++ signature :
     |              void setMaxCacheSize(unsigned int)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __init__ = <built-in function __init__>
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class FileObject(Boost.Python.instance)
     |  ファイルを表すクラス
     |  
     |  __init__ = <built-in function __init__>
     |    Raises an exception
     |    This class cannot be instantiated from Python
     |  
     |  @ivar loaded: 読み込みが完了しているかどうか
     |  このプロパティは非同期で開いた場合に意味を持ちます。
     |  同期読み込み時は常にTrueとなります。
     |  
     |  @ivar fileName: ファイル名
     |  @ivar size: ファイルサイズ
     |  
     |  Method resolution order:
     |      FileObject
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  fileName
     |  
     |  loaded
     |  
     |  size
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __init__ = <built-in function __init__>
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Font(Boost.Python.instance)
     |  Method resolution order:
     |      Font
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  load(...)
     |      load( (str)arg1) -> FontObject :
     |      
     |          C++ signature :
     |              class Defs::Util::Font::Wrapper load(class std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __init__ = <built-in function __init__>
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class FontObject(Boost.Python.instance)
     |  フォントを表すクラス
     |  
     |  __init__ = <built-in function __init__>
     |    Raises an exception
     |    This class cannot be instantiated from Python
     |  
     |  @ivar size: 文字サイズ
     |  @ivar originalSize: オリジナルの文字サイズ
     |  @ivar shakable: 振動エフェクトの影響を受けるかどうか
     |  
     |  Method resolution order:
     |      FontObject
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  draw(...)
     |      draw( (FontObject)arg1, (Point2DF)arg2, (ColorF)arg3, (str)arg4) -> Point2DF :
     |      
     |          C++ signature :
     |              class Selene::Point2D<float> draw(class Defs::Util::Font::Wrapper {lvalue},class Selene::Point2D<float>,struct Selene::ColorF,class std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >)
     |      
     |      
     |      文字列を描画します
     |      
     |      draw( (FontObject)self, (Point2DF)position, (ColorF)color, (str)string[, (int)length]) -> Point2DF :
     |      
     |      @param position: 描画を開始する左上の座標
     |      @param color: 乗算する色
     |      @param string: 描画する文字列
     |      @param length: 描画する最大文字数
     |      @return: 文字描画終端位置
     |      
     |      文字数がlengthを超えた場合、それ以上は描画されません。
     |      
     |        C++ signature :
     |                class Selene::Point2D<float> draw(
     |                class Defs::Util::Font::Wrapper {lvalue},
     |                class Selene::Point2D<float>,
     |                struct Selene::ColorF,class std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >,
     |                long)
     |  
     |  drawCenter(...)
     |      drawCenter( (FontObject)arg1, (RectF)arg2, (Point2DF)arg3, (ColorF)arg4, (str)arg5) -> Point2DF :
     |      
     |          C++ signature :
     |              class Selene::Point2D<float> drawCenter(class Defs::Util::Font::Wrapper {lvalue},class Selene::Rect<float>,class Selene::Point2D<float>,struct Selene::ColorF,class std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >)
     |      
     |      
     |      中央揃えで文字列を描画します
     |      
     |      drawCenter( (FontObject)self, (RectF)rect, (Point2DF)offset, (ColorF)color, (str)string[, (int)length]) -> Point2DF :
     |      
     |      @param rect: 描画する矩形領域
     |      @param offset: 描画位置のオフセット
     |      @param color: 乗算する色
     |      @param string: 描画する文字列
     |      @param length: 描画する最大文字数
     |      @return: 文字描画終端位置
     |      
     |      文字数がlengthを超えた場合、それ以上は描画されません。
     |      
     |        C++ signature :
     |                class Selene::Point2D<float> drawCenter(
     |                class Defs::Util::Font::Wrapper {lvalue},
     |                class Selene::Rect<float>,
     |                class Selene::Point2D<float>,
     |                struct Selene::ColorF,
     |                class std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >,
     |                long)
     |  
     |  drawLeft(...)
     |      drawLeft( (FontObject)arg1, (RectF)arg2, (Point2DF)arg3, (ColorF)arg4, (str)arg5) -> Point2DF :
     |      
     |          C++ signature :
     |              class Selene::Point2D<float> drawLeft(class Defs::Util::Font::Wrapper {lvalue},class Selene::Rect<float>,class Selene::Point2D<float>,struct Selene::ColorF,class std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >)
     |      
     |      
     |      左揃えで文字列を描画します
     |      
     |      drawLeft( (FontObject)self, (RectF)rect, (Point2DF)offset, (ColorF)color, (str)string[, (int)length]) -> Point2DF :
     |      
     |      @param rect: 描画する矩形領域
     |      @param offset: 描画位置のオフセット
     |      @param color: 乗算する色
     |      @param string: 描画する文字列
     |      @param length: 描画する最大文字数
     |      @return: 文字描画終端位置
     |      
     |      文字数がlengthを超えた場合、それ以上は描画されません。
     |      
     |        C++ signature :
     |                class Selene::Point2D<float> drawLeft(
     |                class Defs::Util::Font::Wrapper {lvalue},
     |                class Selene::Rect<float>,
     |                class Selene::Point2D<float>,
     |                struct Selene::ColorF,
     |                class std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >,
     |                long)
     |  
     |  drawRight(...)
     |      drawRight( (FontObject)arg1, (RectF)arg2, (Point2DF)arg3, (ColorF)arg4, (str)arg5) -> Point2DF :
     |      
     |          C++ signature :
     |              class Selene::Point2D<float> drawRight(class Defs::Util::Font::Wrapper {lvalue},class Selene::Rect<float>,class Selene::Point2D<float>,struct Selene::ColorF,class std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >)
     |      
     |      
     |      右揃えで文字列を描画します
     |      
     |      drawRight( (FontObject)self, (RectF)rect, (Point2DF)offset, (ColorF)color, (str)string[, (int)length]) -> Point2DF :
     |      
     |      @param rect: 描画する矩形領域
     |      @param offset: 描画位置のオフセット
     |      @param color: 乗算する色
     |      @param string: 描画する文字列
     |      @param length: 描画する最大文字数
     |      @return: 文字描画終端位置
     |      
     |      文字数がlengthを超えた場合、それ以上は描画されません。
     |      
     |        C++ signature :
     |                class Selene::Point2D<float> drawRight(
     |                class Defs::Util::Font::Wrapper {lvalue},
     |                class Selene::Rect<float>,
     |                class Selene::Point2D<float>,
     |                struct Selene::ColorF,
     |                class std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >,
     |                long)
     |  
     |  setPriority(...)
     |      描画優先度を設定します
     |      
     |      setPriority( (FontObject)self, (int)priority) -> None :
     |      
     |      @param priority: 描画優先度を表す整数
     |      
     |        C++ signature :
     |                void setPriority(
     |                class Defs::Util::Font::Wrapper {lvalue},
     |                long)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  originalSize
     |  
     |  shakable
     |  
     |  size
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __init__ = <built-in function __init__>
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class HitCircleF(Boost.Python.instance)
     |  円形の当たり判定を行うクラス
     |  
     |  内部の値は浮動小数点数で保持されます。
     |  
     |  @ivar center: 中心座標
     |  @ivar radius: 半径
     |  
     |  Method resolution order:
     |      HitCircleF
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      __init__( (object)arg1) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64)
     |      
     |      __init__( (object)arg1, (HitCircleF)arg2) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class Game::Util::STG::Hit::Circle<float>)
     |      
     |      __init__( (object)arg1, (HitCircleI)arg2) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class Game::Util::STG::Hit::Circle<long>)
     |      
     |      __init__( (object)arg1, (float)arg2, (float)arg3, (float)arg4) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,float,float,float)
     |      
     |      __init__( (object)arg1, (int)arg2, (int)arg3, (int)arg4) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,long,long,long)
     |      
     |      __init__( (object)arg1, (Vector2DF)arg2, (float)arg3) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class Game::Util::STG::Vector2D<float>,float)
     |      
     |      
     |              コンストラクタ
     |              
     |              __init__( (object)self) -> None :
     |                      '''
     |                      デフォルト状態で初期化します
     |                      
     |                        C++ signature :
     |                                void __init__(struct _object * __ptr64)
     |                      '''
     |              
     |              __init__( (object)self, (HitCircleF | HitCircleI)circle) -> None :
     |                      '''
     |                      他のオブジェクトをコピーして初期化します
     |                      
     |                      @param circle: 他のHitCircleオブジェクト
     |                      
     |                        C++ signature :
     |                                void __init__(
     |                                struct _object * __ptr64,
     |                                (class Game::Util::STG::Hit::Circle<float> | class Game::Util::STG::Hit::Circle<long>))
     |                      '''
     |              
     |              __init__( (object)self, (float | int)x, (float | int)y, (float | int)radius) -> None :
     |                      '''
     |                      XY座標と半径を指定して初期化します
     |                      
     |                      @param x: X座標
     |                      @param y: Y座標
     |                      @param radius: 半径
     |                      
     |                        C++ signature :
     |                                void __init__(
     |                                struct _object * __ptr64,
     |                                (float | long),
     |                                (float | long),
     |                                (float | long))
     |                      '''
     |              
     |              __init__( (object)self, (Vector2DF | Vector2DI)center, (float | int)radius) -> None :
     |                      '''
     |                      XY座標ベクトルと半径を指定して初期化します
     |                      
     |                      @param center: 中心座標ベクトル
     |                      @param radius: 半径
     |                      
     |                        C++ signature :
     |                                void __init__(
     |                                struct _object * __ptr64,
     |                                (class Game::Util::STG::Vector2D<float> | class Game::Util::STG::Vector2D<long>),
     |                                (float | long))
     |                      '''
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  isHit(...)
     |      isHit( (HitCircleF)arg1, (HitCircleF)arg2) -> bool :
     |      
     |          C++ signature :
     |              bool isHit(class Game::Util::STG::Hit::Circle<float> {lvalue},class Game::Util::STG::Hit::Circle<float>)
     |      
     |      
     |              他のオブジェクトと当たっているか判定します
     |              
     |              isHit( (HitCircleF)self, (HitCircleF | HitCircleI)circle) -> bool :
     |              
     |              @param circle: 他のHitCircleオブジェクト
     |              @return: TrueまたはFalse
     |              
     |                C++ signature :
     |                        bool isHit(
     |                        class Game::Util::STG::Hit::Circle<float> {lvalue},
     |                        (class Game::Util::STG::Hit::Circle<float> | class Game::Util::STG::Hit::Circle<long>))
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  center
     |  
     |  radius
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 32
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class HitCircleI(Boost.Python.instance)
     |  円形の当たり判定を行うクラス
     |  
     |  内部の値は整数で保持されます。
     |  
     |  @ivar center: 中心座標
     |  @ivar radius: 半径
     |  
     |  Method resolution order:
     |      HitCircleI
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      __init__( (object)arg1) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64)
     |      
     |      __init__( (object)arg1, (HitCircleI)arg2) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class Game::Util::STG::Hit::Circle<long>)
     |      
     |      __init__( (object)arg1, (HitCircleF)arg2) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class Game::Util::STG::Hit::Circle<float>)
     |      
     |      __init__( (object)arg1, (int)arg2, (int)arg3, (int)arg4) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,long,long,long)
     |      
     |      __init__( (object)arg1, (float)arg2, (float)arg3, (float)arg4) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,float,float,float)
     |      
     |      __init__( (object)arg1, (Vector2DI)arg2, (int)arg3) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class Game::Util::STG::Vector2D<long>,long)
     |      
     |      
     |              コンストラクタ
     |              
     |              __init__( (object)self) -> None :
     |                      '''
     |                      デフォルト状態で初期化します
     |                      
     |                        C++ signature :
     |                                void __init__(struct _object * __ptr64)
     |                      '''
     |              
     |              __init__( (object)self, (HitCircleI | HitCircleF)circle) -> None :
     |                      '''
     |                      他のオブジェクトをコピーして初期化します
     |                      
     |                      @param circle: 他のHitCircleオブジェクト
     |                      
     |                        C++ signature :
     |                                void __init__(
     |                                struct _object * __ptr64,
     |                                (class Game::Util::STG::Hit::Circle<long> | class Game::Util::STG::Hit::Circle<float>))
     |                      '''
     |              
     |              __init__( (object)self, (int | float)x, (int | float)y, (int | float)radius) -> None :
     |                      '''
     |                      中心のXY座標と半径を指定して初期化します
     |                      
     |                      @param x: 中心のX座標
     |                      @param y: 中心のY座標
     |                      @param radius: 半径
     |                      
     |                        C++ signature :
     |                                void __init__(
     |                                struct _object * __ptr64,
     |                                (long | float),
     |                                (long | float),
     |                                (long | float))
     |                      '''
     |              
     |              __init__( (object)self, (Vector2DI | Vector2DF)center, (int | float)radius) -> None :
     |                      '''
     |                      XY座標ベクトルと半径を指定して初期化します
     |                      
     |                      @param center: 中心座標ベクトル
     |                      @param radius: 半径
     |                      
     |                        C++ signature :
     |                                void __init__(
     |                                struct _object * __ptr64,
     |                                (class Game::Util::STG::Vector2D<long> | class Game::Util::STG::Vector2D<float>),
     |                                (long | float))
     |                      '''
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  isHit(...)
     |      isHit( (HitCircleI)arg1, (HitCircleI)arg2) -> bool :
     |      
     |          C++ signature :
     |              bool isHit(class Game::Util::STG::Hit::Circle<long> {lvalue},class Game::Util::STG::Hit::Circle<long>)
     |      
     |      
     |              他のオブジェクトと当たっているか判定します
     |              
     |              isHit( (HitCircleI)self, (HitCircleI | HitCircleF)circle) -> bool :
     |      
     |              @param circle: 他のHitCircleオブジェクト
     |              @return: TrueまたはFalse
     |              
     |                C++ signature :
     |                        bool isHit(
     |                        class Game::Util::STG::Hit::Circle<long> {lvalue},
     |                        (class Game::Util::STG::Hit::Circle<long> | class Game::Util::STG::Hit::Circle<float>))
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  center
     |  
     |  radius
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 32
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class HitRectF(Boost.Python.instance)
     |  矩形の当たり判定を行うクラス
     |  
     |  内部の値は浮動小数点数で保持されます。
     |  
     |  @ivar center: 中心座標
     |  @ivar size: 幅と高さを表すベクトル
     |  
     |  Method resolution order:
     |      HitRectF
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      __init__( (object)arg1) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64)
     |      
     |      __init__( (object)arg1, (HitRectF)arg2) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class Game::Util::STG::Hit::Rect<float>)
     |      
     |      __init__( (object)arg1, (HitRectI)arg2) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class Game::Util::STG::Hit::Rect<long>)
     |      
     |      __init__( (object)arg1, (float)arg2, (float)arg3, (float)arg4, (float)arg5, (bool)arg6) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,float,float,float,float,bool)
     |      
     |      __init__( (object)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5, (bool)arg6) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,long,long,long,long,bool)
     |      
     |      __init__( (object)arg1, (Vector2DF)arg2, (float)arg3, (float)arg4, (bool)arg5) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class Game::Util::STG::Vector2D<float>,float,float,bool)
     |      
     |      __init__( (object)arg1, (Vector2DI)arg2, (int)arg3, (int)arg4, (bool)arg5) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class Game::Util::STG::Vector2D<long>,long,long,bool)
     |      
     |      __init__( (object)arg1, (Vector2DF)arg2, (Vector2DF)arg3, (bool)arg4) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class Game::Util::STG::Vector2D<float>,class Game::Util::STG::Vector2D<float>,bool)
     |      
     |      __init__( (object)arg1, (Vector2DI)arg2, (Vector2DF)arg3, (bool)arg4) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class Game::Util::STG::Vector2D<long>,class Game::Util::STG::Vector2D<float>,bool)
     |      
     |      __init__( (object)arg1, (Vector2DF)arg2, (Vector2DI)arg3, (bool)arg4) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class Game::Util::STG::Vector2D<float>,class Game::Util::STG::Vector2D<long>,bool)
     |      
     |      __init__( (object)arg1, (Vector2DI)arg2, (Vector2DI)arg3, (bool)arg4) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class Game::Util::STG::Vector2D<long>,class Game::Util::STG::Vector2D<long>,bool)
     |      
     |      __init__( (object)arg1, (RectF)arg2) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class Selene::Rect<float>)
     |      
     |      
     |              コンストラクタ
     |              
     |              __init__( (object)self) -> None :
     |                      '''
     |                      デフォルト状態で初期化します
     |                      
     |                        C++ signature :
     |                                void __init__(struct _object * __ptr64)
     |                      '''
     |              
     |              __init__( (object)self, (HitRectF | HitRectI)rect) -> None :
     |                      '''
     |                      他のオブジェクトをコピーして初期化します
     |                      
     |                      @param rect: 他のオブジェクト
     |                      
     |                        C++ signature :
     |                                void __init__(
     |                                struct _object * __ptr64,
     |                                (class Game::Util::STG::Hit::Rect<float> | class Game::Util::STG::Hit::Rect<long>))
     |                      '''
     |              
     |              __init__( (object)self, (float | int)x, (float | int)y, (float | int)width, (float | int)height, (bool)centerPos) -> None :
     |                      '''
     |                      XY座標と、幅と高さを指定して初期化します
     |                      
     |                      @param x: X座標
     |                      @param y: Y座標
     |                      @param width: 幅
     |                      @param height: 高さ
     |                      @param centerPos: 座標が矩形の中心ならTrue、矩形の左上ならFalse
     |                      
     |                        C++ signature :
     |                                void __init__(
     |                                struct _object * __ptr64,
     |                                (float | long),
     |                                (float | long),
     |                                (float | long),
     |                                (float | long),
     |                                bool)
     |                      '''
     |              
     |              __init__( (object)self, (Vector2DF | Vector2DI)position, (float | int)width, (float | int)height, (bool)centerPos) -> None :
     |                      '''
     |                      XY座標ベクトルと、幅と高さを指定して初期化します
     |                      
     |                      @param position: XY座標ベクトル
     |                      @param width: 幅
     |                      @param height: 高さ
     |                      @param centerPos: 座標が矩形の中心ならTrue、矩形の左上ならFalse
     |                      
     |                        C++ signature :
     |                                void __init__(
     |                                struct _object * __ptr64,
     |                                (class Game::Util::STG::Vector2D<float> | class Game::Util::STG::Vector2D<long>),
     |                                (float | long),
     |                                (float | long),
     |                                bool)
     |                      '''
     |              
     |              __init__( (object)self, (Vector2DF | Vector2DI)position, (Vector2DF | Vector2DI)widthHeight, (bool)centerPos) -> None :
     |                      '''
     |                      XY座標ベクトルと、幅と高さを表すベクトルを指定して初期化します
     |                      
     |                      @param position: XY座標ベクトル
     |                      @param widthHeight: 幅と高さのベクトル
     |                      @param centerPos: 座標が矩形の中心ならTrue、矩形の左上ならFalse
     |                      
     |                        C++ signature :
     |                                void __init__(
     |                                struct _object * __ptr64,
     |                                (class Game::Util::STG::Vector2D<float> | class Game::Util::STG::Vector2D<long>),
     |                                (class Game::Util::STG::Vector2D<float> | class Game::Util::STG::Vector2D<long>),
     |                                bool)
     |                      '''
     |              
     |              __init__( (object)self, (RectF | RectI)rect) -> None :
     |                      '''
     |                      (RectF | RectI)オブジェクトをもとに初期化します
     |                      
     |                      @param rect: (RectF | RectI)オブジェクト
     |                      
     |                        C++ signature :
     |                                void __init__(
     |                                struct _object * __ptr64,
     |                                (class Selene::Rect<float> | class Selene::Rect<long>))
     |                      '''
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  getPosition(...)
     |      位置座標ベクトルを取得します
     |      
     |      getPosition( (HitRectF)self, (bool)centerPos) -> Vector2DF :
     |      
     |      @param centerPos: 中心座標ならTrue、左上座標ならFalse
     |      @return: 中心座標ベクトルまたは左上座標ベクトル
     |      
     |        C++ signature :
     |                class Game::Util::STG::Vector2D<float> getPosition(
     |                class Game::Util::STG::Hit::Rect<float> {lvalue},
     |                bool)
     |  
     |  isHit(...)
     |      isHit( (HitRectF)arg1, (HitRectF)arg2) -> bool :
     |      
     |          C++ signature :
     |              bool isHit(class Game::Util::STG::Hit::Rect<float> {lvalue},class Game::Util::STG::Hit::Rect<float>)
     |      
     |      
     |              他のオブジェクトと当たっているか判定します
     |              
     |              isHit( (HitRectF)self, (HitRectF | HitRectI)rect) -> bool :
     |              
     |              @param rect: 他の矩形オブジェクト
     |              @return: TrueまたはFalse
     |              
     |                C++ signature :
     |                        bool isHit(
     |                        class Game::Util::STG::Hit::Rect<float> {lvalue},
     |                        (class Game::Util::STG::Hit::Rect<float> | class Game::Util::STG::Hit::Rect<long>))
     |  
     |  setPosition(...)
     |      setPosition( (HitRectF)arg1, (Vector2DF)arg2, (bool)arg3) -> None :
     |      
     |          C++ signature :
     |              void setPosition(class Game::Util::STG::Hit::Rect<float> {lvalue},class Game::Util::STG::Vector2D<float>,bool)
     |      
     |      
     |              位置座標ベクトルを設定します
     |              
     |              setPosition( (HitRectI)self, (Vector2DI | Vector2DF)pos, (bool)centerPos) -> None :
     |              
     |              @param pos: 位置座標ベクトル
     |              @param centerPos: 中心座標ならTrue、左上座標ならFalse
     |              
     |                C++ signature :
     |                        void setPosition(
     |                        class Game::Util::STG::Hit::Rect<long> {lvalue},
     |                        (class Game::Util::STG::Vector2D<long> | class Game::Util::STG::Vector2D<float>),
     |                        bool)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  center
     |  
     |  size
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 32
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class HitRectI(Boost.Python.instance)
     |  矩形の当たり判定を行うクラス
     |  
     |  内部の値は整数で保持されます。
     |  
     |  @ivar center: 中心座標
     |  @ivar size: 幅と高さを表すベクトル
     |  
     |  Method resolution order:
     |      HitRectI
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      __init__( (object)arg1) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64)
     |      
     |      __init__( (object)arg1, (HitRectI)arg2) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class Game::Util::STG::Hit::Rect<long>)
     |      
     |      __init__( (object)arg1, (HitRectF)arg2) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class Game::Util::STG::Hit::Rect<float>)
     |      
     |      __init__( (object)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5, (bool)arg6) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,long,long,long,long,bool)
     |      
     |      __init__( (object)arg1, (float)arg2, (float)arg3, (float)arg4, (float)arg5, (bool)arg6) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,float,float,float,float,bool)
     |      
     |      __init__( (object)arg1, (Vector2DI)arg2, (int)arg3, (int)arg4, (bool)arg5) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class Game::Util::STG::Vector2D<long>,long,long,bool)
     |      
     |      __init__( (object)arg1, (Vector2DF)arg2, (float)arg3, (float)arg4, (bool)arg5) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class Game::Util::STG::Vector2D<float>,float,float,bool)
     |      
     |      __init__( (object)arg1, (Vector2DI)arg2, (Vector2DI)arg3, (bool)arg4) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class Game::Util::STG::Vector2D<long>,class Game::Util::STG::Vector2D<long>,bool)
     |      
     |      __init__( (object)arg1, (Vector2DF)arg2, (Vector2DI)arg3, (bool)arg4) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class Game::Util::STG::Vector2D<float>,class Game::Util::STG::Vector2D<long>,bool)
     |      
     |      __init__( (object)arg1, (Vector2DI)arg2, (Vector2DF)arg3, (bool)arg4) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class Game::Util::STG::Vector2D<long>,class Game::Util::STG::Vector2D<float>,bool)
     |      
     |      __init__( (object)arg1, (Vector2DF)arg2, (Vector2DF)arg3, (bool)arg4) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class Game::Util::STG::Vector2D<float>,class Game::Util::STG::Vector2D<float>,bool)
     |      
     |      __init__( (object)arg1, (RectI)arg2) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class Selene::Rect<long>)
     |      
     |      
     |              コンストラクタ
     |              
     |              __init__( (object)self) -> None :
     |                      '''
     |                      デフォルト状態で初期化します
     |                      
     |                        C++ signature :
     |                                void __init__(struct _object * __ptr64)
     |                      '''
     |              
     |              __init__( (object)self, (HitRectI | HitRectF)rect) -> None :
     |                      '''
     |                      他のオブジェクトをコピーして初期化します
     |                      
     |                      @param rect: 他のオブジェクト
     |                      
     |                        C++ signature :
     |                                void __init__(
     |                                struct _object * __ptr64,
     |                                (class Game::Util::STG::Hit::Rect<long> | class Game::Util::STG::Hit::Rect<float>))
     |                      '''
     |              
     |              __init__( (object)self, (int | float)x, (int | float)y, (int | float)width, (int | float)height, (bool)centerPos) -> None :
     |                      '''
     |                      XY座標と、幅と高さを指定して初期化します
     |                      
     |                      @param x: X座標
     |                      @param y: Y座標
     |                      @param width: 幅
     |                      @param height: 高さ
     |                      @param centerPos: 座標が矩形の中心ならTrue、矩形の左上ならFalse
     |                      
     |                        C++ signature :
     |                                void __init__(
     |                                struct _object * __ptr64,
     |                                (long | float),
     |                                (long | float),
     |                                (long | float),
     |                                (long | float),
     |                                bool)
     |                      '''
     |              
     |              __init__( (object)self, (Vector2DI | Vector2DF)position, (int | float)width, (int | float)height, (bool)centerPos) -> None :
     |                      '''
     |                      XY座標ベクトルと、幅と高さを指定して初期化します
     |                      
     |                      @param position: XY座標ベクトル
     |                      @param width: 幅
     |                      @param height: 高さ
     |                      @param centerPos: 座標が矩形の中心ならTrue、矩形の左上ならFalse
     |                      
     |                        C++ signature :
     |                                void __init__(
     |                                struct _object * __ptr64,
     |                                (class Game::Util::STG::Vector2D<long> | class Game::Util::STG::Vector2D<float>),
     |                                (long | float),
     |                                (long | float),
     |                                bool)
     |                      '''
     |              
     |              __init__( (object)self, (Vector2DI | Vector2DF)position, (Vector2DI | Vector2DF)widthHeight, (bool)centerPos) -> None :
     |                      '''
     |                      XY座標ベクトルと、幅と高さを表すベクトルを指定して初期化します
     |                      
     |                      @param position: XY座標ベクトル
     |                      @param widthHeight: 幅と高さのベクトル
     |                      @param centerPos: 座標が矩形の中心ならTrue、矩形の左上ならFalse
     |                      
     |                        C++ signature :
     |                                void __init__(
     |                                struct _object * __ptr64,
     |                                (class Game::Util::STG::Vector2D<long> | class Game::Util::STG::Vector2D<float>),
     |                                (class Game::Util::STG::Vector2D<long> | class Game::Util::STG::Vector2D<float>),
     |                                bool)
     |                      '''
     |              
     |              __init__( (object)self, (RectI | RectF)rect) -> None :
     |                      '''
     |                      Rectオブジェクトをもとに初期化します
     |                      
     |                      @param rect: Rectオブジェクト
     |                      
     |                        C++ signature :
     |                                void __init__(
     |                                struct _object * __ptr64,
     |                                (class Selene::Rect<long> | class Selene::Rect<float>))
     |                      '''
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  getPosition(...)
     |      位置座標ベクトルを取得します
     |      
     |      getPosition( (HitRectI)self, (bool)centerPos) -> Vector2DI :
     |      
     |      @param centerPos: 中心座標ならTrue、左上座標ならFalse
     |      @return: 中心座標ベクトルまたは左上座標ベクトル
     |      
     |        C++ signature :
     |                class Game::Util::STG::Vector2D<long> getPosition(
     |                class Game::Util::STG::Hit::Rect<long> {lvalue},
     |                bool)
     |  
     |  isHit(...)
     |      isHit( (HitRectI)arg1, (HitRectI)arg2) -> bool :
     |      
     |          C++ signature :
     |              bool isHit(class Game::Util::STG::Hit::Rect<long> {lvalue},class Game::Util::STG::Hit::Rect<long>)
     |      
     |      
     |              他のオブジェクトと当たっているか判定します
     |              
     |              isHit( (HitRectI)self, (HitRectI | HitRectF)rect) -> bool :
     |              
     |              @param rect: 他の矩形オブジェクト
     |              @return: TrueまたはFalse
     |              
     |                C++ signature :
     |                        bool isHit(
     |                        class Game::Util::STG::Hit::Rect<long> {lvalue},
     |                        (class Game::Util::STG::Hit::Rect<long> | class Game::Util::STG::Hit::Rect<float>))
     |  
     |  setPosition(...)
     |      setPosition( (HitRectI)arg1, (Vector2DI)arg2, (bool)arg3) -> None :
     |      
     |          C++ signature :
     |              void setPosition(class Game::Util::STG::Hit::Rect<long> {lvalue},class Game::Util::STG::Vector2D<long>,bool)
     |      
     |      setPosition( (HitRectI)arg1, (Vector2DF)arg2, (bool)arg3) -> None :
     |      
     |          C++ signature :
     |              void setPosition(class Game::Util::STG::Hit::Rect<long> {lvalue},class Game::Util::STG::Vector2D<float>,bool)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  center
     |  
     |  size
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 32
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Input(Boost.Python.instance)
     |  Method resolution order:
     |      Input
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  getAxisVirtualKey(...)
     |      getAxisVirtualKey( (AxisId)arg1) -> int :
     |      
     |          C++ signature :
     |              long getAxisVirtualKey(enum Game::Util::Input::STG::Detail::AXIS_ID)
     |  
     |  getButtonVirtualKey(...)
     |      getButtonVirtualKey( (KeyId)arg1) -> int :
     |      
     |          C++ signature :
     |              long getButtonVirtualKey(enum Game::Util::Input::STG::KEY_ID)
     |  
     |  getController(...)
     |      getController() -> InputController :
     |      
     |          C++ signature :
     |              class Defs::Util::Input::Controller getController()
     |  
     |  getJoystickCount(...)
     |      getJoystickCount() -> int :
     |      
     |          C++ signature :
     |              long getJoystickCount()
     |  
     |  setAxis(...)
     |      setAxis( (AxisId)arg1) -> int :
     |      
     |          C++ signature :
     |              long setAxis(enum Game::Util::Input::STG::Detail::AXIS_ID)
     |      
     |      setAxis( (AxisId)arg1, (int)arg2) -> None :
     |      
     |          C++ signature :
     |              void setAxis(enum Game::Util::Input::STG::Detail::AXIS_ID,unsigned long)
     |  
     |  setButton(...)
     |      setButton( (KeyId)arg1) -> int :
     |      
     |          C++ signature :
     |              long setButton(enum Game::Util::Input::STG::KEY_ID)
     |      
     |      setButton( (KeyId)arg1, (int)arg2) -> None :
     |      
     |          C++ signature :
     |              void setButton(enum Game::Util::Input::STG::KEY_ID,unsigned long)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __init__ = <built-in function __init__>
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class InputController(Boost.Python.instance)
     |  入力コントローラークラス
     |  
     |  __init__ = <built-in function __init__>
     |    Raises an exception
     |    This class cannot be instantiated from Python
     |  
     |  @ivar direction: 入力されている方向のベクトル
     |  ベクトルの絶対値の範囲は、[0, 1]です。
     |  
     |  Method resolution order:
     |      InputController
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  isFree(...)
     |      押されていない状態かを取得します
     |      
     |      isFree( (InputController)self, (KeyId)key) -> bool :
     |      
     |      @param key: キーのID
     |      @return: TrueまたはFalse
     |      
     |        C++ signature :
     |                bool isFree(
     |                class Defs::Util::Input::Controller {lvalue},
     |                enum Game::Util::Input::STG::KEY_ID)
     |  
     |  isHold(...)
     |      ホールド状態かを取得します
     |      
     |      isHold( (InputController)self, (KeyId)key) -> bool :
     |      
     |      @param key: キーのID
     |      @return: TrueまたはFalse
     |      
     |        C++ signature :
     |                bool isHold(
     |                class Defs::Util::Input::Controller {lvalue},
     |                enum Game::Util::Input::STG::KEY_ID)
     |  
     |  isPull(...)
     |      離した瞬間かを取得します
     |      
     |      isPull( (InputController)self, (KeyId)key) -> bool :
     |      
     |      @param key: キーのID
     |      @return: TrueまたはFalse
     |      
     |        C++ signature :
     |                bool isPull(
     |                class Defs::Util::Input::Controller {lvalue},
     |                enum Game::Util::Input::STG::KEY_ID)
     |  
     |  isPush(...)
     |      押した瞬間かを取得します
     |      
     |      isPush( (InputController)self, (KeyId)key) -> bool :
     |      
     |      @param key: キーのID
     |      @return: TrueまたはFalse
     |      
     |        C++ signature :
     |                bool isPush(
     |                class Defs::Util::Input::Controller {lvalue},
     |                enum Game::Util::Input::STG::KEY_ID)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  direction
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __init__ = <built-in function __init__>
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class KeyId(Boost.Python.enum)
     |  Method resolution order:
     |      KeyId
     |      Boost.Python.enum
     |      builtins.int
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  C = Game.KeyId.C
     |  
     |  LShift = Game.KeyId.LShift
     |  
     |  Space = Game.KeyId.Space
     |  
     |  X = Game.KeyId.X
     |  
     |  Z = Game.KeyId.Z
     |  
     |  names = {'C': Game.KeyId.C, 'LShift': Game.KeyId.LShift, 'Space': Game...
     |  
     |  values = {0: Game.KeyId.Z, 1: Game.KeyId.X, 2: Game.KeyId.C, 3: Game.K...
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Boost.Python.enum:
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.enum:
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.int:
     |  
     |  __abs__(...)
     |      x.__abs__() <==> abs(x)
     |  
     |  __add__(...)
     |      x.__add__(y) <==> x+y
     |  
     |  __and__(...)
     |      x.__and__(y) <==> x&y
     |  
     |  __bool__(...)
     |      x.__bool__() <==> x != 0
     |  
     |  __ceil__(...)
     |      Ceiling of an Integral returns itself.
     |  
     |  __divmod__(...)
     |      x.__divmod__(y) <==> divmod(x, y)
     |  
     |  __eq__(...)
     |      x.__eq__(y) <==> x==y
     |  
     |  __float__(...)
     |      x.__float__() <==> float(x)
     |  
     |  __floor__(...)
     |      Flooring an Integral returns itself.
     |  
     |  __floordiv__(...)
     |      x.__floordiv__(y) <==> x//y
     |  
     |  __format__(...)
     |  
     |  __ge__(...)
     |      x.__ge__(y) <==> x>=y
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __getnewargs__(...)
     |  
     |  __gt__(...)
     |      x.__gt__(y) <==> x>y
     |  
     |  __hash__(...)
     |      x.__hash__() <==> hash(x)
     |  
     |  __index__(...)
     |      x[y:z] <==> x[y.__index__():z.__index__()]
     |  
     |  __int__(...)
     |      x.__int__() <==> int(x)
     |  
     |  __invert__(...)
     |      x.__invert__() <==> ~x
     |  
     |  __le__(...)
     |      x.__le__(y) <==> x<=y
     |  
     |  __lshift__(...)
     |      x.__lshift__(y) <==> x<<y
     |  
     |  __lt__(...)
     |      x.__lt__(y) <==> x<y
     |  
     |  __mod__(...)
     |      x.__mod__(y) <==> x%y
     |  
     |  __mul__(...)
     |      x.__mul__(y) <==> x*y
     |  
     |  __ne__(...)
     |      x.__ne__(y) <==> x!=y
     |  
     |  __neg__(...)
     |      x.__neg__() <==> -x
     |  
     |  __or__(...)
     |      x.__or__(y) <==> x|y
     |  
     |  __pos__(...)
     |      x.__pos__() <==> +x
     |  
     |  __pow__(...)
     |      x.__pow__(y[, z]) <==> pow(x, y[, z])
     |  
     |  __radd__(...)
     |      x.__radd__(y) <==> y+x
     |  
     |  __rand__(...)
     |      x.__rand__(y) <==> y&x
     |  
     |  __rdivmod__(...)
     |      x.__rdivmod__(y) <==> divmod(y, x)
     |  
     |  __rfloordiv__(...)
     |      x.__rfloordiv__(y) <==> y//x
     |  
     |  __rlshift__(...)
     |      x.__rlshift__(y) <==> y<<x
     |  
     |  __rmod__(...)
     |      x.__rmod__(y) <==> y%x
     |  
     |  __rmul__(...)
     |      x.__rmul__(y) <==> y*x
     |  
     |  __ror__(...)
     |      x.__ror__(y) <==> y|x
     |  
     |  __round__(...)
     |      Rounding an Integral returns itself.
     |      Rounding with an ndigits argument also returns an integer.
     |  
     |  __rpow__(...)
     |      y.__rpow__(x[, z]) <==> pow(x, y[, z])
     |  
     |  __rrshift__(...)
     |      x.__rrshift__(y) <==> y>>x
     |  
     |  __rshift__(...)
     |      x.__rshift__(y) <==> x>>y
     |  
     |  __rsub__(...)
     |      x.__rsub__(y) <==> y-x
     |  
     |  __rtruediv__(...)
     |      x.__rtruediv__(y) <==> y/x
     |  
     |  __rxor__(...)
     |      x.__rxor__(y) <==> y^x
     |  
     |  __sizeof__(...)
     |      Returns size in memory, in bytes
     |  
     |  __sub__(...)
     |      x.__sub__(y) <==> x-y
     |  
     |  __truediv__(...)
     |      x.__truediv__(y) <==> x/y
     |  
     |  __trunc__(...)
     |      Truncating an Integral returns itself.
     |  
     |  __xor__(...)
     |      x.__xor__(y) <==> x^y
     |  
     |  bit_length(...)
     |      int.bit_length() -> int
     |      
     |      Number of bits necessary to represent self in binary.
     |      >>> bin(37)
     |      '0b100101'
     |      >>> (37).bit_length()
     |      6
     |  
     |  conjugate(...)
     |      Returns self, the complex conjugate of any int.
     |  
     |  to_bytes(...)
     |      int.to_bytes(length, byteorder, *, signed=False) -> bytes
     |      
     |      Return an array of bytes representing an integer.
     |      
     |      The integer is represented using length bytes.  An OverflowError is
     |      raised if the integer is not representable with the given number of
     |      bytes.
     |      
     |      The byteorder argument determines the byte order used to represent the
     |      integer.  If byteorder is 'big', the most significant byte is at the
     |      beginning of the byte array.  If byteorder is 'little', the most
     |      significant byte is at the end of the byte array.  To request the native
     |      byte order of the host system, use `sys.byteorder' as the byte order value.
     |      
     |      The signed keyword-only argument determines whether two's complement is
     |      used to represent the integer.  If signed is False and a negative integer
     |      is given, an OverflowError is raised.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.int:
     |  
     |  denominator
     |      the denominator of a rational number in lowest terms
     |  
     |  imag
     |      the imaginary part of a complex number
     |  
     |  numerator
     |      the numerator of a rational number in lowest terms
     |  
     |  real
     |      the real part of a complex number
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from builtins.int:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  from_bytes = <built-in method from_bytes of type object>
     |      int.from_bytes(bytes, byteorder, *, signed=False) -> int
     |      
     |      Return the integer represented by the given array of bytes.
     |      
     |      The bytes argument must either support the buffer protocol or be an
     |      iterable object producing bytes.  Bytes and bytearray are examples of
     |      built-in objects that support the buffer protocol.
     |      
     |      The byteorder argument determines the byte order used to represent the
     |      integer.  If byteorder is 'big', the most significant byte is at the
     |      beginning of the byte array.  If byteorder is 'little', the most
     |      significant byte is at the end of the byte array.  To request the native
     |      byte order of the host system, use `sys.byteorder' as the byte order value.
     |      
     |      The signed keyword-only argument indicates whether two's complement is
     |      used to represent the integer.
    
    class LocatorLinearF(Boost.Python.instance)
     |  直線移動する座標を管理するクラス
     |  
     |  @ivar position: 位置ベクトル
     |  @ivar speed: 速度ベクトル
     |  @ivar accel: 加速度ベクトル
     |  
     |  Method resolution order:
     |      LocatorLinearF
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      __init__( (object)arg1) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64)
     |      
     |      __init__( (object)arg1, (LocatorLinearF)arg2) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class Game::Util::STG::Locator::Linear<float>)
     |      
     |      __init__( (object)arg1, (Vector2DF)arg2) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class Game::Util::STG::Vector2D<float>)
     |      
     |      
     |              コンストラクタ
     |              
     |              __init__( (object)self) -> None :
     |                      '''
     |                      デフォルト状態で初期化します
     |                      
     |                        C++ signature :
     |                                void __init__(struct _object * __ptr64)
     |                      '''
     |              
     |              __init__( (object)self, (LocatorLinearF)locator) -> None :
     |                      '''
     |                      他のオブジェクトの状態をコピーして初期化します
     |                      
     |                      @param locator: 他のオブジェクト
     |                      
     |                        C++ signature :
     |                                void __init__(
     |                                struct _object * __ptr64,
     |                                class Game::Util::STG::Locator::Linear<float>)
     |                      '''
     |              
     |              __init__( (object)self, (Vector2DF)position[, (Vector2DF)speed, (Vector2DF)accel]) -> None :
     |                      '''
     |                      位置と速度と加速度を初期化します
     |                      
     |                      @param position: 位置ベクトル
     |                      @param speed: 速度ベクトル
     |                      @param accel: 加速度ベクトル
     |                      
     |                        C++ signature :
     |                                void __init__(
     |                                struct _object * __ptr64,
     |                                class Game::Util::STG::Vector2D<float>,
     |                                [class Game::Util::STG::Vector2D<float>,
     |                                class Game::Util::STG::Vector2D<float>])
     |                      '''
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  applyExternalForce(...)
     |      外力を適用します
     |      
     |      applyExternalForce( (LocatorLinearF)self, (Vector2DF)force) -> Vector2DF :
     |      
     |      @param force: 外力ベクトル
     |      @return: 反発ベクトル
     |      
     |        C++ signature :
     |                class Game::Util::STG::Vector2D<float> applyExternalForce(
     |                class Game::Util::STG::Locator::Linear<float> {lvalue},
     |                class Game::Util::STG::Vector2D<float>)
     |  
     |  update(...)
     |      状態を更新します
     |      
     |      update( (LocatorLinearF)self) -> None :
     |      
     |        C++ signature :
     |                void update(class Game::Util::STG::Locator::Linear<float> {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  accel
     |  
     |  position
     |  
     |  speed
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 56
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class LocatorML(Boost.Python.instance)
     |  Method resolution order:
     |      LocatorML
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      __init__( (object)arg1, (BulletMLParser)arg2, (Vector2DF)arg3, (Random)arg4) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class boost::shared_ptr<class BulletMLParser>,class Game::Util::STG::Vector2D<float>,class boost::shared_ptr<class Game::Util::Random::IRandom>)
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  applyExternalForce(...)
     |      applyExternalForce( (LocatorML)arg1, (Vector2DF)arg2) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExternalForce(class Game::Util::STG::Locator::MLLocator {lvalue},class Game::Util::STG::Vector2D<float>)
     |  
     |  update(...)
     |      update( (LocatorML)arg1) -> None :
     |      
     |          C++ signature :
     |              void update(class Game::Util::STG::Locator::MLLocator {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  aimAngle
     |  
     |  defaultRank
     |  
     |  end
     |  
     |  locator
     |  
     |  rank
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 168
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class LocatorRotateF(Boost.Python.instance)
     |  円移動する座標を管理するクラス
     |  
     |  @ivar position: 位置ベクトル
     |  @ivar center: 中心位置ベクトル
     |  @ivar centerSpeed: 中心位置移動速度ベクトル
     |  @ivar centerAccel: 中心位置移動加速度ベクトル
     |  @ivar radius: 半径
     |  @ivar radiusSpeed: 半径伸縮速度
     |  @ivar radiusAccel: 半径伸縮加速度
     |  @ivar angle: 角度
     |  @ivar angleSpeed: 角速度
     |  @ivar angleAccel: 角加速度
     |  
     |  Method resolution order:
     |      LocatorRotateF
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      __init__( (object)arg1) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64)
     |      
     |      
     |              コンストラクタ
     |              
     |              __init__( (object)self) -> None :
     |                      '''
     |                      デフォルト状態で初期化します
     |                      
     |                        C++ signature :
     |                                void __init__(struct _object * __ptr64)
     |                      '''
     |              
     |              __init__( (object)self, (LocatorRotateF)locator) -> None :
     |                      '''
     |                      他のオブジェクトの状態をコピーして初期化します
     |                      
     |                      @param locator: 他のオブジェクト
     |                      
     |                        C++ signature :
     |                                void __init__(
     |                                struct _object * __ptr64,
     |                                class Game::Util::STG::Locator::Rotate<float>)
     |                      '''
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  applyExternalForce(...)
     |      外力を適用します
     |      
     |      applyExternalForce( (LocatorRotateF)self, (Vector2DF)force) -> Vector2DF :
     |      
     |      @param force: 外力ベクトル
     |      @return: 反発ベクトル
     |      
     |        C++ signature :
     |                class Game::Util::STG::Vector2D<float> applyExternalForce(
     |                class Game::Util::STG::Locator::Rotate<float> {lvalue},
     |                class Game::Util::STG::Vector2D<float>)
     |  
     |  update(...)
     |      状態を更新します
     |      
     |      update( (LocatorRotateF)self) -> None :
     |      
     |        C++ signature :
     |                void update(class Game::Util::STG::Locator::Rotate<float> {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  angle
     |  
     |  angleAccel
     |  
     |  angleSpeed
     |  
     |  center
     |  
     |  centerAccel
     |  
     |  centerSpeed
     |  
     |  position
     |  
     |  radius
     |  
     |  radiusAccel
     |  
     |  radiusSpeed
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 80
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class LocatorTraceF(Boost.Python.instance)
     |  目標を追尾移動する座標を管理するクラス
     |  
     |  @ivar tracing: 追尾の可否
     |  @ivar position: 位置ベクトル
     |  @ivar targetPosition: 目標位置ベクトル
     |  @ivar speed: 速度ベクトル
     |  @ivar accel: 加速度ベクトル
     |  @ivar maxCirclingAngle: 最大旋回角度
     |  
     |  Method resolution order:
     |      LocatorTraceF
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      __init__( (object)arg1) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64)
     |      
     |      __init__( (object)arg1, (LocatorTraceF)arg2) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class Game::Util::STG::Locator::Trace<float>)
     |      
     |      
     |              コンストラクタ
     |              
     |              __init__( (object)self) -> None :
     |                      '''
     |                      デフォルト状態で初期化します
     |                      
     |                        C++ signature :
     |                                void __init__(struct _object * __ptr64)
     |                      '''
     |              
     |              __init__( (object)self, (LocatorTraceF)locator) -> None :
     |                      '''
     |                      他のオブジェクトの状態をコピーして初期化します
     |                      
     |                      @param locator: 他のオブジェクト
     |                      
     |                        C++ signature :
     |                                void __init__(
     |                                struct _object * __ptr64,
     |                                class Game::Util::STG::Locator::Trace<float>)
     |                      '''
     |              
     |              __init__( (object)self, (float)maxCirclingAngle) -> None :
     |                      '''
     |                      最大旋回角度を指定して初期化します
     |                      
     |                      @param maxCirclingAngle: 最大旋回角度
     |                      
     |                        C++ signature :
     |                                void __init__(
     |                                struct _object * __ptr64,
     |                                float)
     |                      '''
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  applyExternalForce(...)
     |      外力を適用します
     |      
     |      applyExternalForce( (LocatorTraceF)self, (Vector2DF)force) -> Vector2DF :
     |      
     |      @param force: 外力ベクトル
     |      @return: 反発ベクトル
     |      
     |        C++ signature :
     |                class Game::Util::STG::Vector2D<float> applyExternalForce(
     |                class Game::Util::STG::Locator::Trace<float> {lvalue},
     |                class Game::Util::STG::Vector2D<float>)
     |  
     |  update(...)
     |      状態を更新します
     |      
     |      update( (LocatorTraceF)self) -> None :
     |      
     |        C++ signature :
     |                void update(class Game::Util::STG::Locator::Trace<float> {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  accel
     |  
     |  maxCirclingAngle
     |  
     |  position
     |  
     |  speed
     |  
     |  targetPosition
     |  
     |  tracing
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 72
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Point2DF(Boost.Python.instance)
     |  ２次元の座標を示すクラス
     |  
     |  各種演算子を備えた、2次元の座標を示すクラスです。
     |  各座標は浮動小数点数で表現されます。
     |  演算子は、+, -, *, /, +=, -=, *=, /= が定義されています。
     |  
     |  @ivar x: X座標
     |  @ivar y: Y座標
     |  
     |  Method resolution order:
     |      Point2DF
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __add__(...)
     |      __add__( (Point2DF)arg1, (Point2DF)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __add__(class Selene::Point2D<float> {lvalue},class Selene::Point2D<float>)
     |      
     |      __add__( (Point2DF)arg1, (float)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __add__(class Selene::Point2D<float> {lvalue},float)
     |  
     |  __iadd__(...)
     |      __iadd__( (object)arg1, (Point2DF)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __iadd__(struct boost::python::back_reference<class Selene::Point2D<float> & __ptr64>,class Selene::Point2D<float>)
     |      
     |      __iadd__( (object)arg1, (float)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __iadd__(struct boost::python::back_reference<class Selene::Point2D<float> & __ptr64>,float)
     |  
     |  __idiv__(...)
     |      __idiv__( (object)arg1, (Point2DF)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __idiv__(struct boost::python::back_reference<class Selene::Point2D<float> & __ptr64>,class Selene::Point2D<float>)
     |      
     |      __idiv__( (object)arg1, (float)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __idiv__(struct boost::python::back_reference<class Selene::Point2D<float> & __ptr64>,float)
     |  
     |  __imul__(...)
     |      __imul__( (object)arg1, (Point2DF)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __imul__(struct boost::python::back_reference<class Selene::Point2D<float> & __ptr64>,class Selene::Point2D<float>)
     |      
     |      __imul__( (object)arg1, (float)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __imul__(struct boost::python::back_reference<class Selene::Point2D<float> & __ptr64>,float)
     |  
     |  __init__(...)
     |      __init__( (object)arg1) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64)
     |      
     |      __init__( (object)arg1, (float)arg2, (float)arg3) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,float,float)
     |      
     |      __init__( (object)arg1, (Point2DF)arg2) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class Selene::Point2D<float>)
     |      
     |      
     |      コンストラクタ
     |      
     |      __init__( (object)self) -> None :
     |              '''
     |              座標を0で初期化します
     |              
     |                C++ signature :
     |                        void __init__(struct _object * __ptr64)
     |              '''
     |      
     |      __init__( (object)self, (float)x, (float)y) -> None :
     |              '''
     |              座標を引数のX座標とY座標で初期化します
     |              
     |              @param x: X座標
     |              @param y: Y座標
     |              
     |                C++ signature :
     |                        void __init__(struct _object * __ptr64,float,float)
     |              '''
     |      
     |      __init__( (object)self, (Point2DF | Point2DI)point) -> None :
     |              '''
     |              座標を他の2次元座標オブジェクトで初期化します
     |              
     |              @param point: 他の2次元座標オブジェクト
     |              
     |                C++ signature :
     |                        void __init__(
     |                        struct _object * __ptr64,
     |                        (class Selene::Point2D<float> | class Selene::Point2D<long>))
     |              '''
     |  
     |  __isub__(...)
     |      __isub__( (object)arg1, (Point2DF)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __isub__(struct boost::python::back_reference<class Selene::Point2D<float> & __ptr64>,class Selene::Point2D<float>)
     |      
     |      __isub__( (object)arg1, (float)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __isub__(struct boost::python::back_reference<class Selene::Point2D<float> & __ptr64>,float)
     |  
     |  __mul__(...)
     |      __mul__( (Point2DF)arg1, (Point2DF)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __mul__(class Selene::Point2D<float> {lvalue},class Selene::Point2D<float>)
     |      
     |      __mul__( (Point2DF)arg1, (float)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __mul__(class Selene::Point2D<float> {lvalue},float)
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  __sub__(...)
     |      __sub__( (Point2DF)arg1, (Point2DF)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __sub__(class Selene::Point2D<float> {lvalue},class Selene::Point2D<float>)
     |      
     |      __sub__( (Point2DF)arg1, (float)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __sub__(class Selene::Point2D<float> {lvalue},float)
     |  
     |  __truediv__(...)
     |      __truediv__( (Point2DF)arg1, (Point2DF)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __truediv__(class Selene::Point2D<float> {lvalue},class Selene::Point2D<float>)
     |      
     |      __truediv__( (Point2DF)arg1, (float)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __truediv__(class Selene::Point2D<float> {lvalue},float)
     |  
     |  limitLength(...)
     |      原点からの長さをある範囲内に収まるようにした座標を取得します
     |      
     |      limitLength( (Point2DF)self, (float)limit) -> Point2DF :
     |      
     |      @param limit: 制限値
     |      @return: 制限された座標
     |      
     |        C++ signature :
     |                class Selene::Point2D<float> limitLength(
     |                class Selene::Point2D<float> {lvalue},
     |                float)
     |  
     |  normalize(...)
     |      長さを1になるように正規化した座標を取得します
     |      
     |      normalize( (Point2DF)self) -> Point2DF :
     |      
     |      @return: 正規化された座標
     |      
     |        C++ signature :
     |                class Selene::Point2D<float> normalize(class Selene::Point2D<float> {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  x
     |  
     |  y
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 24
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Point2DI(Boost.Python.instance)
     |  ２次元の座標を示すクラス
     |  
     |  各種演算子を備えた、2次元の座標を示すクラスです。
     |  各座標は整数で表現されます。
     |  演算子は、+, -, *, /, +=, -=, *=, /= が定義されています。
     |  
     |  @ivar x: X座標
     |  @ivar y: Y座標
     |  
     |  Method resolution order:
     |      Point2DI
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __add__(...)
     |      __add__( (Point2DI)arg1, (Point2DI)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __add__(class Selene::Point2D<long> {lvalue},class Selene::Point2D<long>)
     |      
     |      __add__( (Point2DI)arg1, (int)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __add__(class Selene::Point2D<long> {lvalue},long)
     |  
     |  __iadd__(...)
     |      __iadd__( (object)arg1, (Point2DI)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __iadd__(struct boost::python::back_reference<class Selene::Point2D<long> & __ptr64>,class Selene::Point2D<long>)
     |      
     |      __iadd__( (object)arg1, (int)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __iadd__(struct boost::python::back_reference<class Selene::Point2D<long> & __ptr64>,long)
     |  
     |  __idiv__(...)
     |      __idiv__( (object)arg1, (Point2DI)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __idiv__(struct boost::python::back_reference<class Selene::Point2D<long> & __ptr64>,class Selene::Point2D<long>)
     |      
     |      __idiv__( (object)arg1, (int)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __idiv__(struct boost::python::back_reference<class Selene::Point2D<long> & __ptr64>,long)
     |  
     |  __imul__(...)
     |      __imul__( (object)arg1, (Point2DI)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __imul__(struct boost::python::back_reference<class Selene::Point2D<long> & __ptr64>,class Selene::Point2D<long>)
     |      
     |      __imul__( (object)arg1, (int)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __imul__(struct boost::python::back_reference<class Selene::Point2D<long> & __ptr64>,long)
     |  
     |  __init__(...)
     |      __init__( (object)arg1) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64)
     |      
     |      __init__( (object)arg1, (int)arg2, (int)arg3) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,long,long)
     |      
     |      __init__( (object)arg1, (Point2DI)arg2) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class Selene::Point2D<long>)
     |      
     |      
     |      コンストラクタ
     |      
     |      __init__( (object)self) -> None :
     |              '''
     |              座標を0で初期化します
     |              
     |                C++ signature :
     |                        void __init__(struct _object * __ptr64)
     |              '''
     |      
     |      __init__( (object)self, (int)x, (int)y) -> None :
     |              '''
     |              座標を引数のX座標とY座標で初期化します
     |              
     |              @param x: X座標
     |              @param y: Y座標
     |              
     |                C++ signature :
     |                        void __init__(
     |                        struct _object * __ptr64,
     |                        long,
     |                        long)
     |              '''
     |      
     |      __init__( (object)self, (Point2DI | Point2DF)point) -> None :
     |              '''
     |              座標を他の2次元座標オブジェクトで初期化します
     |              
     |              @param point: 他の2次元座標オブジェクト
     |              
     |                C++ signature :
     |                        void __init__(
     |                        struct _object * __ptr64,
     |                        (class Selene::Point2D<long> | class Selene::Point2D<float>))
     |              '''
     |  
     |  __isub__(...)
     |      __isub__( (object)arg1, (Point2DI)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __isub__(struct boost::python::back_reference<class Selene::Point2D<long> & __ptr64>,class Selene::Point2D<long>)
     |      
     |      __isub__( (object)arg1, (int)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __isub__(struct boost::python::back_reference<class Selene::Point2D<long> & __ptr64>,long)
     |  
     |  __mul__(...)
     |      __mul__( (Point2DI)arg1, (Point2DI)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __mul__(class Selene::Point2D<long> {lvalue},class Selene::Point2D<long>)
     |      
     |      __mul__( (Point2DI)arg1, (int)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __mul__(class Selene::Point2D<long> {lvalue},long)
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  __sub__(...)
     |      __sub__( (Point2DI)arg1, (Point2DI)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __sub__(class Selene::Point2D<long> {lvalue},class Selene::Point2D<long>)
     |      
     |      __sub__( (Point2DI)arg1, (int)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __sub__(class Selene::Point2D<long> {lvalue},long)
     |  
     |  __truediv__(...)
     |      __truediv__( (Point2DI)arg1, (Point2DI)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __truediv__(class Selene::Point2D<long> {lvalue},class Selene::Point2D<long>)
     |      
     |      __truediv__( (Point2DI)arg1, (int)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __truediv__(class Selene::Point2D<long> {lvalue},long)
     |  
     |  limitLength(...)
     |      原点からの長さをある範囲内に収まるようにした座標を取得します
     |      
     |      limitLength( (Point2DI)self, (float)limit) -> Point2DI :
     |      
     |      @param limit: 制限値
     |      @return: 制限された座標
     |      
     |        C++ signature :
     |                class Selene::Point2D<long> limitLength(
     |                class Selene::Point2D<long> {lvalue},
     |                float)
     |  
     |  normalize(...)
     |      長さを1になるように正規化した座標を取得します
     |      
     |      normalize( (Point2DI)self) -> Point2DI :
     |      
     |      @return: 正規化された座標
     |      
     |        C++ signature :
     |                class Selene::Point2D<long> normalize(class Selene::Point2D<long> {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  x
     |  
     |  y
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 24
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Random(Boost.Python.instance)
     |  乱数クラス
     |  
     |  __init__ = <built-in function __init__>
     |    Raises an exception
     |    This class cannot be instantiated from Python
     |  
     |  Method resolution order:
     |      Random
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  getBool(...)
     |      真偽値をランダムに取得します
     |      
     |      getBool( (Random)self) -> bool :
     |      
     |      @return: TrueまたはFalse
     |  
     |  getFloat(...)
     |      最小値と最大値を指定して、浮動小数点数の乱数を取得します
     |      
     |      getFloat( (Random)self, (float)min, (float)max) -> float :
     |      
     |      @param min: 最小値
     |      @param max: 最大値
     |      @return: 浮動小数点数の乱数値
     |  
     |  getInt(...)
     |      最小値と最大値を指定して、整数の乱数を取得します
     |      
     |      getInt( (Random)self, (int)min, (int)max) -> int :
     |      
     |      @param min: 最小値
     |      @param max: 最大値
     |      @return: 整数の乱数値
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __init__ = <built-in function __init__>
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class RectF(Boost.Python.instance)
     |  矩形を表現するクラス
     |  
     |  左上のXY座標と、幅と高さで矩形を表現します。
     |  XY座標と幅と高さは浮動小数点数で表現されます。
     |  
     |  @ivar x: 左上のX座標
     |  @ivar y: 左上のY座標
     |  @ivar w: 幅
     |  @ivar h: 高さ
     |  
     |  Method resolution order:
     |      RectF
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      __init__( (object)arg1) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64)
     |      
     |      __init__( (object)arg1, (float)arg2, (float)arg3, (float)arg4, (float)arg5) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,float,float,float,float)
     |      
     |      __init__( (object)arg1, (RectF)arg2) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class Selene::Rect<float>)
     |      
     |      
     |      コンストラクタ
     |      
     |      __init__( (object)self) -> None :
     |              '''
     |                C++ signature :
     |                        void __init__(struct _object * __ptr64)
     |              '''
     |      
     |      __init__( (object)self, (float)x, (float)y, (float)w, (float)h) -> None :
     |              '''
     |              XY座標と幅と高さを指定して初期化します
     |              
     |              @param x: X座標
     |              @param y: Y座標
     |              @param w: 幅
     |              @param h: 高さ
     |              
     |                C++ signature :
     |                        void __init__(struct _object * __ptr64,float,float,float,float)
     |              '''
     |      
     |      __init__( (object)self, (RectF | RectI)rect) -> None :
     |              '''
     |              他の矩形オブジェクトで初期化します
     |              
     |              @param rect: 他の矩形オブジェクト
     |              
     |                C++ signature :
     |                        void __init__(
     |                        struct _object * __ptr64,
     |                        (class Selene::Rect<float> | class Selene::Rect<long>))
     |              '''
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  checkHit(...)
     |      指定した座標が矩形内にあるか判定します
     |      
     |      checkHit( (RectF)self, (Point2DF)position) -> bool :
     |      
     |      @param position: 判定する座標
     |      @return: TrueまたはFalse
     |      
     |        C++ signature :
     |                bool checkHit(
     |                class Selene::Rect<float> {lvalue},
     |                class Selene::Point2D<float>)
     |  
     |  clip(...)
     |      指定した矩形で切り抜いた矩形を取得します
     |      
     |      clip( (RectF)self, (RectF)rect) -> RectF :
     |      
     |      @param rect: 切り抜く矩形領域
     |      @return: 切り抜かれた矩形領域
     |      
     |        C++ signature :
     |                class Selene::Rect<float> clip(
     |                class Selene::Rect<float> {lvalue},
     |                class Selene::Rect<float>)
     |  
     |  getLocalPosition(...)
     |      左上のローカル座標を取得します
     |      
     |      getLocalPosition( (RectF)self, (Point2DF)position) -> Point2DF :
     |      
     |      @param position: ローカル座標
     |      @return: 座標オブジェクト
     |      
     |        C++ signature :
     |                class Selene::Point2D<float> getLocalPosition(
     |                class Selene::Rect<float> {lvalue},
     |                class Selene::Point2D<float>)
     |  
     |  getPosition(...)
     |      左上の座標を取得します
     |      
     |      getPosition( (RectF)self) -> Point2DF :
     |      
     |      @return: 座標オブジェクト
     |      
     |        C++ signature :
     |                class Selene::Point2D<float> getPosition(class Selene::Rect<float> {lvalue})
     |  
     |  getSize(...)
     |      幅と高さを取得します
     |      
     |      getSize( (RectF)self) -> Point2DF :
     |      
     |      @return: 幅と高さ
     |      
     |        C++ signature :
     |                class Selene::Point2D<float> getSize(class Selene::Rect<float> {lvalue})
     |  
     |  scaleByCenter(...)
     |      矩形の中心を基準として、指定した値でスケーリングした矩形を取得します
     |      
     |      scaleByCenter( (RectF)self, (float)scaling) -> RectF :
     |      
     |      @param scaling: スケーリング量
     |      @return: スケーリングされた矩形領域
     |      
     |        C++ signature :
     |                class Selene::Rect<float> scaleByCenter(
     |                class Selene::Rect<float> {lvalue},
     |                float)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  h
     |  
     |  w
     |  
     |  x
     |  
     |  y
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 32
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class RectI(Boost.Python.instance)
     |  矩形を表現するクラス
     |  
     |  左上のXY座標と、幅と高さで矩形を表現します。
     |  XY座標と幅と高さは整数で表現されます。
     |  
     |  @ivar x: 左上のX座標
     |  @ivar y: 左上のY座標
     |  @ivar w: 幅
     |  @ivar h: 高さ
     |  
     |  Method resolution order:
     |      RectI
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      __init__( (object)arg1) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64)
     |      
     |      __init__( (object)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,long,long,long,long)
     |      
     |      __init__( (object)arg1, (RectI)arg2) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class Selene::Rect<long>)
     |      
     |      
     |      コンストラクタ
     |      
     |      __init__( (object)self) -> None :
     |              '''
     |              各要素を0で初期化します
     |              
     |                C++ signature :
     |                        void __init__(struct _object * __ptr64)
     |              '''
     |      
     |      __init__( (object)self, (int)x, (int)y, (int)w, (int)h) -> None :
     |              '''
     |              XY座標と幅と高さを指定して初期化します
     |              
     |              @param x: X座標
     |              @param y: Y座標
     |              @param w: 幅
     |              @param h: 高さ
     |              
     |                C++ signature :
     |                        void __init__(struct _object * __ptr64,long,long,long,long)
     |              '''
     |      
     |      __init__( (object)self, (RectI | RectF)rect) -> None :
     |              '''
     |              他の矩形オブジェクトで初期化します
     |              
     |              @param rect: 他の矩形オブジェクト
     |              
     |                C++ signature :
     |                        void __init__(
     |                        struct _object * __ptr64,
     |                        (class Selene::Rect<long> | class Selene::Rect<float>))
     |              '''
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  checkHit(...)
     |      指定した座標が矩形内にあるか判定します
     |      
     |      checkHit( (RectI)self, (Point2DI)position) -> bool :
     |      
     |      @param position: 判定する座標
     |      @return: TrueまたはFalse
     |      
     |        C++ signature :
     |                bool checkHit(
     |                class Selene::Rect<long> {lvalue},
     |                class Selene::Point2D<long>)
     |  
     |  clip(...)
     |      指定した矩形で切り抜いた矩形を取得します
     |      
     |      clip( (RectI)self, (RectI)rect) -> RectI :
     |      
     |      @param rect: 切り抜く矩形領域
     |      @return: 切り抜かれた矩形領域
     |      
     |        C++ signature :
     |                class Selene::Rect<long> clip(
     |                class Selene::Rect<long> {lvalue},
     |                class Selene::Rect<long>)
     |  
     |  getLocalPosition(...)
     |      左上のローカル座標を取得します
     |      
     |      getLocalPosition( (RectI)self, (Point2DI)position) -> Point2DI :
     |      
     |      @param position: ローカル座標
     |      @return: 座標オブジェクト
     |      
     |        C++ signature :
     |                class Selene::Point2D<long> getLocalPosition(
     |                class Selene::Rect<long> {lvalue},
     |                class Selene::Point2D<long>)
     |  
     |  getPosition(...)
     |      左上の座標を取得します
     |      
     |      getPosition( (RectI)self) -> Point2DI :
     |      
     |      @return: 座標オブジェクト
     |      
     |        C++ signature :
     |                class Selene::Point2D<long> getPosition(class Selene::Rect<long> {lvalue})
     |  
     |  getSize(...)
     |      幅と高さを取得します
     |      
     |      getSize( (RectI)self) -> Point2DI :
     |      
     |      @return: 幅と高さ
     |      
     |        C++ signature :
     |                class Selene::Point2D<long> getSize(class Selene::Rect<long> {lvalue})
     |  
     |  scaleByCenter(...)
     |      矩形の中心を基準として、指定した値でスケーリングした矩形を取得します
     |      
     |      scaleByCenter( (RectI)self, (int)scaling) -> RectI :
     |      
     |      @param scaling: スケーリング量
     |      @return: スケーリングされた矩形領域
     |      
     |        C++ signature :
     |                class Selene::Rect<long> scaleByCenter(
     |                class Selene::Rect<long> {lvalue},
     |                long)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  h
     |  
     |  w
     |  
     |  x
     |  
     |  y
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 32
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class RepeatCounter(Boost.Python.instance)
     |  繰り返しを管理するクラス
     |  
     |  @ivar repeatCount: 現在の繰り返し回数
     |  @ivar interval: 繰り返し間隔
     |  
     |  Method resolution order:
     |      RepeatCounter
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      __init__( (object)arg1) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64)
     |      
     |      __init__( (object)arg1, (RepeatCounter)arg2) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class Game::Util::RepeatCounter)
     |      
     |      
     |      コンストラクタ
     |      
     |      __init__( (object)self) -> None :
     |              '''
     |              繰り返し間隔を1.0で初期化します
     |              
     |                C++ signature :
     |                        void __init__(struct _object * __ptr64)
     |              '''
     |      
     |      __init__( (object)self, (RepeatCounter)repeatCounter) -> None :
     |              '''
     |              他のオブジェクトで初期化します
     |              
     |              @param repeatCounter: 他のオブジェクト
     |              
     |                C++ signature :
     |                        void __init__(
     |                        struct _object * __ptr64,
     |                        class Game::Util::RepeatCounter)
     |              '''
     |      
     |      __init__( (object)self, (float)interval) -> None :
     |              '''
     |              繰り返し間隔を指定して初期化します
     |              
     |              @param interval: 繰り返し間隔
     |              
     |                C++ signature :
     |                        void __init__(
     |                        struct _object * __ptr64,
     |                        float)
     |              '''
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  reset(...)
     |      状態を初期化します
     |      
     |      reset( (RepeatCounter)self) -> None :
     |      
     |        C++ signature :
     |                void reset(class Game::Util::RepeatCounter {lvalue})
     |  
     |  update(...)
     |      状態を更新します
     |      
     |      update( (RepeatCounter)self) -> None :
     |      
     |        C++ signature :
     |                void update(class Game::Util::RepeatCounter {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  interval
     |  
     |  repeatCount
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 32
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class STG(Boost.Python.instance)
     |  Method resolution order:
     |      STG
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  genObjectId(...)
     |      genObjectId() -> int :
     |      
     |          C++ signature :
     |              unsigned __int64 genObjectId()
     |  
     |  getActors(...)
     |      getActors() -> STGActors :
     |      
     |          C++ signature :
     |              class boost::shared_ptr<class Defs::Ctrl::STG::Actors> getActors()
     |  
     |  getController(...)
     |      getController() -> InputController :
     |      
     |          C++ signature :
     |              class Defs::Util::Input::Controller getController()
     |  
     |  getDebugStrFlag(...)
     |      getDebugStrFlag() -> bool :
     |      
     |          C++ signature :
     |              bool getDebugStrFlag()
     |  
     |  getNextStage(...)
     |      getNextStage() -> STGStage :
     |      
     |          C++ signature :
     |              class boost::shared_ptr<class Game::Mdl::STG::Stage::Stage::IStage> getNextStage()
     |  
     |  getRandom(...)
     |      getRandom() -> Random :
     |      
     |          C++ signature :
     |              class boost::shared_ptr<class Game::Util::Random::IRandom> getRandom()
     |  
     |  restart(...)
     |      restart() -> None :
     |      
     |          C++ signature :
     |              void restart()
     |  
     |  setDebugStrFlag(...)
     |      setDebugStrFlag( (bool)arg1) -> None :
     |      
     |          C++ signature :
     |              void setDebugStrFlag(bool)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __init__ = <built-in function __init__>
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class STGActor(Boost.Python.instance)
     |  Method resolution order:
     |      STGActor
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  applyExternalForce(...)
     |      applyExternalForce( (STGActor)arg1, (Vector2DF)arg2) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExternalForce(class Game::Mdl::STG::Actor::IActor {lvalue},class Game::Util::STG::Vector2D<float>)
     |  
     |  erase(...)
     |      erase( (STGActor)arg1) -> None :
     |      
     |          C++ signature :
     |              void erase(class Game::Mdl::STG::Actor::IActor {lvalue})
     |  
     |  setValidAreaMargin(...)
     |      setValidAreaMargin( (STGActor)arg1, (int)arg2) -> None :
     |      
     |          C++ signature :
     |              void setValidAreaMargin(class Game::Mdl::STG::Actor::IActor {lvalue},int)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  frameCount
     |  
     |  objectId
     |  
     |  position
     |  
     |  valid
     |  
     |  validFrameNum
     |  
     |  validRect
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __init__ = <built-in function __init__>
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class STGActorBase(STGActor)
     |  Method resolution order:
     |      STGActorBase
     |      STGActor
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  draw(...)
     |      draw( (STGActorBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void draw(class Defs::Mdl::STG::Actor::Base {lvalue})
     |  
     |  erase(...)
     |      erase( (STGActorBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void erase(class Defs::Mdl::STG::Actor::Base {lvalue})
     |  
     |  setValidAreaMargin(...)
     |      setValidAreaMargin( (STGActorBase)arg1, (int)arg2) -> None :
     |      
     |          C++ signature :
     |              void setValidAreaMargin(class Defs::Mdl::STG::Actor::Base {lvalue},int)
     |  
     |  update(...)
     |      update( (STGActorBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void update(class Defs::Mdl::STG::Actor::Base {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  frameCount
     |  
     |  objectId
     |  
     |  valid
     |  
     |  validFrameNum
     |  
     |  validRect
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __init__ = <built-in function __init__>
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from STGActor:
     |  
     |  applyExternalForce(...)
     |      applyExternalForce( (STGActor)arg1, (Vector2DF)arg2) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExternalForce(class Game::Mdl::STG::Actor::IActor {lvalue},class Game::Util::STG::Vector2D<float>)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from STGActor:
     |  
     |  position
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class STGActors(Boost.Python.instance)
     |  Method resolution order:
     |      STGActors
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  detectBulletHit(...)
     |      detectBulletHit( (STGActors)arg1, (HitCircleI)arg2) -> STGBullet :
     |      
     |          C++ signature :
     |              class boost::shared_ptr<class Game::Mdl::STG::Bullet::IBullet> detectBulletHit(class Defs::Ctrl::STG::Actors {lvalue},class Game::Util::STG::Hit::Circle<long>)
     |      
     |      detectBulletHit( (STGActors)arg1, (HitRectI)arg2) -> STGBullet :
     |      
     |          C++ signature :
     |              class boost::shared_ptr<class Game::Mdl::STG::Bullet::IBullet> detectBulletHit(class Defs::Ctrl::STG::Actors {lvalue},class Game::Util::STG::Hit::Rect<long>)
     |  
     |  detectEnemyHit(...)
     |      detectEnemyHit( (STGActors)arg1, (HitRectI)arg2) -> STGEnemy :
     |      
     |          C++ signature :
     |              class boost::shared_ptr<class Game::Mdl::STG::Enemy::IEnemy> detectEnemyHit(class Defs::Ctrl::STG::Actors {lvalue},class Game::Util::STG::Hit::Rect<long>)
     |  
     |  detectItemHit(...)
     |      detectItemHit( (STGActors)arg1, (HitCircleI)arg2) -> STGItem :
     |      
     |          C++ signature :
     |              class boost::shared_ptr<class Game::Mdl::STG::Item::IItem> detectItemHit(class Defs::Ctrl::STG::Actors {lvalue},class Game::Util::STG::Hit::Circle<long>)
     |  
     |  detectMyShotHit(...)
     |      detectMyShotHit( (STGActors)arg1, (HitCircleI)arg2) -> STGMyShot :
     |      
     |          C++ signature :
     |              class boost::shared_ptr<class Game::Mdl::STG::MyShot::IMyShot> detectMyShotHit(class Defs::Ctrl::STG::Actors {lvalue},class Game::Util::STG::Hit::Circle<long>)
     |      
     |      detectMyShotHit( (STGActors)arg1, (HitRectI)arg2) -> STGMyShot :
     |      
     |          C++ signature :
     |              class boost::shared_ptr<class Game::Mdl::STG::MyShot::IMyShot> detectMyShotHit(class Defs::Ctrl::STG::Actors {lvalue},class Game::Util::STG::Hit::Rect<long>)
     |  
     |  getActorRange(...)
     |      getActorRange( (object)arg1) -> object :
     |      
     |          C++ signature :
     |              struct boost::python::objects::iterator_range<struct boost::python::return_value_policy<struct boost::python::return_by_value,struct boost::python::default_call_policies>,class std::_List_iterator<class std::_List_val<class boost::shared_ptr<class Game::Mdl::STG::Actor::IActor>,class boost::fast_pool_allocator<class boost::shared_ptr<class Game::Mdl::STG::Actor::IActor>,struct boost::default_user_allocator_new_delete,class boost::mutex,32,0> > > > getActorRange(struct boost::python::back_reference<class Defs::Ctrl::STG::Actors & __ptr64>)
     |  
     |  getBulletRange(...)
     |      getBulletRange( (object)arg1) -> object :
     |      
     |          C++ signature :
     |              struct boost::python::objects::iterator_range<struct boost::python::return_value_policy<struct boost::python::return_by_value,struct boost::python::default_call_policies>,class std::_List_iterator<class std::_List_val<class boost::shared_ptr<class Game::Mdl::STG::Bullet::IBullet>,class boost::fast_pool_allocator<class boost::shared_ptr<class Game::Mdl::STG::Bullet::IBullet>,struct boost::default_user_allocator_new_delete,class boost::mutex,32,0> > > > getBulletRange(struct boost::python::back_reference<class Defs::Ctrl::STG::Actors & __ptr64>)
     |  
     |  getEnemyRange(...)
     |      getEnemyRange( (object)arg1) -> object :
     |      
     |          C++ signature :
     |              struct boost::python::objects::iterator_range<struct boost::python::return_value_policy<struct boost::python::return_by_value,struct boost::python::default_call_policies>,class std::_List_iterator<class std::_List_val<class boost::shared_ptr<class Game::Mdl::STG::Enemy::IEnemy>,class boost::fast_pool_allocator<class boost::shared_ptr<class Game::Mdl::STG::Enemy::IEnemy>,struct boost::default_user_allocator_new_delete,class boost::mutex,32,0> > > > getEnemyRange(struct boost::python::back_reference<class Defs::Ctrl::STG::Actors & __ptr64>)
     |  
     |  getItemRange(...)
     |      getItemRange( (object)arg1) -> object :
     |      
     |          C++ signature :
     |              struct boost::python::objects::iterator_range<struct boost::python::return_value_policy<struct boost::python::return_by_value,struct boost::python::default_call_policies>,class std::_List_iterator<class std::_List_val<class boost::shared_ptr<class Game::Mdl::STG::Item::IItem>,class boost::fast_pool_allocator<class boost::shared_ptr<class Game::Mdl::STG::Item::IItem>,struct boost::default_user_allocator_new_delete,class boost::mutex,32,0> > > > getItemRange(struct boost::python::back_reference<class Defs::Ctrl::STG::Actors & __ptr64>)
     |  
     |  getMyShip(...)
     |      getMyShip( (STGActors)arg1) -> STGMyShip :
     |      
     |          C++ signature :
     |              class boost::shared_ptr<class Game::Mdl::STG::MyShip::IMyShip> getMyShip(class Defs::Ctrl::STG::Actors {lvalue})
     |  
     |  getMyShotRange(...)
     |      getMyShotRange( (object)arg1) -> object :
     |      
     |          C++ signature :
     |              struct boost::python::objects::iterator_range<struct boost::python::return_value_policy<struct boost::python::return_by_value,struct boost::python::default_call_policies>,class std::_List_iterator<class std::_List_val<class boost::shared_ptr<class Game::Mdl::STG::MyShot::IMyShot>,class boost::fast_pool_allocator<class boost::shared_ptr<class Game::Mdl::STG::MyShot::IMyShot>,struct boost::default_user_allocator_new_delete,class boost::mutex,32,0> > > > getMyShotRange(struct boost::python::back_reference<class Defs::Ctrl::STG::Actors & __ptr64>)
     |  
     |  registerActor(...)
     |      registerActor( (STGActors)arg1, (object)arg2) -> None :
     |      
     |          C++ signature :
     |              void registerActor(class Defs::Ctrl::STG::Actors {lvalue},class boost::python::api::object)
     |      
     |      registerActor( (STGActors)arg1, (STGActor)arg2) -> None :
     |      
     |          C++ signature :
     |              void registerActor(class Defs::Ctrl::STG::Actors {lvalue},class boost::shared_ptr<class Game::Mdl::STG::Actor::IActor>)
     |  
     |  registerBullet(...)
     |      registerBullet( (STGActors)arg1, (object)arg2) -> None :
     |      
     |          C++ signature :
     |              void registerBullet(class Defs::Ctrl::STG::Actors {lvalue},class boost::python::api::object)
     |      
     |      registerBullet( (STGActors)arg1, (STGBullet)arg2) -> None :
     |      
     |          C++ signature :
     |              void registerBullet(class Defs::Ctrl::STG::Actors {lvalue},class boost::shared_ptr<class Game::Mdl::STG::Bullet::IBullet>)
     |  
     |  registerEnemy(...)
     |      registerEnemy( (STGActors)arg1, (object)arg2) -> None :
     |      
     |          C++ signature :
     |              void registerEnemy(class Defs::Ctrl::STG::Actors {lvalue},class boost::python::api::object)
     |      
     |      registerEnemy( (STGActors)arg1, (STGEnemy)arg2) -> None :
     |      
     |          C++ signature :
     |              void registerEnemy(class Defs::Ctrl::STG::Actors {lvalue},class boost::shared_ptr<class Game::Mdl::STG::Enemy::IEnemy>)
     |  
     |  registerItem(...)
     |      registerItem( (STGActors)arg1, (object)arg2) -> None :
     |      
     |          C++ signature :
     |              void registerItem(class Defs::Ctrl::STG::Actors {lvalue},class boost::python::api::object)
     |      
     |      registerItem( (STGActors)arg1, (STGItem)arg2) -> None :
     |      
     |          C++ signature :
     |              void registerItem(class Defs::Ctrl::STG::Actors {lvalue},class boost::shared_ptr<class Game::Mdl::STG::Item::IItem>)
     |  
     |  registerMyShot(...)
     |      registerMyShot( (STGActors)arg1, (object)arg2) -> None :
     |      
     |          C++ signature :
     |              void registerMyShot(class Defs::Ctrl::STG::Actors {lvalue},class boost::python::api::object)
     |      
     |      registerMyShot( (STGActors)arg1, (STGMyShot)arg2) -> None :
     |      
     |          C++ signature :
     |              void registerMyShot(class Defs::Ctrl::STG::Actors {lvalue},class boost::shared_ptr<class Game::Mdl::STG::MyShot::IMyShot>)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __init__ = <built-in function __init__>
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class STGAnimation(STGActorBase)
     |  Method resolution order:
     |      STGAnimation
     |      STGActorBase
     |      STGActor
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      __init__( (object)arg1, (HitRectI)arg2, (SpriteAnimationManager)arg3) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class Game::Util::STG::Hit::Rect<long>,class Defs::Util::Sprite::Animation::Manager)
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  applyExternalForce(...)
     |      applyExternalForce( (STGAnimation)arg1, (Vector2DF)arg2) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExternalForce(class Defs::Mdl::STG::Actor::Animation {lvalue},class Game::Util::STG::Vector2D<float>)
     |  
     |  getAnimationManager(...)
     |      getAnimationManager( (STGAnimation)arg1) -> SpriteAnimationManager :
     |      
     |          C++ signature :
     |              class Defs::Util::Sprite::Animation::Manager {lvalue} getAnimationManager(class Defs::Mdl::STG::Actor::Animation {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  locator
     |  
     |  position
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 32
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from STGActorBase:
     |  
     |  draw(...)
     |      draw( (STGActorBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void draw(class Defs::Mdl::STG::Actor::Base {lvalue})
     |  
     |  erase(...)
     |      erase( (STGActorBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void erase(class Defs::Mdl::STG::Actor::Base {lvalue})
     |  
     |  setValidAreaMargin(...)
     |      setValidAreaMargin( (STGActorBase)arg1, (int)arg2) -> None :
     |      
     |          C++ signature :
     |              void setValidAreaMargin(class Defs::Mdl::STG::Actor::Base {lvalue},int)
     |  
     |  update(...)
     |      update( (STGActorBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void update(class Defs::Mdl::STG::Actor::Base {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from STGActorBase:
     |  
     |  frameCount
     |  
     |  objectId
     |  
     |  valid
     |  
     |  validFrameNum
     |  
     |  validRect
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class STGAuxs(Boost.Python.instance)
     |  Method resolution order:
     |      STGAuxs
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      __init__( (object)arg1) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64)
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  affectMyShotsByPA(...)
     |      affectMyShotsByPA( (STGAuxs)arg1, (HitCircleI)arg2, (float)arg3, (float)arg4, (float)arg5, (float)arg6, (object)arg7) -> float :
     |      
     |          C++ signature :
     |              float affectMyShotsByPA(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Hit::Circle<long>,float,float,float,float,class boost::python::api::object)
     |  
     |  applyDamageAndGetEnemy(...)
     |      applyDamageAndGetEnemy( (STGAuxs)arg1, (HitRectI)arg2, (float)arg3) -> STGEnemy :
     |      
     |          C++ signature :
     |              class boost::shared_ptr<class Game::Mdl::STG::Enemy::IEnemy> applyDamageAndGetEnemy(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Hit::Rect<long>,float)
     |  
     |  applyDamageToBullets(...)
     |      applyDamageToBullets( (STGAuxs)arg1, (float)arg2) -> float :
     |      
     |          C++ signature :
     |              float applyDamageToBullets(class Defs::Mdl::STG::Auxs {lvalue},float)
     |      
     |      applyDamageToBullets( (STGAuxs)arg1, (float)arg2, (Vector2DF)arg3, (float)arg4, (float)arg5) -> float :
     |      
     |          C++ signature :
     |              float applyDamageToBullets(class Defs::Mdl::STG::Auxs {lvalue},float,class Game::Util::STG::Vector2D<float>,float,float)
     |      
     |      applyDamageToBullets( (STGAuxs)arg1, (HitCircleI)arg2, (float)arg3) -> float :
     |      
     |          C++ signature :
     |              float applyDamageToBullets(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Hit::Circle<long>,float)
     |      
     |      applyDamageToBullets( (STGAuxs)arg1, (HitCircleI)arg2, (float)arg3, (float)arg4, (float)arg5) -> float :
     |      
     |          C++ signature :
     |              float applyDamageToBullets(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Hit::Circle<long>,float,float,float)
     |      
     |      applyDamageToBullets( (STGAuxs)arg1, (HitRectI)arg2, (float)arg3) -> float :
     |      
     |          C++ signature :
     |              float applyDamageToBullets(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Hit::Rect<long>,float)
     |      
     |      applyDamageToBullets( (STGAuxs)arg1, (HitRectI)arg2, (float)arg3, (float)arg4, (float)arg5) -> float :
     |      
     |          C++ signature :
     |              float applyDamageToBullets(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Hit::Rect<long>,float,float,float)
     |  
     |  applyDamageToEnemies(...)
     |      applyDamageToEnemies( (STGAuxs)arg1, (float)arg2) -> float :
     |      
     |          C++ signature :
     |              float applyDamageToEnemies(class Defs::Mdl::STG::Auxs {lvalue},float)
     |      
     |      applyDamageToEnemies( (STGAuxs)arg1, (float)arg2, (Vector2DF)arg3, (float)arg4, (float)arg5) -> float :
     |      
     |          C++ signature :
     |              float applyDamageToEnemies(class Defs::Mdl::STG::Auxs {lvalue},float,class Game::Util::STG::Vector2D<float>,float,float)
     |      
     |      applyDamageToEnemies( (STGAuxs)arg1, (HitRectI)arg2, (float)arg3) -> float :
     |      
     |          C++ signature :
     |              float applyDamageToEnemies(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Hit::Rect<long>,float)
     |      
     |      applyDamageToEnemies( (STGAuxs)arg1, (HitRectI)arg2, (float)arg3, (float)arg4, (float)arg5) -> float :
     |      
     |          C++ signature :
     |              float applyDamageToEnemies(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Hit::Rect<long>,float,float,float)
     |  
     |  applyDamageToMyShots(...)
     |      applyDamageToMyShots( (STGAuxs)arg1, (float)arg2) -> float :
     |      
     |          C++ signature :
     |              float applyDamageToMyShots(class Defs::Mdl::STG::Auxs {lvalue},float)
     |      
     |      applyDamageToMyShots( (STGAuxs)arg1, (float)arg2, (Vector2DF)arg3, (float)arg4, (float)arg5) -> float :
     |      
     |          C++ signature :
     |              float applyDamageToMyShots(class Defs::Mdl::STG::Auxs {lvalue},float,class Game::Util::STG::Vector2D<float>,float,float)
     |      
     |      applyDamageToMyShots( (STGAuxs)arg1, (HitCircleI)arg2, (float)arg3) -> float :
     |      
     |          C++ signature :
     |              float applyDamageToMyShots(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Hit::Circle<long>,float)
     |      
     |      applyDamageToMyShots( (STGAuxs)arg1, (HitCircleI)arg2, (float)arg3, (float)arg4, (float)arg5) -> float :
     |      
     |          C++ signature :
     |              float applyDamageToMyShots(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Hit::Circle<long>,float,float,float)
     |      
     |      applyDamageToMyShots( (STGAuxs)arg1, (HitRectI)arg2, (float)arg3) -> float :
     |      
     |          C++ signature :
     |              float applyDamageToMyShots(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Hit::Rect<long>,float)
     |      
     |      applyDamageToMyShots( (STGAuxs)arg1, (HitRectI)arg2, (float)arg3, (float)arg4, (float)arg5) -> float :
     |      
     |          C++ signature :
     |              float applyDamageToMyShots(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Hit::Rect<long>,float,float,float)
     |  
     |  applyExForceToActors(...)
     |      applyExForceToActors( (STGAuxs)arg1, (Vector2DF)arg2) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExForceToActors(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Vector2D<float>)
     |      
     |      applyExForceToActors( (STGAuxs)arg1, (Vector2DF)arg2, (Vector2DF)arg3, (float)arg4, (float)arg5) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExForceToActors(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Vector2D<float>,class Game::Util::STG::Vector2D<float>,float,float)
     |  
     |  applyExForceToBullets(...)
     |      applyExForceToBullets( (STGAuxs)arg1, (Vector2DF)arg2) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExForceToBullets(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Vector2D<float>)
     |      
     |      applyExForceToBullets( (STGAuxs)arg1, (Vector2DF)arg2, (Vector2DF)arg3, (float)arg4, (float)arg5) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExForceToBullets(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Vector2D<float>,class Game::Util::STG::Vector2D<float>,float,float)
     |      
     |      applyExForceToBullets( (STGAuxs)arg1, (HitCircleI)arg2, (Vector2DF)arg3) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExForceToBullets(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Hit::Circle<long>,class Game::Util::STG::Vector2D<float>)
     |      
     |      applyExForceToBullets( (STGAuxs)arg1, (HitCircleI)arg2, (Vector2DF)arg3, (float)arg4, (float)arg5) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExForceToBullets(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Hit::Circle<long>,class Game::Util::STG::Vector2D<float>,float,float)
     |      
     |      applyExForceToBullets( (STGAuxs)arg1, (HitRectI)arg2, (Vector2DF)arg3) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExForceToBullets(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Hit::Rect<long>,class Game::Util::STG::Vector2D<float>)
     |      
     |      applyExForceToBullets( (STGAuxs)arg1, (HitRectI)arg2, (Vector2DF)arg3, (float)arg4, (float)arg5) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExForceToBullets(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Hit::Rect<long>,class Game::Util::STG::Vector2D<float>,float,float)
     |  
     |  applyExForceToEnemies(...)
     |      applyExForceToEnemies( (STGAuxs)arg1, (Vector2DF)arg2) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExForceToEnemies(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Vector2D<float>)
     |      
     |      applyExForceToEnemies( (STGAuxs)arg1, (Vector2DF)arg2, (Vector2DF)arg3, (float)arg4, (float)arg5) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExForceToEnemies(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Vector2D<float>,class Game::Util::STG::Vector2D<float>,float,float)
     |      
     |      applyExForceToEnemies( (STGAuxs)arg1, (HitRectI)arg2, (Vector2DF)arg3) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExForceToEnemies(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Hit::Rect<long>,class Game::Util::STG::Vector2D<float>)
     |      
     |      applyExForceToEnemies( (STGAuxs)arg1, (HitRectI)arg2, (Vector2DF)arg3, (float)arg4, (float)arg5) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExForceToEnemies(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Hit::Rect<long>,class Game::Util::STG::Vector2D<float>,float,float)
     |  
     |  applyExForceToItems(...)
     |      applyExForceToItems( (STGAuxs)arg1, (Vector2DF)arg2) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExForceToItems(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Vector2D<float>)
     |      
     |      applyExForceToItems( (STGAuxs)arg1, (Vector2DF)arg2, (Vector2DF)arg3, (float)arg4, (float)arg5) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExForceToItems(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Vector2D<float>,class Game::Util::STG::Vector2D<float>,float,float)
     |      
     |      applyExForceToItems( (STGAuxs)arg1, (HitCircleI)arg2, (Vector2DF)arg3) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExForceToItems(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Hit::Circle<long>,class Game::Util::STG::Vector2D<float>)
     |      
     |      applyExForceToItems( (STGAuxs)arg1, (HitCircleI)arg2, (Vector2DF)arg3, (float)arg4, (float)arg5) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExForceToItems(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Hit::Circle<long>,class Game::Util::STG::Vector2D<float>,float,float)
     |  
     |  applyExForceToMyShots(...)
     |      applyExForceToMyShots( (STGAuxs)arg1, (Vector2DF)arg2) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExForceToMyShots(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Vector2D<float>)
     |      
     |      applyExForceToMyShots( (STGAuxs)arg1, (Vector2DF)arg2, (Vector2DF)arg3, (float)arg4, (float)arg5) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExForceToMyShots(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Vector2D<float>,class Game::Util::STG::Vector2D<float>,float,float)
     |      
     |      applyExForceToMyShots( (STGAuxs)arg1, (HitCircleI)arg2, (Vector2DF)arg3) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExForceToMyShots(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Hit::Circle<long>,class Game::Util::STG::Vector2D<float>)
     |      
     |      applyExForceToMyShots( (STGAuxs)arg1, (HitCircleI)arg2, (Vector2DF)arg3, (float)arg4, (float)arg5) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExForceToMyShots(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Hit::Circle<long>,class Game::Util::STG::Vector2D<float>,float,float)
     |      
     |      applyExForceToMyShots( (STGAuxs)arg1, (HitRectI)arg2, (Vector2DF)arg3) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExForceToMyShots(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Hit::Rect<long>,class Game::Util::STG::Vector2D<float>)
     |      
     |      applyExForceToMyShots( (STGAuxs)arg1, (HitRectI)arg2, (Vector2DF)arg3, (float)arg4, (float)arg5) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExForceToMyShots(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Hit::Rect<long>,class Game::Util::STG::Vector2D<float>,float,float)
     |  
     |  applyExRadialForceToActors(...)
     |      applyExRadialForceToActors( (STGAuxs)arg1, (float)arg2, (Vector2DF)arg3) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExRadialForceToActors(class Defs::Mdl::STG::Auxs {lvalue},float,class Game::Util::STG::Vector2D<float>)
     |      
     |      applyExRadialForceToActors( (STGAuxs)arg1, (float)arg2, (Vector2DF)arg3, (float)arg4, (float)arg5) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExRadialForceToActors(class Defs::Mdl::STG::Auxs {lvalue},float,class Game::Util::STG::Vector2D<float>,float,float)
     |  
     |  applyExRadialForceToBullets(...)
     |      applyExRadialForceToBullets( (STGAuxs)arg1, (float)arg2, (Vector2DF)arg3) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExRadialForceToBullets(class Defs::Mdl::STG::Auxs {lvalue},float,class Game::Util::STG::Vector2D<float>)
     |      
     |      applyExRadialForceToBullets( (STGAuxs)arg1, (float)arg2, (Vector2DF)arg3, (float)arg4, (float)arg5) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExRadialForceToBullets(class Defs::Mdl::STG::Auxs {lvalue},float,class Game::Util::STG::Vector2D<float>,float,float)
     |      
     |      applyExRadialForceToBullets( (STGAuxs)arg1, (HitCircleI)arg2, (float)arg3) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExRadialForceToBullets(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Hit::Circle<long>,float)
     |      
     |      applyExRadialForceToBullets( (STGAuxs)arg1, (HitCircleI)arg2, (float)arg3, (float)arg4, (float)arg5) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExRadialForceToBullets(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Hit::Circle<long>,float,float,float)
     |  
     |  applyExRadialForceToEnemies(...)
     |      applyExRadialForceToEnemies( (STGAuxs)arg1, (float)arg2, (Vector2DF)arg3) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExRadialForceToEnemies(class Defs::Mdl::STG::Auxs {lvalue},float,class Game::Util::STG::Vector2D<float>)
     |      
     |      applyExRadialForceToEnemies( (STGAuxs)arg1, (float)arg2, (Vector2DF)arg3, (float)arg4, (float)arg5) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExRadialForceToEnemies(class Defs::Mdl::STG::Auxs {lvalue},float,class Game::Util::STG::Vector2D<float>,float,float)
     |  
     |  applyExRadialForceToItems(...)
     |      applyExRadialForceToItems( (STGAuxs)arg1, (float)arg2, (Vector2DF)arg3) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExRadialForceToItems(class Defs::Mdl::STG::Auxs {lvalue},float,class Game::Util::STG::Vector2D<float>)
     |      
     |      applyExRadialForceToItems( (STGAuxs)arg1, (float)arg2, (Vector2DF)arg3, (float)arg4, (float)arg5) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExRadialForceToItems(class Defs::Mdl::STG::Auxs {lvalue},float,class Game::Util::STG::Vector2D<float>,float,float)
     |      
     |      applyExRadialForceToItems( (STGAuxs)arg1, (HitCircleI)arg2, (float)arg3) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExRadialForceToItems(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Hit::Circle<long>,float)
     |      
     |      applyExRadialForceToItems( (STGAuxs)arg1, (HitCircleI)arg2, (float)arg3, (float)arg4, (float)arg5) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExRadialForceToItems(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Hit::Circle<long>,float,float,float)
     |  
     |  applyExRadialForceToMyShip(...)
     |      applyExRadialForceToMyShip( (STGAuxs)arg1, (float)arg2, (Vector2DF)arg3) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExRadialForceToMyShip(class Defs::Mdl::STG::Auxs {lvalue},float,class Game::Util::STG::Vector2D<float>)
     |      
     |      applyExRadialForceToMyShip( (STGAuxs)arg1, (float)arg2, (Vector2DF)arg3, (float)arg4, (float)arg5) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExRadialForceToMyShip(class Defs::Mdl::STG::Auxs {lvalue},float,class Game::Util::STG::Vector2D<float>,float,float)
     |      
     |      applyExRadialForceToMyShip( (STGAuxs)arg1, (HitCircleI)arg2, (float)arg3) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExRadialForceToMyShip(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Hit::Circle<long>,float)
     |      
     |      applyExRadialForceToMyShip( (STGAuxs)arg1, (HitCircleI)arg2, (float)arg3, (float)arg4, (float)arg5) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExRadialForceToMyShip(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Hit::Circle<long>,float,float,float)
     |  
     |  applyExRadialForceToMyShots(...)
     |      applyExRadialForceToMyShots( (STGAuxs)arg1, (float)arg2, (Vector2DF)arg3) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExRadialForceToMyShots(class Defs::Mdl::STG::Auxs {lvalue},float,class Game::Util::STG::Vector2D<float>)
     |      
     |      applyExRadialForceToMyShots( (STGAuxs)arg1, (float)arg2, (Vector2DF)arg3, (float)arg4, (float)arg5) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExRadialForceToMyShots(class Defs::Mdl::STG::Auxs {lvalue},float,class Game::Util::STG::Vector2D<float>,float,float)
     |      
     |      applyExRadialForceToMyShots( (STGAuxs)arg1, (HitCircleI)arg2, (float)arg3) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExRadialForceToMyShots(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Hit::Circle<long>,float)
     |      
     |      applyExRadialForceToMyShots( (STGAuxs)arg1, (HitCircleI)arg2, (float)arg3, (float)arg4, (float)arg5) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExRadialForceToMyShots(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Hit::Circle<long>,float,float,float)
     |  
     |  createExplosion(...)
     |      createExplosion( (STGAuxs)arg1, (Vector2DF)arg2) -> STGAnimation :
     |      
     |          C++ signature :
     |              class boost::shared_ptr<class Defs::Mdl::STG::Actor::Animation> createExplosion(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Vector2D<float>)
     |      
     |      createExplosion( (STGAuxs)arg1, (Vector2DF)arg2, (Vector2DF)arg3) -> STGAnimation :
     |      
     |          C++ signature :
     |              class boost::shared_ptr<class Defs::Mdl::STG::Actor::Animation> createExplosion(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Vector2D<float>,class Game::Util::STG::Vector2D<float>)
     |      
     |      createExplosion( (STGAuxs)arg1, (Vector2DF)arg2, (Vector2DF)arg3, (float)arg4) -> STGAnimation :
     |      
     |          C++ signature :
     |              class boost::shared_ptr<class Defs::Mdl::STG::Actor::Animation> createExplosion(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Vector2D<float>,class Game::Util::STG::Vector2D<float>,float)
     |  
     |  createExplosion2(...)
     |      createExplosion2( (STGAuxs)arg1, (Vector2DF)arg2, (Vector2DF)arg3, (float)arg4) -> STGAnimation :
     |      
     |          C++ signature :
     |              class boost::shared_ptr<class Defs::Mdl::STG::Actor::Animation> createExplosion2(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Vector2D<float>,class Game::Util::STG::Vector2D<float>,float)
     |      
     |      createExplosion2( (STGAuxs)arg1, (Vector2DF)arg2, (Vector2DF)arg3, (float)arg4, (int)arg5) -> STGAnimation :
     |      
     |          C++ signature :
     |              class boost::shared_ptr<class Defs::Mdl::STG::Actor::Animation> createExplosion2(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Vector2D<float>,class Game::Util::STG::Vector2D<float>,float,long)
     |  
     |  createFadeOut(...)
     |      createFadeOut( (STGAuxs)arg1, (SpriteDrawParam)arg2) -> STGFadeOut :
     |      
     |          C++ signature :
     |              class boost::shared_ptr<class Defs::Mdl::STG::Actor::FadeOut> createFadeOut(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::Sprite::DrawParameter)
     |      
     |      createFadeOut( (STGAuxs)arg1, (SpriteDrawParam)arg2, (int)arg3) -> STGFadeOut :
     |      
     |          C++ signature :
     |              class boost::shared_ptr<class Defs::Mdl::STG::Actor::FadeOut> createFadeOut(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::Sprite::DrawParameter,unsigned int)
     |  
     |  createParticle(...)
     |      createParticle( (STGAuxs)arg1, (SpriteDrawParam)arg2) -> None :
     |      
     |          C++ signature :
     |              void createParticle(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::Sprite::DrawParameter)
     |      
     |      createParticle( (STGAuxs)arg1, (SpriteDrawParam)arg2, (int)arg3) -> None :
     |      
     |          C++ signature :
     |              void createParticle(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::Sprite::DrawParameter,unsigned int)
     |  
     |  createSmoke(...)
     |      createSmoke( (STGAuxs)arg1, (Vector2DF)arg2, (Vector2DF)arg3, (float)arg4, (int)arg5, (float)arg6) -> STGAnimation :
     |      
     |          C++ signature :
     |              class boost::shared_ptr<class Defs::Mdl::STG::Actor::Animation> createSmoke(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Vector2D<float>,class Game::Util::STG::Vector2D<float>,float,long,float)
     |  
     |  destructBullets(...)
     |      destructBullets( (STGAuxs)arg1) -> int :
     |      
     |          C++ signature :
     |              unsigned int destructBullets(class Defs::Mdl::STG::Auxs {lvalue})
     |      
     |      destructBullets( (STGAuxs)arg1, (HitCircleI)arg2) -> int :
     |      
     |          C++ signature :
     |              unsigned int destructBullets(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Hit::Circle<long>)
     |      
     |      destructBullets( (STGAuxs)arg1, (HitRectI)arg2) -> int :
     |      
     |          C++ signature :
     |              unsigned int destructBullets(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Hit::Rect<long>)
     |  
     |  destructEnemies(...)
     |      destructEnemies( (STGAuxs)arg1) -> int :
     |      
     |          C++ signature :
     |              unsigned int destructEnemies(class Defs::Mdl::STG::Auxs {lvalue})
     |      
     |      destructEnemies( (STGAuxs)arg1, (HitRectI)arg2) -> int :
     |      
     |          C++ signature :
     |              unsigned int destructEnemies(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Hit::Rect<long>)
     |  
     |  destructMyShots(...)
     |      destructMyShots( (STGAuxs)arg1) -> int :
     |      
     |          C++ signature :
     |              unsigned int destructMyShots(class Defs::Mdl::STG::Auxs {lvalue})
     |      
     |      destructMyShots( (STGAuxs)arg1, (HitCircleI)arg2) -> int :
     |      
     |          C++ signature :
     |              unsigned int destructMyShots(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Hit::Circle<long>)
     |      
     |      destructMyShots( (STGAuxs)arg1, (HitRectI)arg2) -> int :
     |      
     |          C++ signature :
     |              unsigned int destructMyShots(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Hit::Rect<long>)
     |  
     |  eraseActors(...)
     |      eraseActors( (STGAuxs)arg1) -> int :
     |      
     |          C++ signature :
     |              unsigned int eraseActors(class Defs::Mdl::STG::Auxs {lvalue})
     |  
     |  eraseBullets(...)
     |      eraseBullets( (STGAuxs)arg1) -> int :
     |      
     |          C++ signature :
     |              unsigned int eraseBullets(class Defs::Mdl::STG::Auxs {lvalue})
     |      
     |      eraseBullets( (STGAuxs)arg1, (HitCircleI)arg2) -> int :
     |      
     |          C++ signature :
     |              unsigned int eraseBullets(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Hit::Circle<long>)
     |      
     |      eraseBullets( (STGAuxs)arg1, (HitRectI)arg2) -> int :
     |      
     |          C++ signature :
     |              unsigned int eraseBullets(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Hit::Rect<long>)
     |  
     |  eraseEnemies(...)
     |      eraseEnemies( (STGAuxs)arg1) -> int :
     |      
     |          C++ signature :
     |              unsigned int eraseEnemies(class Defs::Mdl::STG::Auxs {lvalue})
     |      
     |      eraseEnemies( (STGAuxs)arg1, (HitRectI)arg2) -> int :
     |      
     |          C++ signature :
     |              unsigned int eraseEnemies(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Hit::Rect<long>)
     |  
     |  eraseItems(...)
     |      eraseItems( (STGAuxs)arg1) -> int :
     |      
     |          C++ signature :
     |              unsigned int eraseItems(class Defs::Mdl::STG::Auxs {lvalue})
     |      
     |      eraseItems( (STGAuxs)arg1, (HitCircleI)arg2) -> int :
     |      
     |          C++ signature :
     |              unsigned int eraseItems(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Hit::Circle<long>)
     |  
     |  eraseMyShots(...)
     |      eraseMyShots( (STGAuxs)arg1) -> int :
     |      
     |          C++ signature :
     |              unsigned int eraseMyShots(class Defs::Mdl::STG::Auxs {lvalue})
     |      
     |      eraseMyShots( (STGAuxs)arg1, (HitCircleI)arg2) -> int :
     |      
     |          C++ signature :
     |              unsigned int eraseMyShots(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Hit::Circle<long>)
     |      
     |      eraseMyShots( (STGAuxs)arg1, (HitRectI)arg2) -> int :
     |      
     |          C++ signature :
     |              unsigned int eraseMyShots(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Hit::Rect<long>)
     |  
     |  getBulletBlueDrawParam(...)
     |      getBulletBlueDrawParam( (STGAuxs)arg1, (Vector2DF)arg2, (Vector2DF)arg3) -> SpriteDrawParam :
     |      
     |          C++ signature :
     |              class Game::Util::Sprite::DrawParameter getBulletBlueDrawParam(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Vector2D<float>,class Game::Util::STG::Vector2D<float>)
     |  
     |  getBulletGreenDrawParam(...)
     |      getBulletGreenDrawParam( (STGAuxs)arg1, (Vector2DF)arg2, (Vector2DF)arg3) -> SpriteDrawParam :
     |      
     |          C++ signature :
     |              class Game::Util::Sprite::DrawParameter getBulletGreenDrawParam(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Vector2D<float>,class Game::Util::STG::Vector2D<float>)
     |  
     |  getBulletPurpleDrawParam(...)
     |      getBulletPurpleDrawParam( (STGAuxs)arg1, (Vector2DF)arg2, (Vector2DF)arg3) -> SpriteDrawParam :
     |      
     |          C++ signature :
     |              class Game::Util::Sprite::DrawParameter getBulletPurpleDrawParam(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Vector2D<float>,class Game::Util::STG::Vector2D<float>)
     |  
     |  getBulletRedDrawParam(...)
     |      getBulletRedDrawParam( (STGAuxs)arg1, (Vector2DF)arg2, (Vector2DF)arg3) -> SpriteDrawParam :
     |      
     |          C++ signature :
     |              class Game::Util::Sprite::DrawParameter getBulletRedDrawParam(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Vector2D<float>,class Game::Util::STG::Vector2D<float>)
     |  
     |  getBulletWhiteDrawParam(...)
     |      getBulletWhiteDrawParam( (STGAuxs)arg1, (Vector2DF)arg2, (Vector2DF)arg3) -> SpriteDrawParam :
     |      
     |          C++ signature :
     |              class Game::Util::Sprite::DrawParameter getBulletWhiteDrawParam(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Vector2D<float>,class Game::Util::STG::Vector2D<float>)
     |  
     |  getMyShotsForcibleDamageForPA(...)
     |      getMyShotsForcibleDamageForPA( (STGAuxs)arg1, (HitCircleI)arg2) -> float :
     |      
     |          C++ signature :
     |              float getMyShotsForcibleDamageForPA(class Defs::Mdl::STG::Auxs {lvalue},class Game::Util::STG::Hit::Circle<long>)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 24
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class STGBullet(STGActor)
     |  Method resolution order:
     |      STGBullet
     |      STGActor
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  applyDamage(...)
     |      applyDamage( (STGBullet)arg1, (float)arg2) -> None :
     |      
     |          C++ signature :
     |              void applyDamage(class Game::Mdl::STG::Bullet::IBullet {lvalue},float)
     |  
     |  destruct(...)
     |      destruct( (STGBullet)arg1) -> None :
     |      
     |          C++ signature :
     |              void destruct(class Game::Mdl::STG::Bullet::IBullet {lvalue})
     |  
     |  isHitCircle(...)
     |      isHitCircle( (STGBullet)arg1, (HitCircleI)arg2) -> bool :
     |      
     |          C++ signature :
     |              bool isHitCircle(class Game::Mdl::STG::Bullet::IBullet {lvalue},class Game::Util::STG::Hit::Circle<long>)
     |  
     |  isHitRect(...)
     |      isHitRect( (STGBullet)arg1, (HitRectI)arg2) -> bool :
     |      
     |          C++ signature :
     |              bool isHitRect(class Game::Mdl::STG::Bullet::IBullet {lvalue},class Game::Util::STG::Hit::Rect<long>)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  hitRadius
     |  
     |  hp
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __init__ = <built-in function __init__>
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from STGActor:
     |  
     |  applyExternalForce(...)
     |      applyExternalForce( (STGActor)arg1, (Vector2DF)arg2) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExternalForce(class Game::Mdl::STG::Actor::IActor {lvalue},class Game::Util::STG::Vector2D<float>)
     |  
     |  erase(...)
     |      erase( (STGActor)arg1) -> None :
     |      
     |          C++ signature :
     |              void erase(class Game::Mdl::STG::Actor::IActor {lvalue})
     |  
     |  setValidAreaMargin(...)
     |      setValidAreaMargin( (STGActor)arg1, (int)arg2) -> None :
     |      
     |          C++ signature :
     |              void setValidAreaMargin(class Game::Mdl::STG::Actor::IActor {lvalue},int)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from STGActor:
     |  
     |  frameCount
     |  
     |  objectId
     |  
     |  position
     |  
     |  valid
     |  
     |  validFrameNum
     |  
     |  validRect
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class STGBulletBase(STGActorBase, STGBullet)
     |  Method resolution order:
     |      STGBulletBase
     |      STGActorBase
     |      STGBullet
     |      STGActor
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  applyDamage(...)
     |      applyDamage( (STGBulletBase)arg1, (float)arg2) -> None :
     |      
     |          C++ signature :
     |              void applyDamage(class Defs::Mdl::STG::Bullet::Base {lvalue},float)
     |  
     |  destruct(...)
     |      destruct( (STGBulletBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void destruct(class Defs::Mdl::STG::Bullet::Base {lvalue})
     |  
     |  isHitCircle(...)
     |      isHitCircle( (STGBulletBase)arg1, (HitCircleI)arg2) -> bool :
     |      
     |          C++ signature :
     |              bool isHitCircle(class Defs::Mdl::STG::Bullet::Base {lvalue},class Game::Util::STG::Hit::Circle<long>)
     |  
     |  isHitRect(...)
     |      isHitRect( (STGBulletBase)arg1, (HitRectI)arg2) -> bool :
     |      
     |          C++ signature :
     |              bool isHitRect(class Defs::Mdl::STG::Bullet::Base {lvalue},class Game::Util::STG::Hit::Rect<long>)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  hitRadius
     |  
     |  hp
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __init__ = <built-in function __init__>
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from STGActorBase:
     |  
     |  draw(...)
     |      draw( (STGActorBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void draw(class Defs::Mdl::STG::Actor::Base {lvalue})
     |  
     |  erase(...)
     |      erase( (STGActorBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void erase(class Defs::Mdl::STG::Actor::Base {lvalue})
     |  
     |  setValidAreaMargin(...)
     |      setValidAreaMargin( (STGActorBase)arg1, (int)arg2) -> None :
     |      
     |          C++ signature :
     |              void setValidAreaMargin(class Defs::Mdl::STG::Actor::Base {lvalue},int)
     |  
     |  update(...)
     |      update( (STGActorBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void update(class Defs::Mdl::STG::Actor::Base {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from STGActorBase:
     |  
     |  frameCount
     |  
     |  objectId
     |  
     |  valid
     |  
     |  validFrameNum
     |  
     |  validRect
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from STGActor:
     |  
     |  applyExternalForce(...)
     |      applyExternalForce( (STGActor)arg1, (Vector2DF)arg2) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExternalForce(class Game::Mdl::STG::Actor::IActor {lvalue},class Game::Util::STG::Vector2D<float>)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from STGActor:
     |  
     |  position
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class STGBulletLinear(STGBulletBase)
     |  Method resolution order:
     |      STGBulletLinear
     |      STGBulletBase
     |      STGActorBase
     |      STGBullet
     |      STGActor
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      __init__( (object)arg1, (LocatorLinearF)arg2, (int)arg3, (SpriteDrawParam)arg4) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class Game::Util::STG::Locator::Linear<float>,int,class Game::Util::Sprite::DrawParameter)
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  applyExternalForce(...)
     |      applyExternalForce( (STGBulletLinear)arg1, (Vector2DF)arg2) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExternalForce(class Defs::Mdl::STG::Bullet::Simple<class Game::Util::STG::Locator::Linear<float> > {lvalue},class Game::Util::STG::Vector2D<float>)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  drawParameter
     |  
     |  locator
     |  
     |  position
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 32
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from STGBulletBase:
     |  
     |  applyDamage(...)
     |      applyDamage( (STGBulletBase)arg1, (float)arg2) -> None :
     |      
     |          C++ signature :
     |              void applyDamage(class Defs::Mdl::STG::Bullet::Base {lvalue},float)
     |  
     |  destruct(...)
     |      destruct( (STGBulletBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void destruct(class Defs::Mdl::STG::Bullet::Base {lvalue})
     |  
     |  isHitCircle(...)
     |      isHitCircle( (STGBulletBase)arg1, (HitCircleI)arg2) -> bool :
     |      
     |          C++ signature :
     |              bool isHitCircle(class Defs::Mdl::STG::Bullet::Base {lvalue},class Game::Util::STG::Hit::Circle<long>)
     |  
     |  isHitRect(...)
     |      isHitRect( (STGBulletBase)arg1, (HitRectI)arg2) -> bool :
     |      
     |          C++ signature :
     |              bool isHitRect(class Defs::Mdl::STG::Bullet::Base {lvalue},class Game::Util::STG::Hit::Rect<long>)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from STGBulletBase:
     |  
     |  hitRadius
     |  
     |  hp
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from STGActorBase:
     |  
     |  draw(...)
     |      draw( (STGActorBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void draw(class Defs::Mdl::STG::Actor::Base {lvalue})
     |  
     |  erase(...)
     |      erase( (STGActorBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void erase(class Defs::Mdl::STG::Actor::Base {lvalue})
     |  
     |  setValidAreaMargin(...)
     |      setValidAreaMargin( (STGActorBase)arg1, (int)arg2) -> None :
     |      
     |          C++ signature :
     |              void setValidAreaMargin(class Defs::Mdl::STG::Actor::Base {lvalue},int)
     |  
     |  update(...)
     |      update( (STGActorBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void update(class Defs::Mdl::STG::Actor::Base {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from STGActorBase:
     |  
     |  frameCount
     |  
     |  objectId
     |  
     |  valid
     |  
     |  validFrameNum
     |  
     |  validRect
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class STGBulletMLActor(STGBulletBase)
     |  Method resolution order:
     |      STGBulletMLActor
     |      STGBulletBase
     |      STGActorBase
     |      STGBullet
     |      STGActor
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      __init__( (object)arg1, (BulletMLParser)arg2, (Vector2DF)arg3) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class boost::shared_ptr<class BulletMLParser>,class Game::Util::STG::Vector2D<float>)
     |      
     |      __init__( (object)arg1, (BulletMLParser)arg2, (LocatorLinearF)arg3, (int)arg4, (SpriteDrawParam)arg5) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class boost::shared_ptr<class BulletMLParser>,class Game::Util::STG::Locator::Linear<float>,int,class Game::Util::Sprite::DrawParameter)
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  addCreateParam(...)
     |      addCreateParam( (STGBulletMLActor)arg1, (STGBulletMLCreateParam)arg2) -> None :
     |      
     |          C++ signature :
     |              void addCreateParam(class Defs::Mdl::STG::Bullet::BulletML::MLActor {lvalue},class Defs::Mdl::STG::Bullet::BulletML::CreateParam)
     |  
     |  applyExternalForce(...)
     |      applyExternalForce( (STGBulletMLActor)arg1, (Vector2DF)arg2) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExternalForce(class Defs::Mdl::STG::Bullet::BulletML::MLActor {lvalue},class Game::Util::STG::Vector2D<float>)
     |  
     |  createParamList(...)
     |      createParamList( (object)arg1) -> object :
     |      
     |          C++ signature :
     |              struct boost::python::objects::iterator_range<struct boost::python::return_value_policy<struct boost::python::return_by_value,struct boost::python::default_call_policies>,class std::_List_iterator<class std::_List_val<class Defs::Mdl::STG::Bullet::BulletML::CreateParam,class std::allocator<class Defs::Mdl::STG::Bullet::BulletML::CreateParam> > > > createParamList(struct boost::python::back_reference<class Defs::Mdl::STG::Bullet::BulletML::MLActor & __ptr64>)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  defaultRank
     |  
     |  drawParameter
     |  
     |  locator
     |  
     |  position
     |  
     |  rank
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 32
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from STGBulletBase:
     |  
     |  applyDamage(...)
     |      applyDamage( (STGBulletBase)arg1, (float)arg2) -> None :
     |      
     |          C++ signature :
     |              void applyDamage(class Defs::Mdl::STG::Bullet::Base {lvalue},float)
     |  
     |  destruct(...)
     |      destruct( (STGBulletBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void destruct(class Defs::Mdl::STG::Bullet::Base {lvalue})
     |  
     |  isHitCircle(...)
     |      isHitCircle( (STGBulletBase)arg1, (HitCircleI)arg2) -> bool :
     |      
     |          C++ signature :
     |              bool isHitCircle(class Defs::Mdl::STG::Bullet::Base {lvalue},class Game::Util::STG::Hit::Circle<long>)
     |  
     |  isHitRect(...)
     |      isHitRect( (STGBulletBase)arg1, (HitRectI)arg2) -> bool :
     |      
     |          C++ signature :
     |              bool isHitRect(class Defs::Mdl::STG::Bullet::Base {lvalue},class Game::Util::STG::Hit::Rect<long>)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from STGBulletBase:
     |  
     |  hitRadius
     |  
     |  hp
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from STGActorBase:
     |  
     |  draw(...)
     |      draw( (STGActorBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void draw(class Defs::Mdl::STG::Actor::Base {lvalue})
     |  
     |  erase(...)
     |      erase( (STGActorBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void erase(class Defs::Mdl::STG::Actor::Base {lvalue})
     |  
     |  setValidAreaMargin(...)
     |      setValidAreaMargin( (STGActorBase)arg1, (int)arg2) -> None :
     |      
     |          C++ signature :
     |              void setValidAreaMargin(class Defs::Mdl::STG::Actor::Base {lvalue},int)
     |  
     |  update(...)
     |      update( (STGActorBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void update(class Defs::Mdl::STG::Actor::Base {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from STGActorBase:
     |  
     |  frameCount
     |  
     |  objectId
     |  
     |  valid
     |  
     |  validFrameNum
     |  
     |  validRect
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class STGBulletMLCreateParam(Boost.Python.instance)
     |  Method resolution order:
     |      STGBulletMLCreateParam
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      __init__( (object)arg1) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64)
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  drawParameter
     |  
     |  hitRadius
     |  
     |  hp
     |  
     |  popped
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 120
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class STGBulletRotate(STGBulletBase)
     |  Method resolution order:
     |      STGBulletRotate
     |      STGBulletBase
     |      STGActorBase
     |      STGBullet
     |      STGActor
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      __init__( (object)arg1, (LocatorRotateF)arg2, (int)arg3, (SpriteDrawParam)arg4) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class Game::Util::STG::Locator::Rotate<float>,int,class Game::Util::Sprite::DrawParameter)
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  applyExternalForce(...)
     |      applyExternalForce( (STGBulletRotate)arg1, (Vector2DF)arg2) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExternalForce(class Defs::Mdl::STG::Bullet::Simple<class Game::Util::STG::Locator::Rotate<float> > {lvalue},class Game::Util::STG::Vector2D<float>)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  drawParameter
     |  
     |  locator
     |  
     |  position
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 32
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from STGBulletBase:
     |  
     |  applyDamage(...)
     |      applyDamage( (STGBulletBase)arg1, (float)arg2) -> None :
     |      
     |          C++ signature :
     |              void applyDamage(class Defs::Mdl::STG::Bullet::Base {lvalue},float)
     |  
     |  destruct(...)
     |      destruct( (STGBulletBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void destruct(class Defs::Mdl::STG::Bullet::Base {lvalue})
     |  
     |  isHitCircle(...)
     |      isHitCircle( (STGBulletBase)arg1, (HitCircleI)arg2) -> bool :
     |      
     |          C++ signature :
     |              bool isHitCircle(class Defs::Mdl::STG::Bullet::Base {lvalue},class Game::Util::STG::Hit::Circle<long>)
     |  
     |  isHitRect(...)
     |      isHitRect( (STGBulletBase)arg1, (HitRectI)arg2) -> bool :
     |      
     |          C++ signature :
     |              bool isHitRect(class Defs::Mdl::STG::Bullet::Base {lvalue},class Game::Util::STG::Hit::Rect<long>)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from STGBulletBase:
     |  
     |  hitRadius
     |  
     |  hp
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from STGActorBase:
     |  
     |  draw(...)
     |      draw( (STGActorBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void draw(class Defs::Mdl::STG::Actor::Base {lvalue})
     |  
     |  erase(...)
     |      erase( (STGActorBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void erase(class Defs::Mdl::STG::Actor::Base {lvalue})
     |  
     |  setValidAreaMargin(...)
     |      setValidAreaMargin( (STGActorBase)arg1, (int)arg2) -> None :
     |      
     |          C++ signature :
     |              void setValidAreaMargin(class Defs::Mdl::STG::Actor::Base {lvalue},int)
     |  
     |  update(...)
     |      update( (STGActorBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void update(class Defs::Mdl::STG::Actor::Base {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from STGActorBase:
     |  
     |  frameCount
     |  
     |  objectId
     |  
     |  valid
     |  
     |  validFrameNum
     |  
     |  validRect
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class STGConf(Boost.Python.instance)
     |  Method resolution order:
     |      STGConf
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  attachControllerAxis(...)
     |      attachControllerAxis( (AxisId)arg1) -> int :
     |      
     |          C++ signature :
     |              int attachControllerAxis(enum Game::Util::Input::STG::Detail::AXIS_ID)
     |  
     |  attachControllerButton(...)
     |      attachControllerButton( (KeyId)arg1) -> int :
     |      
     |          C++ signature :
     |              int attachControllerButton(enum Game::Util::Input::STG::KEY_ID)
     |  
     |  getAxisVirtualKey(...)
     |      getAxisVirtualKey( (AxisId)arg1) -> int :
     |      
     |          C++ signature :
     |              int getAxisVirtualKey(enum Game::Util::Input::STG::Detail::AXIS_ID)
     |  
     |  getBGMVolume(...)
     |      getBGMVolume() -> int :
     |      
     |          C++ signature :
     |              unsigned int getBGMVolume()
     |  
     |  getButtonVirtualKey(...)
     |      getButtonVirtualKey( (KeyId)arg1) -> int :
     |      
     |          C++ signature :
     |              int getButtonVirtualKey(enum Game::Util::Input::STG::KEY_ID)
     |  
     |  getMaxFileCacheSize(...)
     |      getMaxFileCacheSize() -> int :
     |      
     |          C++ signature :
     |              unsigned int getMaxFileCacheSize()
     |  
     |  getMyShipInfoList(...)
     |      getMyShipInfoList() -> list :
     |      
     |          C++ signature :
     |              class boost::python::list getMyShipInfoList()
     |  
     |  getSEVolume(...)
     |      getSEVolume() -> int :
     |      
     |          C++ signature :
     |              unsigned int getSEVolume()
     |  
     |  getScreenMode(...)
     |      getScreenMode() -> bool :
     |      
     |          C++ signature :
     |              bool getScreenMode()
     |  
     |  getStageSetInfoList(...)
     |      getStageSetInfoList() -> list :
     |      
     |          C++ signature :
     |              class boost::python::list getStageSetInfoList()
     |  
     |  readSetting(...)
     |      readSetting() -> None :
     |      
     |          C++ signature :
     |              void readSetting()
     |  
     |  registerMyShip(...)
     |      registerMyShip( (str)arg1, (object)arg2) -> int :
     |      
     |          C++ signature :
     |              int registerMyShip(class std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >,class boost::python::api::object)
     |  
     |  registerStage(...)
     |      registerStage( (int)arg1, (str)arg2, (object)arg3) -> int :
     |      
     |          C++ signature :
     |              int registerStage(int,class std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >,class boost::python::api::object)
     |  
     |  registerStageSet(...)
     |      registerStageSet( (str)arg1, (object)arg2, (object)arg3) -> int :
     |      
     |          C++ signature :
     |              int registerStageSet(class std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >,class boost::python::api::object,class boost::python::api::object)
     |  
     |  setBGMVolume(...)
     |      setBGMVolume( (int)arg1) -> None :
     |      
     |          C++ signature :
     |              void setBGMVolume(unsigned int)
     |  
     |  setDefaultSetting(...)
     |      setDefaultSetting() -> None :
     |      
     |          C++ signature :
     |              void setDefaultSetting()
     |  
     |  setMaxFileCacheSize(...)
     |      setMaxFileCacheSize( (int)arg1) -> None :
     |      
     |          C++ signature :
     |              void setMaxFileCacheSize(unsigned int)
     |  
     |  setSEVolume(...)
     |      setSEVolume( (int)arg1) -> None :
     |      
     |          C++ signature :
     |              void setSEVolume(unsigned int)
     |  
     |  setScreenMode(...)
     |      setScreenMode( (bool)arg1) -> None :
     |      
     |          C++ signature :
     |              void setScreenMode(bool)
     |  
     |  writeSetting(...)
     |      writeSetting() -> None :
     |      
     |          C++ signature :
     |              void writeSetting()
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __init__ = <built-in function __init__>
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class STGDrawPriority(Boost.Python.enum)
     |  Method resolution order:
     |      STGDrawPriority
     |      Boost.Python.enum
     |      builtins.int
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  background = Game.STGDrawPriority.background
     |  
     |  background2 = Game.STGDrawPriority.background2
     |  
     |  background3 = Game.STGDrawPriority.background3
     |  
     |  background4 = Game.STGDrawPriority.background4
     |  
     |  backgroundB1 = Game.STGDrawPriority.backgroundB1
     |  
     |  backgroundB2 = Game.STGDrawPriority.backgroundB2
     |  
     |  backgroundB3 = Game.STGDrawPriority.backgroundB3
     |  
     |  debugStr = Game.STGDrawPriority.debugStr
     |  
     |  enemy = Game.STGDrawPriority.enemy
     |  
     |  enemy2 = Game.STGDrawPriority.enemy2
     |  
     |  enemy3 = Game.STGDrawPriority.enemy3
     |  
     |  enemy4 = Game.STGDrawPriority.enemy4
     |  
     |  enemyB1 = Game.STGDrawPriority.enemyB1
     |  
     |  enemyB2 = Game.STGDrawPriority.enemyB2
     |  
     |  enemyB3 = Game.STGDrawPriority.enemyB3
     |  
     |  enemyBullet = Game.STGDrawPriority.enemyBullet
     |  
     |  enemyBullet2 = Game.STGDrawPriority.enemyBullet2
     |  
     |  enemyBullet3 = Game.STGDrawPriority.enemyBullet3
     |  
     |  enemyBullet4 = Game.STGDrawPriority.enemyBullet4
     |  
     |  enemyBulletB1 = Game.STGDrawPriority.enemyBulletB1
     |  
     |  enemyBulletB2 = Game.STGDrawPriority.enemyBulletB2
     |  
     |  enemyBulletB3 = Game.STGDrawPriority.enemyBulletB3
     |  
     |  enemyBulletDamaged = Game.STGDrawPriority.enemyBulletDamaged
     |  
     |  enemyHpGauge = Game.STGDrawPriority.enemyHpGauge
     |  
     |  explosion = Game.STGDrawPriority.explosion
     |  
     |  fadeEffect = Game.STGDrawPriority.fadeEffect
     |  
     |  infAreaBack = Game.STGDrawPriority.infAreaBack
     |  
     |  infAreaBack2 = Game.STGDrawPriority.infAreaBack2
     |  
     |  infAreaBack3 = Game.STGDrawPriority.infAreaBack3
     |  
     |  infAreaBack4 = Game.STGDrawPriority.infAreaBack4
     |  
     |  infAreaBackB1 = Game.STGDrawPriority.infAreaBackB1
     |  
     |  infAreaBackB2 = Game.STGDrawPriority.infAreaBackB2
     |  
     |  infAreaBackB3 = Game.STGDrawPriority.infAreaBackB3
     |  
     |  infAreaStr = Game.STGDrawPriority.infAreaStr
     |  
     |  item = Game.STGDrawPriority.item
     |  
     |  item2 = Game.STGDrawPriority.item2
     |  
     |  item3 = Game.STGDrawPriority.item3
     |  
     |  item4 = Game.STGDrawPriority.item4
     |  
     |  itemB1 = Game.STGDrawPriority.itemB1
     |  
     |  itemB2 = Game.STGDrawPriority.itemB2
     |  
     |  itemB3 = Game.STGDrawPriority.itemB3
     |  
     |  lockMarker = Game.STGDrawPriority.lockMarker
     |  
     |  lockMarker2 = Game.STGDrawPriority.lockMarker2
     |  
     |  lockMarker3 = Game.STGDrawPriority.lockMarker3
     |  
     |  lockMarker4 = Game.STGDrawPriority.lockMarker4
     |  
     |  lockMarkerB1 = Game.STGDrawPriority.lockMarkerB1
     |  
     |  lockMarkerB2 = Game.STGDrawPriority.lockMarkerB2
     |  
     |  lockMarkerB3 = Game.STGDrawPriority.lockMarkerB3
     |  
     |  myBarrier = Game.STGDrawPriority.myBarrier
     |  
     |  myShip = Game.STGDrawPriority.myShip
     |  
     |  myShip2 = Game.STGDrawPriority.myShip2
     |  
     |  myShip3 = Game.STGDrawPriority.myShip3
     |  
     |  myShip4 = Game.STGDrawPriority.myShip4
     |  
     |  myShipB1 = Game.STGDrawPriority.myShipB1
     |  
     |  myShipB2 = Game.STGDrawPriority.myShipB2
     |  
     |  myShipB3 = Game.STGDrawPriority.myShipB3
     |  
     |  myShipHitMark = Game.STGDrawPriority.myShipHitMark
     |  
     |  myShipOption = Game.STGDrawPriority.myShipOption
     |  
     |  myShipOption2 = Game.STGDrawPriority.myShipOption2
     |  
     |  myShipOption3 = Game.STGDrawPriority.myShipOption3
     |  
     |  myShipOption4 = Game.STGDrawPriority.myShipOption4
     |  
     |  myShipOptionB1 = Game.STGDrawPriority.myShipOptionB1
     |  
     |  myShipOptionB2 = Game.STGDrawPriority.myShipOptionB2
     |  
     |  myShipOptionB3 = Game.STGDrawPriority.myShipOptionB3
     |  
     |  myShot = Game.STGDrawPriority.myShot
     |  
     |  myShot2 = Game.STGDrawPriority.myShot2
     |  
     |  myShot3 = Game.STGDrawPriority.myShot3
     |  
     |  myShot4 = Game.STGDrawPriority.myShot4
     |  
     |  myShotB1 = Game.STGDrawPriority.myShotB1
     |  
     |  myShotB2 = Game.STGDrawPriority.myShotB2
     |  
     |  myShotB3 = Game.STGDrawPriority.myShotB3
     |  
     |  names = {'background': Game.STGDrawPriority.background, 'background2':...
     |  
     |  paEffect = Game.STGDrawPriority.paEffect
     |  
     |  pauseBack = Game.STGDrawPriority.pauseBack
     |  
     |  pauseBack2 = Game.STGDrawPriority.pauseBack2
     |  
     |  pauseBack3 = Game.STGDrawPriority.pauseBack3
     |  
     |  pauseBack4 = Game.STGDrawPriority.pauseBack4
     |  
     |  pauseBackB1 = Game.STGDrawPriority.pauseBackB1
     |  
     |  pauseBackB2 = Game.STGDrawPriority.pauseBackB2
     |  
     |  pauseBackB3 = Game.STGDrawPriority.pauseBackB3
     |  
     |  pauseStr = Game.STGDrawPriority.pauseStr
     |  
     |  result = Game.STGDrawPriority.result
     |  
     |  result2 = Game.STGDrawPriority.result2
     |  
     |  result3 = Game.STGDrawPriority.result3
     |  
     |  result4 = Game.STGDrawPriority.result4
     |  
     |  resultB1 = Game.STGDrawPriority.resultB1
     |  
     |  resultB2 = Game.STGDrawPriority.resultB2
     |  
     |  resultB3 = Game.STGDrawPriority.resultB3
     |  
     |  scoreRate = Game.STGDrawPriority.scoreRate
     |  
     |  scoreRate2 = Game.STGDrawPriority.scoreRate2
     |  
     |  scoreRate3 = Game.STGDrawPriority.scoreRate3
     |  
     |  values = {0: Game.STGDrawPriority.backgroundB3, 1: Game.STGDrawPriorit...
     |  
     |  warning = Game.STGDrawPriority.warning
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Boost.Python.enum:
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.enum:
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.int:
     |  
     |  __abs__(...)
     |      x.__abs__() <==> abs(x)
     |  
     |  __add__(...)
     |      x.__add__(y) <==> x+y
     |  
     |  __and__(...)
     |      x.__and__(y) <==> x&y
     |  
     |  __bool__(...)
     |      x.__bool__() <==> x != 0
     |  
     |  __ceil__(...)
     |      Ceiling of an Integral returns itself.
     |  
     |  __divmod__(...)
     |      x.__divmod__(y) <==> divmod(x, y)
     |  
     |  __eq__(...)
     |      x.__eq__(y) <==> x==y
     |  
     |  __float__(...)
     |      x.__float__() <==> float(x)
     |  
     |  __floor__(...)
     |      Flooring an Integral returns itself.
     |  
     |  __floordiv__(...)
     |      x.__floordiv__(y) <==> x//y
     |  
     |  __format__(...)
     |  
     |  __ge__(...)
     |      x.__ge__(y) <==> x>=y
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __getnewargs__(...)
     |  
     |  __gt__(...)
     |      x.__gt__(y) <==> x>y
     |  
     |  __hash__(...)
     |      x.__hash__() <==> hash(x)
     |  
     |  __index__(...)
     |      x[y:z] <==> x[y.__index__():z.__index__()]
     |  
     |  __int__(...)
     |      x.__int__() <==> int(x)
     |  
     |  __invert__(...)
     |      x.__invert__() <==> ~x
     |  
     |  __le__(...)
     |      x.__le__(y) <==> x<=y
     |  
     |  __lshift__(...)
     |      x.__lshift__(y) <==> x<<y
     |  
     |  __lt__(...)
     |      x.__lt__(y) <==> x<y
     |  
     |  __mod__(...)
     |      x.__mod__(y) <==> x%y
     |  
     |  __mul__(...)
     |      x.__mul__(y) <==> x*y
     |  
     |  __ne__(...)
     |      x.__ne__(y) <==> x!=y
     |  
     |  __neg__(...)
     |      x.__neg__() <==> -x
     |  
     |  __or__(...)
     |      x.__or__(y) <==> x|y
     |  
     |  __pos__(...)
     |      x.__pos__() <==> +x
     |  
     |  __pow__(...)
     |      x.__pow__(y[, z]) <==> pow(x, y[, z])
     |  
     |  __radd__(...)
     |      x.__radd__(y) <==> y+x
     |  
     |  __rand__(...)
     |      x.__rand__(y) <==> y&x
     |  
     |  __rdivmod__(...)
     |      x.__rdivmod__(y) <==> divmod(y, x)
     |  
     |  __rfloordiv__(...)
     |      x.__rfloordiv__(y) <==> y//x
     |  
     |  __rlshift__(...)
     |      x.__rlshift__(y) <==> y<<x
     |  
     |  __rmod__(...)
     |      x.__rmod__(y) <==> y%x
     |  
     |  __rmul__(...)
     |      x.__rmul__(y) <==> y*x
     |  
     |  __ror__(...)
     |      x.__ror__(y) <==> y|x
     |  
     |  __round__(...)
     |      Rounding an Integral returns itself.
     |      Rounding with an ndigits argument also returns an integer.
     |  
     |  __rpow__(...)
     |      y.__rpow__(x[, z]) <==> pow(x, y[, z])
     |  
     |  __rrshift__(...)
     |      x.__rrshift__(y) <==> y>>x
     |  
     |  __rshift__(...)
     |      x.__rshift__(y) <==> x>>y
     |  
     |  __rsub__(...)
     |      x.__rsub__(y) <==> y-x
     |  
     |  __rtruediv__(...)
     |      x.__rtruediv__(y) <==> y/x
     |  
     |  __rxor__(...)
     |      x.__rxor__(y) <==> y^x
     |  
     |  __sizeof__(...)
     |      Returns size in memory, in bytes
     |  
     |  __sub__(...)
     |      x.__sub__(y) <==> x-y
     |  
     |  __truediv__(...)
     |      x.__truediv__(y) <==> x/y
     |  
     |  __trunc__(...)
     |      Truncating an Integral returns itself.
     |  
     |  __xor__(...)
     |      x.__xor__(y) <==> x^y
     |  
     |  bit_length(...)
     |      int.bit_length() -> int
     |      
     |      Number of bits necessary to represent self in binary.
     |      >>> bin(37)
     |      '0b100101'
     |      >>> (37).bit_length()
     |      6
     |  
     |  conjugate(...)
     |      Returns self, the complex conjugate of any int.
     |  
     |  to_bytes(...)
     |      int.to_bytes(length, byteorder, *, signed=False) -> bytes
     |      
     |      Return an array of bytes representing an integer.
     |      
     |      The integer is represented using length bytes.  An OverflowError is
     |      raised if the integer is not representable with the given number of
     |      bytes.
     |      
     |      The byteorder argument determines the byte order used to represent the
     |      integer.  If byteorder is 'big', the most significant byte is at the
     |      beginning of the byte array.  If byteorder is 'little', the most
     |      significant byte is at the end of the byte array.  To request the native
     |      byte order of the host system, use `sys.byteorder' as the byte order value.
     |      
     |      The signed keyword-only argument determines whether two's complement is
     |      used to represent the integer.  If signed is False and a negative integer
     |      is given, an OverflowError is raised.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.int:
     |  
     |  denominator
     |      the denominator of a rational number in lowest terms
     |  
     |  imag
     |      the imaginary part of a complex number
     |  
     |  numerator
     |      the numerator of a rational number in lowest terms
     |  
     |  real
     |      the real part of a complex number
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from builtins.int:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  from_bytes = <built-in method from_bytes of type object>
     |      int.from_bytes(bytes, byteorder, *, signed=False) -> int
     |      
     |      Return the integer represented by the given array of bytes.
     |      
     |      The bytes argument must either support the buffer protocol or be an
     |      iterable object producing bytes.  Bytes and bytearray are examples of
     |      built-in objects that support the buffer protocol.
     |      
     |      The byteorder argument determines the byte order used to represent the
     |      integer.  If byteorder is 'big', the most significant byte is at the
     |      beginning of the byte array.  If byteorder is 'little', the most
     |      significant byte is at the end of the byte array.  To request the native
     |      byte order of the host system, use `sys.byteorder' as the byte order value.
     |      
     |      The signed keyword-only argument indicates whether two's complement is
     |      used to represent the integer.
    
    class STGEnemy(STGActor)
     |  Method resolution order:
     |      STGEnemy
     |      STGActor
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  applyDamage(...)
     |      applyDamage( (STGEnemy)arg1, (float)arg2) -> None :
     |      
     |          C++ signature :
     |              void applyDamage(class Game::Mdl::STG::Enemy::IEnemy {lvalue},float)
     |  
     |  destruct(...)
     |      destruct( (STGEnemy)arg1) -> None :
     |      
     |          C++ signature :
     |              void destruct(class Game::Mdl::STG::Enemy::IEnemy {lvalue})
     |  
     |  isHit(...)
     |      isHit( (STGEnemy)arg1, (HitRectI)arg2) -> bool :
     |      
     |          C++ signature :
     |              bool isHit(class Game::Mdl::STG::Enemy::IEnemy {lvalue},class Game::Util::STG::Hit::Rect<long>)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  hitRadius
     |  
     |  hitRect
     |  
     |  hp
     |  
     |  maxPAAmount
     |  
     |  paAmount
     |  
     |  paGenerated
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __init__ = <built-in function __init__>
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from STGActor:
     |  
     |  applyExternalForce(...)
     |      applyExternalForce( (STGActor)arg1, (Vector2DF)arg2) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExternalForce(class Game::Mdl::STG::Actor::IActor {lvalue},class Game::Util::STG::Vector2D<float>)
     |  
     |  erase(...)
     |      erase( (STGActor)arg1) -> None :
     |      
     |          C++ signature :
     |              void erase(class Game::Mdl::STG::Actor::IActor {lvalue})
     |  
     |  setValidAreaMargin(...)
     |      setValidAreaMargin( (STGActor)arg1, (int)arg2) -> None :
     |      
     |          C++ signature :
     |              void setValidAreaMargin(class Game::Mdl::STG::Actor::IActor {lvalue},int)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from STGActor:
     |  
     |  frameCount
     |  
     |  objectId
     |  
     |  position
     |  
     |  valid
     |  
     |  validFrameNum
     |  
     |  validRect
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class STGEnemyBase(STGActorBase, STGEnemy)
     |  Method resolution order:
     |      STGEnemyBase
     |      STGActorBase
     |      STGEnemy
     |      STGActor
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  applyDamage(...)
     |      applyDamage( (STGEnemyBase)arg1, (float)arg2) -> None :
     |      
     |          C++ signature :
     |              void applyDamage(class Defs::Mdl::STG::Enemy::Base {lvalue},float)
     |  
     |  destruct(...)
     |      destruct( (STGEnemyBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void destruct(class Defs::Mdl::STG::Enemy::Base {lvalue})
     |  
     |  isHit(...)
     |      isHit( (STGEnemyBase)arg1, (HitRectI)arg2) -> bool :
     |      
     |          C++ signature :
     |              bool isHit(class Defs::Mdl::STG::Enemy::Base {lvalue},class Game::Util::STG::Hit::Rect<long>)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  hitRadius
     |  
     |  hitRect
     |  
     |  hp
     |  
     |  maxPAAmount
     |  
     |  paAmount
     |  
     |  paGenerated
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __init__ = <built-in function __init__>
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from STGActorBase:
     |  
     |  draw(...)
     |      draw( (STGActorBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void draw(class Defs::Mdl::STG::Actor::Base {lvalue})
     |  
     |  erase(...)
     |      erase( (STGActorBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void erase(class Defs::Mdl::STG::Actor::Base {lvalue})
     |  
     |  setValidAreaMargin(...)
     |      setValidAreaMargin( (STGActorBase)arg1, (int)arg2) -> None :
     |      
     |          C++ signature :
     |              void setValidAreaMargin(class Defs::Mdl::STG::Actor::Base {lvalue},int)
     |  
     |  update(...)
     |      update( (STGActorBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void update(class Defs::Mdl::STG::Actor::Base {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from STGActorBase:
     |  
     |  frameCount
     |  
     |  objectId
     |  
     |  valid
     |  
     |  validFrameNum
     |  
     |  validRect
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from STGActor:
     |  
     |  applyExternalForce(...)
     |      applyExternalForce( (STGActor)arg1, (Vector2DF)arg2) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExternalForce(class Game::Mdl::STG::Actor::IActor {lvalue},class Game::Util::STG::Vector2D<float>)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from STGActor:
     |  
     |  position
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class STGEnemyHPGauge(Boost.Python.instance)
     |  Method resolution order:
     |      STGEnemyHPGauge
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      __init__( (object)arg1, (float)arg2) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,float)
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  appear(...)
     |      appear( (STGEnemyHPGauge)arg1) -> None :
     |      
     |          C++ signature :
     |              void appear(class Defs::Mdl::STG::Enemy::HPGauge {lvalue})
     |  
     |  disappear(...)
     |      disappear( (STGEnemyHPGauge)arg1) -> None :
     |      
     |          C++ signature :
     |              void disappear(class Defs::Mdl::STG::Enemy::HPGauge {lvalue})
     |  
     |  draw(...)
     |      draw( (STGEnemyHPGauge)arg1) -> None :
     |      
     |          C++ signature :
     |              void draw(class Defs::Mdl::STG::Enemy::HPGauge {lvalue})
     |  
     |  update(...)
     |      update( (STGEnemyHPGauge)arg1) -> None :
     |      
     |          C++ signature :
     |              void update(class Defs::Mdl::STG::Enemy::HPGauge {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  maxValue
     |  
     |  value
     |  
     |  visibleValue
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 136
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class STGFadeOut(STGActorBase)
     |  Method resolution order:
     |      STGFadeOut
     |      STGActorBase
     |      STGActor
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      __init__( (object)arg1, (HitRectI)arg2) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class Game::Util::STG::Hit::Rect<long>)
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  applyExternalForce(...)
     |      applyExternalForce( (STGFadeOut)arg1, (Vector2DF)arg2) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExternalForce(class Defs::Mdl::STG::Actor::FadeOut {lvalue},class Game::Util::STG::Vector2D<float>)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  drawParam
     |  
     |  frameCount
     |  
     |  frameNum
     |  
     |  locator
     |  
     |  position
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 32
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from STGActorBase:
     |  
     |  draw(...)
     |      draw( (STGActorBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void draw(class Defs::Mdl::STG::Actor::Base {lvalue})
     |  
     |  erase(...)
     |      erase( (STGActorBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void erase(class Defs::Mdl::STG::Actor::Base {lvalue})
     |  
     |  setValidAreaMargin(...)
     |      setValidAreaMargin( (STGActorBase)arg1, (int)arg2) -> None :
     |      
     |          C++ signature :
     |              void setValidAreaMargin(class Defs::Mdl::STG::Actor::Base {lvalue},int)
     |  
     |  update(...)
     |      update( (STGActorBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void update(class Defs::Mdl::STG::Actor::Base {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from STGActorBase:
     |  
     |  objectId
     |  
     |  valid
     |  
     |  validFrameNum
     |  
     |  validRect
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class STGItem(STGActor)
     |  Method resolution order:
     |      STGItem
     |      STGActor
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  hitRadius
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __init__ = <built-in function __init__>
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from STGActor:
     |  
     |  applyExternalForce(...)
     |      applyExternalForce( (STGActor)arg1, (Vector2DF)arg2) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExternalForce(class Game::Mdl::STG::Actor::IActor {lvalue},class Game::Util::STG::Vector2D<float>)
     |  
     |  erase(...)
     |      erase( (STGActor)arg1) -> None :
     |      
     |          C++ signature :
     |              void erase(class Game::Mdl::STG::Actor::IActor {lvalue})
     |  
     |  setValidAreaMargin(...)
     |      setValidAreaMargin( (STGActor)arg1, (int)arg2) -> None :
     |      
     |          C++ signature :
     |              void setValidAreaMargin(class Game::Mdl::STG::Actor::IActor {lvalue},int)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from STGActor:
     |  
     |  frameCount
     |  
     |  objectId
     |  
     |  position
     |  
     |  valid
     |  
     |  validFrameNum
     |  
     |  validRect
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class STGItemBase(STGActorBase, STGItem)
     |  Method resolution order:
     |      STGItemBase
     |      STGActorBase
     |      STGItem
     |      STGActor
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  applyExternalForce(...)
     |      applyExternalForce( (STGItemBase)arg1, (Vector2DF)arg2) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExternalForce(class Defs::Mdl::STG::Item::Base {lvalue},class Game::Util::STG::Vector2D<float>)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  hitRadius
     |  
     |  position
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __init__ = <built-in function __init__>
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from STGActorBase:
     |  
     |  draw(...)
     |      draw( (STGActorBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void draw(class Defs::Mdl::STG::Actor::Base {lvalue})
     |  
     |  erase(...)
     |      erase( (STGActorBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void erase(class Defs::Mdl::STG::Actor::Base {lvalue})
     |  
     |  setValidAreaMargin(...)
     |      setValidAreaMargin( (STGActorBase)arg1, (int)arg2) -> None :
     |      
     |          C++ signature :
     |              void setValidAreaMargin(class Defs::Mdl::STG::Actor::Base {lvalue},int)
     |  
     |  update(...)
     |      update( (STGActorBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void update(class Defs::Mdl::STG::Actor::Base {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from STGActorBase:
     |  
     |  frameCount
     |  
     |  objectId
     |  
     |  valid
     |  
     |  validFrameNum
     |  
     |  validRect
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class STGItemExtend(STGItemBase)
     |  Method resolution order:
     |      STGItemExtend
     |      STGItemBase
     |      STGActorBase
     |      STGItem
     |      STGActor
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      __init__( (object)arg1, (Vector2DF)arg2) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class Game::Util::STG::Vector2D<float>)
     |      
     |      __init__( (object)arg1, (Vector2DF)arg2, (float)arg3) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class Game::Util::STG::Vector2D<float>,float)
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 32
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from STGItemBase:
     |  
     |  applyExternalForce(...)
     |      applyExternalForce( (STGItemBase)arg1, (Vector2DF)arg2) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExternalForce(class Defs::Mdl::STG::Item::Base {lvalue},class Game::Util::STG::Vector2D<float>)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from STGItemBase:
     |  
     |  hitRadius
     |  
     |  position
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from STGActorBase:
     |  
     |  draw(...)
     |      draw( (STGActorBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void draw(class Defs::Mdl::STG::Actor::Base {lvalue})
     |  
     |  erase(...)
     |      erase( (STGActorBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void erase(class Defs::Mdl::STG::Actor::Base {lvalue})
     |  
     |  setValidAreaMargin(...)
     |      setValidAreaMargin( (STGActorBase)arg1, (int)arg2) -> None :
     |      
     |          C++ signature :
     |              void setValidAreaMargin(class Defs::Mdl::STG::Actor::Base {lvalue},int)
     |  
     |  update(...)
     |      update( (STGActorBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void update(class Defs::Mdl::STG::Actor::Base {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from STGActorBase:
     |  
     |  frameCount
     |  
     |  objectId
     |  
     |  valid
     |  
     |  validFrameNum
     |  
     |  validRect
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class STGItemPowerUp(STGItemBase)
     |  Method resolution order:
     |      STGItemPowerUp
     |      STGItemBase
     |      STGActorBase
     |      STGItem
     |      STGActor
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      __init__( (object)arg1, (Vector2DF)arg2) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class Game::Util::STG::Vector2D<float>)
     |      
     |      __init__( (object)arg1, (Vector2DF)arg2, (float)arg3) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class Game::Util::STG::Vector2D<float>,float)
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  setEffectCallback(...)
     |      setEffectCallback( (STGItemPowerUp)arg1, (object)arg2) -> None :
     |      
     |          C++ signature :
     |              void setEffectCallback(class Defs::Mdl::STG::Item::PowerUp {lvalue},class boost::python::api::object)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 32
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from STGItemBase:
     |  
     |  applyExternalForce(...)
     |      applyExternalForce( (STGItemBase)arg1, (Vector2DF)arg2) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExternalForce(class Defs::Mdl::STG::Item::Base {lvalue},class Game::Util::STG::Vector2D<float>)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from STGItemBase:
     |  
     |  hitRadius
     |  
     |  position
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from STGActorBase:
     |  
     |  draw(...)
     |      draw( (STGActorBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void draw(class Defs::Mdl::STG::Actor::Base {lvalue})
     |  
     |  erase(...)
     |      erase( (STGActorBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void erase(class Defs::Mdl::STG::Actor::Base {lvalue})
     |  
     |  setValidAreaMargin(...)
     |      setValidAreaMargin( (STGActorBase)arg1, (int)arg2) -> None :
     |      
     |          C++ signature :
     |              void setValidAreaMargin(class Defs::Mdl::STG::Actor::Base {lvalue},int)
     |  
     |  update(...)
     |      update( (STGActorBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void update(class Defs::Mdl::STG::Actor::Base {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from STGActorBase:
     |  
     |  frameCount
     |  
     |  objectId
     |  
     |  valid
     |  
     |  validFrameNum
     |  
     |  validRect
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class STGItemSpAttack(STGItemBase)
     |  Method resolution order:
     |      STGItemSpAttack
     |      STGItemBase
     |      STGActorBase
     |      STGItem
     |      STGActor
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      __init__( (object)arg1, (Vector2DF)arg2) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class Game::Util::STG::Vector2D<float>)
     |      
     |      __init__( (object)arg1, (Vector2DF)arg2, (float)arg3) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class Game::Util::STG::Vector2D<float>,float)
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  setEffectCallback(...)
     |      setEffectCallback( (STGItemSpAttack)arg1, (object)arg2) -> None :
     |      
     |          C++ signature :
     |              void setEffectCallback(class Defs::Mdl::STG::Item::SpAttack {lvalue},class boost::python::api::object)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 32
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from STGItemBase:
     |  
     |  applyExternalForce(...)
     |      applyExternalForce( (STGItemBase)arg1, (Vector2DF)arg2) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExternalForce(class Defs::Mdl::STG::Item::Base {lvalue},class Game::Util::STG::Vector2D<float>)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from STGItemBase:
     |  
     |  hitRadius
     |  
     |  position
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from STGActorBase:
     |  
     |  draw(...)
     |      draw( (STGActorBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void draw(class Defs::Mdl::STG::Actor::Base {lvalue})
     |  
     |  erase(...)
     |      erase( (STGActorBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void erase(class Defs::Mdl::STG::Actor::Base {lvalue})
     |  
     |  setValidAreaMargin(...)
     |      setValidAreaMargin( (STGActorBase)arg1, (int)arg2) -> None :
     |      
     |          C++ signature :
     |              void setValidAreaMargin(class Defs::Mdl::STG::Actor::Base {lvalue},int)
     |  
     |  update(...)
     |      update( (STGActorBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void update(class Defs::Mdl::STG::Actor::Base {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from STGActorBase:
     |  
     |  frameCount
     |  
     |  objectId
     |  
     |  valid
     |  
     |  validFrameNum
     |  
     |  validRect
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class STGMyShip(Boost.Python.instance)
     |  Method resolution order:
     |      STGMyShip
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  addRemainder(...)
     |      addRemainder( (STGMyShip)arg1, (int)arg2) -> None :
     |      
     |          C++ signature :
     |              void addRemainder(class Game::Mdl::STG::MyShip::IMyShip {lvalue},unsigned int)
     |  
     |  applyExternalForce(...)
     |      applyExternalForce( (STGMyShip)arg1, (Vector2DF)arg2) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExternalForce(class Game::Mdl::STG::MyShip::IMyShip {lvalue},class Game::Util::STG::Vector2D<float>)
     |  
     |  destruct(...)
     |      destruct( (STGMyShip)arg1) -> None :
     |      
     |          C++ signature :
     |              void destruct(class Game::Mdl::STG::MyShip::IMyShip {lvalue})
     |  
     |  drawInfArea(...)
     |      drawInfArea( (STGMyShip)arg1, (Vector2DF)arg2) -> None :
     |      
     |          C++ signature :
     |              void drawInfArea(class Game::Mdl::STG::MyShip::IMyShip {lvalue},class Game::Util::STG::Vector2D<float>)
     |  
     |  isHit(...)
     |      isHit( (STGMyShip)arg1, (HitCircleI)arg2) -> bool :
     |      
     |          C++ signature :
     |              bool isHit(class Game::Mdl::STG::MyShip::IMyShip {lvalue},class Game::Util::STG::Hit::Circle<long>)
     |  
     |  isHit_GetItem(...)
     |      isHit_GetItem( (STGMyShip)arg1, (HitCircleI)arg2) -> bool :
     |      
     |          C++ signature :
     |              bool isHit_GetItem(class Game::Mdl::STG::MyShip::IMyShip {lvalue},class Game::Util::STG::Hit::Circle<long>)
     |  
     |  isHit_ItemRetrieve(...)
     |      isHit_ItemRetrieve( (STGMyShip)arg1, (HitCircleI)arg2) -> bool :
     |      
     |          C++ signature :
     |              bool isHit_ItemRetrieve(class Game::Mdl::STG::MyShip::IMyShip {lvalue},class Game::Util::STG::Hit::Circle<long>)
     |  
     |  setBarrier(...)
     |      setBarrier( (STGMyShip)arg1, (int)arg2) -> None :
     |      
     |          C++ signature :
     |              void setBarrier(class Game::Mdl::STG::MyShip::IMyShip {lvalue},unsigned int)
     |  
     |  setInitRemainder(...)
     |      setInitRemainder( (STGMyShip)arg1, (int)arg2) -> None :
     |      
     |          C++ signature :
     |              void setInitRemainder(class Game::Mdl::STG::MyShip::IMyShip {lvalue},unsigned int)
     |  
     |  setMoveForbidFlag(...)
     |      setMoveForbidFlag( (STGMyShip)arg1, (bool)arg2) -> None :
     |      
     |          C++ signature :
     |              void setMoveForbidFlag(class Game::Mdl::STG::MyShip::IMyShip {lvalue},bool)
     |  
     |  setShotForbidFlag(...)
     |      setShotForbidFlag( (STGMyShip)arg1, (bool)arg2) -> None :
     |      
     |          C++ signature :
     |              void setShotForbidFlag(class Game::Mdl::STG::MyShip::IMyShip {lvalue},bool)
     |  
     |  setSpecialAttackForbidFlag(...)
     |      setSpecialAttackForbidFlag( (STGMyShip)arg1, (bool)arg2) -> None :
     |      
     |          C++ signature :
     |              void setSpecialAttackForbidFlag(class Game::Mdl::STG::MyShip::IMyShip {lvalue},bool)
     |  
     |  supplyPower(...)
     |      supplyPower( (STGMyShip)arg1) -> bool :
     |      
     |          C++ signature :
     |              bool supplyPower(class Game::Mdl::STG::MyShip::IMyShip {lvalue})
     |  
     |  supplySpAttack(...)
     |      supplySpAttack( (STGMyShip)arg1) -> bool :
     |      
     |          C++ signature :
     |              bool supplySpAttack(class Game::Mdl::STG::MyShip::IMyShip {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  barrierCount
     |  
     |  barriered
     |  
     |  disappeared
     |  
     |  position
     |  
     |  power
     |  
     |  remainder
     |  
     |  spAttack
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __init__ = <built-in function __init__>
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class STGMyShipBase(STGMyShip)
     |  Method resolution order:
     |      STGMyShipBase
     |      STGMyShip
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  addRemainder(...)
     |      addRemainder( (STGMyShipBase)arg1, (int)arg2) -> None :
     |      
     |          C++ signature :
     |              void addRemainder(class Defs::Mdl::STG::MyShip::Base {lvalue},unsigned int)
     |  
     |  applyExternalForce(...)
     |      applyExternalForce( (STGMyShipBase)arg1, (Vector2DF)arg2) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExternalForce(class Defs::Mdl::STG::MyShip::Base {lvalue},class Game::Util::STG::Vector2D<float>)
     |  
     |  continue(...)
     |      continue( (STGMyShipBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void continue(class Defs::Mdl::STG::MyShip::Base {lvalue})
     |  
     |  destruct(...)
     |      destruct( (STGMyShipBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void destruct(class Defs::Mdl::STG::MyShip::Base {lvalue})
     |  
     |  draw(...)
     |      draw( (STGMyShipBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void draw(class Defs::Mdl::STG::MyShip::Base {lvalue})
     |  
     |  isHit(...)
     |      isHit( (STGMyShipBase)arg1, (HitCircleI)arg2) -> bool :
     |      
     |          C++ signature :
     |              bool isHit(class Defs::Mdl::STG::MyShip::Base {lvalue},class Game::Util::STG::Hit::Circle<long>)
     |  
     |  isHit_GetItem(...)
     |      isHit_GetItem( (STGMyShipBase)arg1, (HitCircleI)arg2) -> bool :
     |      
     |          C++ signature :
     |              bool isHit_GetItem(class Defs::Mdl::STG::MyShip::Base {lvalue},class Game::Util::STG::Hit::Circle<long>)
     |  
     |  isHit_ItemRetrieve(...)
     |      isHit_ItemRetrieve( (STGMyShipBase)arg1, (HitCircleI)arg2) -> bool :
     |      
     |          C++ signature :
     |              bool isHit_ItemRetrieve(class Defs::Mdl::STG::MyShip::Base {lvalue},class Game::Util::STG::Hit::Circle<long>)
     |  
     |  setBarrier(...)
     |      setBarrier( (STGMyShipBase)arg1, (int)arg2) -> None :
     |      
     |          C++ signature :
     |              void setBarrier(class Defs::Mdl::STG::MyShip::Base {lvalue},unsigned int)
     |  
     |  setInitRemainder(...)
     |      setInitRemainder( (STGMyShipBase)arg1, (int)arg2) -> None :
     |      
     |          C++ signature :
     |              void setInitRemainder(class Defs::Mdl::STG::MyShip::Base {lvalue},unsigned int)
     |  
     |  setMoveForbidFlag(...)
     |      setMoveForbidFlag( (STGMyShipBase)arg1, (bool)arg2) -> None :
     |      
     |          C++ signature :
     |              void setMoveForbidFlag(class Defs::Mdl::STG::MyShip::Base {lvalue},bool)
     |  
     |  setShotForbidFlag(...)
     |      setShotForbidFlag( (STGMyShipBase)arg1, (bool)arg2) -> None :
     |      
     |          C++ signature :
     |              void setShotForbidFlag(class Defs::Mdl::STG::MyShip::Base {lvalue},bool)
     |  
     |  setSpecialAttackForbidFlag(...)
     |      setSpecialAttackForbidFlag( (STGMyShipBase)arg1, (bool)arg2) -> None :
     |      
     |          C++ signature :
     |              void setSpecialAttackForbidFlag(class Defs::Mdl::STG::MyShip::Base {lvalue},bool)
     |  
     |  update(...)
     |      update( (STGMyShipBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void update(class Defs::Mdl::STG::MyShip::Base {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  barrierCount
     |  
     |  barriered
     |  
     |  disappeared
     |  
     |  position
     |  
     |  remainder
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __init__ = <built-in function __init__>
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from STGMyShip:
     |  
     |  drawInfArea(...)
     |      drawInfArea( (STGMyShip)arg1, (Vector2DF)arg2) -> None :
     |      
     |          C++ signature :
     |              void drawInfArea(class Game::Mdl::STG::MyShip::IMyShip {lvalue},class Game::Util::STG::Vector2D<float>)
     |  
     |  supplyPower(...)
     |      supplyPower( (STGMyShip)arg1) -> bool :
     |      
     |          C++ signature :
     |              bool supplyPower(class Game::Mdl::STG::MyShip::IMyShip {lvalue})
     |  
     |  supplySpAttack(...)
     |      supplySpAttack( (STGMyShip)arg1) -> bool :
     |      
     |          C++ signature :
     |              bool supplySpAttack(class Game::Mdl::STG::MyShip::IMyShip {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from STGMyShip:
     |  
     |  power
     |  
     |  spAttack
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class STGMyShot(STGActor)
     |  Method resolution order:
     |      STGMyShot
     |      STGActor
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  applyDamage(...)
     |      applyDamage( (STGMyShot)arg1, (float)arg2) -> None :
     |      
     |          C++ signature :
     |              void applyDamage(class Game::Mdl::STG::MyShot::IMyShot {lvalue},float)
     |  
     |  destruct(...)
     |      destruct( (STGMyShot)arg1) -> None :
     |      
     |          C++ signature :
     |              void destruct(class Game::Mdl::STG::MyShot::IMyShot {lvalue})
     |  
     |  isHitCircle(...)
     |      isHitCircle( (STGMyShot)arg1, (HitCircleI)arg2) -> bool :
     |      
     |          C++ signature :
     |              bool isHitCircle(class Game::Mdl::STG::MyShot::IMyShot {lvalue},class Game::Util::STG::Hit::Circle<long>)
     |  
     |  isHitRect(...)
     |      isHitRect( (STGMyShot)arg1, (HitRectI)arg2) -> bool :
     |      
     |          C++ signature :
     |              bool isHitRect(class Game::Mdl::STG::MyShot::IMyShot {lvalue},class Game::Util::STG::Hit::Rect<long>)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  forcibleForPA
     |  
     |  hitRadius
     |  
     |  hp
     |  
     |  paDamage
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __init__ = <built-in function __init__>
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from STGActor:
     |  
     |  applyExternalForce(...)
     |      applyExternalForce( (STGActor)arg1, (Vector2DF)arg2) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExternalForce(class Game::Mdl::STG::Actor::IActor {lvalue},class Game::Util::STG::Vector2D<float>)
     |  
     |  erase(...)
     |      erase( (STGActor)arg1) -> None :
     |      
     |          C++ signature :
     |              void erase(class Game::Mdl::STG::Actor::IActor {lvalue})
     |  
     |  setValidAreaMargin(...)
     |      setValidAreaMargin( (STGActor)arg1, (int)arg2) -> None :
     |      
     |          C++ signature :
     |              void setValidAreaMargin(class Game::Mdl::STG::Actor::IActor {lvalue},int)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from STGActor:
     |  
     |  frameCount
     |  
     |  objectId
     |  
     |  position
     |  
     |  valid
     |  
     |  validFrameNum
     |  
     |  validRect
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class STGMyShotBase(STGActorBase, STGMyShot)
     |  Method resolution order:
     |      STGMyShotBase
     |      STGActorBase
     |      STGMyShot
     |      STGActor
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  applyDamage(...)
     |      applyDamage( (STGMyShotBase)arg1, (float)arg2) -> None :
     |      
     |          C++ signature :
     |              void applyDamage(class Defs::Mdl::STG::MyShot::Base {lvalue},float)
     |  
     |  destruct(...)
     |      destruct( (STGMyShotBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void destruct(class Defs::Mdl::STG::MyShot::Base {lvalue})
     |  
     |  isHitCircle(...)
     |      isHitCircle( (STGMyShotBase)arg1, (HitCircleI)arg2) -> bool :
     |      
     |          C++ signature :
     |              bool isHitCircle(class Defs::Mdl::STG::MyShot::Base {lvalue},class Game::Util::STG::Hit::Circle<long>)
     |  
     |  isHitRect(...)
     |      isHitRect( (STGMyShotBase)arg1, (HitRectI)arg2) -> bool :
     |      
     |          C++ signature :
     |              bool isHitRect(class Defs::Mdl::STG::MyShot::Base {lvalue},class Game::Util::STG::Hit::Rect<long>)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  baseDamage
     |  
     |  damage
     |  
     |  damageRate
     |  
     |  damageRateDec
     |  
     |  damageRateMin
     |  
     |  forcibleForPA
     |  
     |  hitRadius
     |  
     |  hp
     |  
     |  maxHP
     |  
     |  noDamage
     |  
     |  paBaseDamage
     |  
     |  paDamage
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __init__ = <built-in function __init__>
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from STGActorBase:
     |  
     |  draw(...)
     |      draw( (STGActorBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void draw(class Defs::Mdl::STG::Actor::Base {lvalue})
     |  
     |  erase(...)
     |      erase( (STGActorBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void erase(class Defs::Mdl::STG::Actor::Base {lvalue})
     |  
     |  setValidAreaMargin(...)
     |      setValidAreaMargin( (STGActorBase)arg1, (int)arg2) -> None :
     |      
     |          C++ signature :
     |              void setValidAreaMargin(class Defs::Mdl::STG::Actor::Base {lvalue},int)
     |  
     |  update(...)
     |      update( (STGActorBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void update(class Defs::Mdl::STG::Actor::Base {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from STGActorBase:
     |  
     |  frameCount
     |  
     |  objectId
     |  
     |  valid
     |  
     |  validFrameNum
     |  
     |  validRect
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from STGActor:
     |  
     |  applyExternalForce(...)
     |      applyExternalForce( (STGActor)arg1, (Vector2DF)arg2) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExternalForce(class Game::Mdl::STG::Actor::IActor {lvalue},class Game::Util::STG::Vector2D<float>)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from STGActor:
     |  
     |  position
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class STGMyShotLinear(STGMyShotBase)
     |  Method resolution order:
     |      STGMyShotLinear
     |      STGMyShotBase
     |      STGActorBase
     |      STGMyShot
     |      STGActor
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      __init__( (object)arg1, (LocatorLinearF)arg2, (int)arg3, (SpriteDrawParam)arg4, (float)arg5) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class Game::Util::STG::Locator::Linear<float>,int,class Game::Util::Sprite::DrawParameter,float)
     |      
     |      __init__( (object)arg1, (LocatorLinearF)arg2, (int)arg3, (SpriteDrawParam)arg4, (float)arg5, (SpriteAnimationManager)arg6) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class Game::Util::STG::Locator::Linear<float>,int,class Game::Util::Sprite::DrawParameter,float,class Defs::Util::Sprite::Animation::Manager)
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  applyExternalForce(...)
     |      applyExternalForce( (STGMyShotLinear)arg1, (Vector2DF)arg2) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExternalForce(class Defs::Mdl::STG::MyShot::Linear {lvalue},class Game::Util::STG::Vector2D<float>)
     |  
     |  setDamageToBulletCallback(...)
     |      setDamageToBulletCallback( (STGMyShotLinear)arg1, (object)arg2) -> None :
     |      
     |          C++ signature :
     |              void setDamageToBulletCallback(class Defs::Mdl::STG::MyShot::Linear {lvalue},class boost::python::api::object)
     |  
     |  setDestructionCallback(...)
     |      setDestructionCallback( (STGMyShotLinear)arg1, (object)arg2) -> None :
     |      
     |          C++ signature :
     |              void setDestructionCallback(class Defs::Mdl::STG::MyShot::Linear {lvalue},class boost::python::api::object)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  damageKickbackRateToBullet
     |  
     |  damageToBullet
     |  
     |  drawParameter
     |  
     |  locator
     |  
     |  position
     |  
     |  rotDegreeCorrection
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 32
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from STGMyShotBase:
     |  
     |  applyDamage(...)
     |      applyDamage( (STGMyShotBase)arg1, (float)arg2) -> None :
     |      
     |          C++ signature :
     |              void applyDamage(class Defs::Mdl::STG::MyShot::Base {lvalue},float)
     |  
     |  destruct(...)
     |      destruct( (STGMyShotBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void destruct(class Defs::Mdl::STG::MyShot::Base {lvalue})
     |  
     |  isHitCircle(...)
     |      isHitCircle( (STGMyShotBase)arg1, (HitCircleI)arg2) -> bool :
     |      
     |          C++ signature :
     |              bool isHitCircle(class Defs::Mdl::STG::MyShot::Base {lvalue},class Game::Util::STG::Hit::Circle<long>)
     |  
     |  isHitRect(...)
     |      isHitRect( (STGMyShotBase)arg1, (HitRectI)arg2) -> bool :
     |      
     |          C++ signature :
     |              bool isHitRect(class Defs::Mdl::STG::MyShot::Base {lvalue},class Game::Util::STG::Hit::Rect<long>)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from STGMyShotBase:
     |  
     |  baseDamage
     |  
     |  damage
     |  
     |  damageRate
     |  
     |  damageRateDec
     |  
     |  damageRateMin
     |  
     |  forcibleForPA
     |  
     |  hitRadius
     |  
     |  hp
     |  
     |  maxHP
     |  
     |  noDamage
     |  
     |  paBaseDamage
     |  
     |  paDamage
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from STGActorBase:
     |  
     |  draw(...)
     |      draw( (STGActorBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void draw(class Defs::Mdl::STG::Actor::Base {lvalue})
     |  
     |  erase(...)
     |      erase( (STGActorBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void erase(class Defs::Mdl::STG::Actor::Base {lvalue})
     |  
     |  setValidAreaMargin(...)
     |      setValidAreaMargin( (STGActorBase)arg1, (int)arg2) -> None :
     |      
     |          C++ signature :
     |              void setValidAreaMargin(class Defs::Mdl::STG::Actor::Base {lvalue},int)
     |  
     |  update(...)
     |      update( (STGActorBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void update(class Defs::Mdl::STG::Actor::Base {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from STGActorBase:
     |  
     |  frameCount
     |  
     |  objectId
     |  
     |  valid
     |  
     |  validFrameNum
     |  
     |  validRect
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class STGParticle(STGActorBase)
     |  Method resolution order:
     |      STGParticle
     |      STGActorBase
     |      STGActor
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      __init__( (object)arg1, (Vector2DF)arg2, (SpriteDrawParam)arg3) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class Game::Util::STG::Vector2D<float>,class Game::Util::Sprite::DrawParameter)
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  applyExternalForce(...)
     |      applyExternalForce( (STGParticle)arg1, (Vector2DF)arg2) -> Vector2DF :
     |      
     |          C++ signature :
     |              class Game::Util::STG::Vector2D<float> applyExternalForce(class Defs::Mdl::STG::Actor::Particle::Particle {lvalue},class Game::Util::STG::Vector2D<float>)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  drawParameter
     |  
     |  locator
     |  
     |  position
     |  
     |  rotSpeed
     |  
     |  zoomDecRate
     |  
     |  zoomRate
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 32
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from STGActorBase:
     |  
     |  draw(...)
     |      draw( (STGActorBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void draw(class Defs::Mdl::STG::Actor::Base {lvalue})
     |  
     |  erase(...)
     |      erase( (STGActorBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void erase(class Defs::Mdl::STG::Actor::Base {lvalue})
     |  
     |  setValidAreaMargin(...)
     |      setValidAreaMargin( (STGActorBase)arg1, (int)arg2) -> None :
     |      
     |          C++ signature :
     |              void setValidAreaMargin(class Defs::Mdl::STG::Actor::Base {lvalue},int)
     |  
     |  update(...)
     |      update( (STGActorBase)arg1) -> None :
     |      
     |          C++ signature :
     |              void update(class Defs::Mdl::STG::Actor::Base {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from STGActorBase:
     |  
     |  frameCount
     |  
     |  objectId
     |  
     |  valid
     |  
     |  validFrameNum
     |  
     |  validRect
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class STGParticleCreator(Boost.Python.instance)
     |  Method resolution order:
     |      STGParticleCreator
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      __init__( (object)arg1, (STGParticleParameter)arg2) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class Defs::Mdl::STG::Actor::Particle::Parameter)
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  create(...)
     |      create( (STGParticleCreator)arg1, (int)arg2) -> None :
     |      
     |          C++ signature :
     |              void create(class Defs::Mdl::STG::Actor::Particle::Creator {lvalue},unsigned int)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  parameter
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 168
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class STGParticleParameter(Boost.Python.instance)
     |  Method resolution order:
     |      STGParticleParameter
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      __init__( (object)arg1) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64)
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  setAccel(...)
     |      setAccel( (STGParticleParameter)arg1, (float)arg2) -> None :
     |      
     |          C++ signature :
     |              void setAccel(class Defs::Mdl::STG::Actor::Particle::Parameter {lvalue},float)
     |  
     |  setAccelRange(...)
     |      setAccelRange( (STGParticleParameter)arg1, (float)arg2, (float)arg3) -> None :
     |      
     |          C++ signature :
     |              void setAccelRange(class Defs::Mdl::STG::Actor::Particle::Parameter {lvalue},float,float)
     |  
     |  setAngle(...)
     |      setAngle( (STGParticleParameter)arg1, (float)arg2) -> None :
     |      
     |          C++ signature :
     |              void setAngle(class Defs::Mdl::STG::Actor::Particle::Parameter {lvalue},float)
     |  
     |  setAngleRange(...)
     |      setAngleRange( (STGParticleParameter)arg1, (float)arg2, (float)arg3) -> None :
     |      
     |          C++ signature :
     |              void setAngleRange(class Defs::Mdl::STG::Actor::Particle::Parameter {lvalue},float,float)
     |  
     |  setPosition(...)
     |      setPosition( (STGParticleParameter)arg1, (float)arg2, (float)arg3) -> None :
     |      
     |          C++ signature :
     |              void setPosition(class Defs::Mdl::STG::Actor::Particle::Parameter {lvalue},float,float)
     |      
     |      setPosition( (STGParticleParameter)arg1, (Vector2DF)arg2) -> None :
     |      
     |          C++ signature :
     |              void setPosition(class Defs::Mdl::STG::Actor::Particle::Parameter {lvalue},class Game::Util::STG::Vector2D<float>)
     |  
     |  setPositionXRange(...)
     |      setPositionXRange( (STGParticleParameter)arg1, (float)arg2, (float)arg3) -> None :
     |      
     |          C++ signature :
     |              void setPositionXRange(class Defs::Mdl::STG::Actor::Particle::Parameter {lvalue},float,float)
     |  
     |  setPositionYRange(...)
     |      setPositionYRange( (STGParticleParameter)arg1, (float)arg2, (float)arg3) -> None :
     |      
     |          C++ signature :
     |              void setPositionYRange(class Defs::Mdl::STG::Actor::Particle::Parameter {lvalue},float,float)
     |  
     |  setRotSpeed(...)
     |      setRotSpeed( (STGParticleParameter)arg1, (float)arg2) -> None :
     |      
     |          C++ signature :
     |              void setRotSpeed(class Defs::Mdl::STG::Actor::Particle::Parameter {lvalue},float)
     |  
     |  setRotSpeedRange(...)
     |      setRotSpeedRange( (STGParticleParameter)arg1, (float)arg2, (float)arg3) -> None :
     |      
     |          C++ signature :
     |              void setRotSpeedRange(class Defs::Mdl::STG::Actor::Particle::Parameter {lvalue},float,float)
     |  
     |  setSpeed(...)
     |      setSpeed( (STGParticleParameter)arg1, (float)arg2) -> None :
     |      
     |          C++ signature :
     |              void setSpeed(class Defs::Mdl::STG::Actor::Particle::Parameter {lvalue},float)
     |  
     |  setSpeedRange(...)
     |      setSpeedRange( (STGParticleParameter)arg1, (float)arg2, (float)arg3) -> None :
     |      
     |          C++ signature :
     |              void setSpeedRange(class Defs::Mdl::STG::Actor::Particle::Parameter {lvalue},float,float)
     |  
     |  setZoomDecRate(...)
     |      setZoomDecRate( (STGParticleParameter)arg1, (float)arg2) -> None :
     |      
     |          C++ signature :
     |              void setZoomDecRate(class Defs::Mdl::STG::Actor::Particle::Parameter {lvalue},float)
     |  
     |  setZoomDecRateRange(...)
     |      setZoomDecRateRange( (STGParticleParameter)arg1, (float)arg2, (float)arg3) -> None :
     |      
     |          C++ signature :
     |              void setZoomDecRateRange(class Defs::Mdl::STG::Actor::Particle::Parameter {lvalue},float,float)
     |  
     |  setZoomRate(...)
     |      setZoomRate( (STGParticleParameter)arg1, (float)arg2) -> None :
     |      
     |          C++ signature :
     |              void setZoomRate(class Defs::Mdl::STG::Actor::Particle::Parameter {lvalue},float)
     |  
     |  setZoomRateRange(...)
     |      setZoomRateRange( (STGParticleParameter)arg1, (float)arg2, (float)arg3) -> None :
     |      
     |          C++ signature :
     |              void setZoomRateRange(class Defs::Mdl::STG::Actor::Particle::Parameter {lvalue},float,float)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  drawParameter
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 168
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class STGStage(Boost.Python.instance)
     |  Method resolution order:
     |      STGStage
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  draw(...)
     |      draw( (STGStage)arg1) -> None :
     |      
     |          C++ signature :
     |              void draw(class Game::Mdl::STG::Stage::Stage::IStage {lvalue})
     |  
     |  update(...)
     |      update( (STGStage)arg1) -> None :
     |      
     |          C++ signature :
     |              void update(class Game::Mdl::STG::Stage::Stage::IStage {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  end
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __init__ = <built-in function __init__>
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Scene(Boost.Python.instance)
     |  Method resolution order:
     |      Scene
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  changeScene(...)
     |      changeScene( (object)arg1) -> None :
     |      
     |          C++ signature :
     |              void changeScene(class boost::python::api::object)
     |  
     |  changeToSTG(...)
     |      changeToSTG( (int)arg1, (int)arg2) -> None :
     |      
     |          C++ signature :
     |              void changeToSTG(int,int)
     |  
     |  changeToSTGTitle(...)
     |      changeToSTGTitle() -> None :
     |      
     |          C++ signature :
     |              void changeToSTGTitle()
     |  
     |  end(...)
     |      end() -> None :
     |      
     |          C++ signature :
     |              void end()
     |  
     |  isEnd(...)
     |      isEnd() -> bool :
     |      
     |          C++ signature :
     |              bool isEnd()
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __init__ = <built-in function __init__>
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Sound(Boost.Python.instance)
     |  Method resolution order:
     |      Sound
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  fadeInStreams(...)
     |      fadeInStreams( (float)arg1) -> None :
     |      
     |          C++ signature :
     |              void fadeInStreams(float)
     |  
     |  fadeOutStreams(...)
     |      fadeOutStreams( (float)arg1) -> None :
     |      
     |          C++ signature :
     |              void fadeOutStreams(float)
     |  
     |  getStaticVolumes(...)
     |      getStaticVolumes() -> float :
     |      
     |          C++ signature :
     |              float getStaticVolumes()
     |  
     |  getStreamVolumes(...)
     |      getStreamVolumes() -> float :
     |      
     |          C++ signature :
     |              float getStreamVolumes()
     |  
     |  isPlayStatics(...)
     |      isPlayStatics() -> bool :
     |      
     |          C++ signature :
     |              bool isPlayStatics()
     |  
     |  isPlayStreams(...)
     |      isPlayStreams() -> bool :
     |      
     |          C++ signature :
     |              bool isPlayStreams()
     |  
     |  loadStatic(...)
     |      loadStatic( (str)arg1) -> Sound_Static :
     |      
     |          C++ signature :
     |              class Defs::Util::Sound::Static loadStatic(class std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >)
     |      
     |      loadStatic( (str)arg1, (int)arg2) -> Sound_Static :
     |      
     |          C++ signature :
     |              class Defs::Util::Sound::Static loadStatic(class std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >,long)
     |      
     |      loadStatic( (FileObject)arg1) -> Sound_Static :
     |      
     |          C++ signature :
     |              class Defs::Util::Sound::Static loadStatic(class Defs::Util::File::FileObject)
     |      
     |      loadStatic( (FileObject)arg1, (int)arg2) -> Sound_Static :
     |      
     |          C++ signature :
     |              class Defs::Util::Sound::Static loadStatic(class Defs::Util::File::FileObject,long)
     |  
     |  loadStream(...)
     |      loadStream( (str)arg1) -> Sound_Stream :
     |      
     |          C++ signature :
     |              class Defs::Util::Sound::Stream loadStream(class std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >)
     |      
     |      loadStream( (FileObject)arg1) -> Sound_Stream :
     |      
     |          C++ signature :
     |              class Defs::Util::Sound::Stream loadStream(class Defs::Util::File::FileObject)
     |  
     |  pauseStatics(...)
     |      pauseStatics() -> None :
     |      
     |          C++ signature :
     |              void pauseStatics()
     |  
     |  pauseStreams(...)
     |      pauseStreams() -> None :
     |      
     |          C++ signature :
     |              void pauseStreams()
     |  
     |  setStaticVolumes(...)
     |      setStaticVolumes( (float)arg1) -> None :
     |      
     |          C++ signature :
     |              void setStaticVolumes(float)
     |  
     |  setStreamVolumes(...)
     |      setStreamVolumes( (float)arg1) -> None :
     |      
     |          C++ signature :
     |              void setStreamVolumes(float)
     |  
     |  stopStatics(...)
     |      stopStatics() -> None :
     |      
     |          C++ signature :
     |              void stopStatics()
     |  
     |  stopStreams(...)
     |      stopStreams() -> None :
     |      
     |          C++ signature :
     |              void stopStreams()
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __init__ = <built-in function __init__>
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Sound_Static(Boost.Python.instance)
     |  効果音を表すクラス
     |  
     |  __init__ = <built-in function __init__>
     |    Raises an exception
     |    This class cannot be instantiated from Python
     |  
     |  @ivar waitingForPlay: レイヤーがすべで再生状態の時に待つかどうか
     |  
     |  Method resolution order:
     |      Sound_Static
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  isPause(...)
     |      一時停止しているかをチェックします
     |      
     |      isPause( (Sound_Static)self) -> bool :
     |      
     |      @return: 一時停止していればTrue、していなければFalse
     |      
     |        C++ signature :
     |                bool isPause(class Defs::Util::Sound::Static {lvalue})
     |  
     |  isPlay(...)
     |      再生しているかをチェックします
     |      
     |      isPlay( (Sound_Static)self) -> bool :
     |      
     |      @return: 再生していればTrue、していなければFalse
     |      
     |        C++ signature :
     |                bool isPlay(class Defs::Util::Sound::Static {lvalue})
     |  
     |  pause(...)
     |      一時停止/解除します
     |      
     |      pause( (Sound_Static)self) -> None :
     |      
     |        C++ signature :
     |                void pause(class Defs::Util::Sound::Static {lvalue})
     |  
     |  play(...)
     |      play( (Sound_Static)arg1) -> None :
     |      
     |          C++ signature :
     |              void play(class Defs::Util::Sound::Static {lvalue})
     |      
     |      
     |      再生します
     |      
     |      play( (Sound_Static)self) -> None :
     |              '''
     |                C++ signature :
     |                        void play(class Defs::Util::Sound::Static {lvalue})
     |              '''
     |      
     |      play( (Sound_Static)self, (bool)loop) -> None :
     |              '''
     |              @param loop: ループ可否
     |              
     |                C++ signature :
     |                        void play(
     |                        class Defs::Util::Sound::Static {lvalue},
     |                        bool)
     |              '''
     |  
     |  setVolume(...)
     |      ボリュームを設定します
     |      
     |      setVolume( (Sound_Static)self, (float)volume) -> None :
     |      
     |      @param volume: ボリューム[0, 1]
     |      
     |        C++ signature :
     |                void setVolume(
     |                class Defs::Util::Sound::Static {lvalue},
     |                float)
     |  
     |  stop(...)
     |      停止します
     |      
     |      stop( (Sound_Static)self) -> None :
     |      
     |        C++ signature :
     |                void stop(class Defs::Util::Sound::Static {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  waitingForPlay
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __init__ = <built-in function __init__>
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Sound_Stream(Boost.Python.instance)
     |  BGMを表すクラス
     |  
     |  __init__ = <built-in function __init__>
     |    Raises an exception
     |    This class cannot be instantiated from Python
     |  
     |  Method resolution order:
     |      Sound_Stream
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  fadeIn(...)
     |      フェードインさせます
     |      
     |      fadeIn( (Sound_Stream)self, (float)second) -> None :
     |      
     |      @param second: フェードインにかける秒数
     |      
     |        C++ signature :
     |                void fadeIn(
     |                class Defs::Util::Sound::Stream {lvalue},
     |                float)
     |  
     |  fadeOut(...)
     |      フェードアウトさせます
     |      
     |      fadeOut( (Sound_Stream)self, (float)second) -> None :
     |      
     |      @param second: フェードアウトにかける秒数
     |      
     |        C++ signature :
     |                void fadeOut(
     |                class Defs::Util::Sound::Stream {lvalue},
     |                float)
     |  
     |  isPlay(...)
     |      再生しているかをチェックします
     |      
     |      isPlay( (Sound_Stream)self) -> bool :
     |      
     |      @return: 再生していればTrue、していなければFalse
     |      
     |        C++ signature :
     |                bool isPlay(class Defs::Util::Sound::Stream {lvalue})
     |  
     |  pause(...)
     |      一時停止/解除します
     |      
     |      pause( (Sound_Stream)self) -> None :
     |      
     |        C++ signature :
     |                void pause(class Defs::Util::Sound::Stream {lvalue})
     |  
     |  play(...)
     |      play( (Sound_Stream)arg1 [, (object)arg2]) -> None :
     |      
     |          C++ signature :
     |              void play(class Defs::Util::Sound::Stream {lvalue} [,class boost::python::api::object])
     |      
     |      
     |      再生します
     |      
     |      play( (Sound_Stream)self [, (object)playBlocks]) -> None :
     |              '''
     |              @param playBlocks: StreamSoundPlayBlockのシーケンス
     |              
     |                C++ signature :
     |                        void play(
     |                        class Defs::Util::Sound::Stream {lvalue} 
     |                        [,class boost::python::api::object])
     |              '''
     |      
     |      play( (Sound_Stream)self, (int)loopCount) -> None :
     |              '''
     |              @param loopCount: ループ数
     |              
     |                C++ signature :
     |                        void play(
     |                        class Defs::Util::Sound::Stream {lvalue},
     |                        unsigned long)
     |              '''
     |  
     |  setVolume(...)
     |      ボリュームを設定します
     |      
     |      setVolume( (Sound_Stream)self, (float)volume) -> None :
     |      
     |      @param volume: ボリューム[0, 1]
     |      
     |        C++ signature :
     |                void setVolume(
     |                class Defs::Util::Sound::Stream {lvalue},
     |                float)
     |  
     |  stop(...)
     |      停止します
     |      
     |      stop( (Sound_Stream)self) -> None :
     |      
     |        C++ signature :
     |                void stop(class Defs::Util::Sound::Stream {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __init__ = <built-in function __init__>
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Sprite(Boost.Python.instance)
     |  Method resolution order:
     |      Sprite
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  draw(...)
     |      draw( (SpriteDrawParam)arg1) -> None :
     |      
     |          C++ signature :
     |              void draw(class Game::Util::Sprite::DrawParameter)
     |  
     |  getCurrentShakeAmount(...)
     |      getCurrentShakeAmount() -> Point2DF :
     |      
     |          C++ signature :
     |              class Selene::Point2D<float> getCurrentShakeAmount()
     |  
     |  loadTexture(...)
     |      loadTexture( (str)arg1) -> SpriteTexture :
     |      
     |          C++ signature :
     |              class boost::intrusive_ptr<class Selene::Engine::Graphics::Resource::ITexture> loadTexture(class std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >)
     |      
     |      loadTexture( (str)arg1, (bool)arg2) -> SpriteTexture :
     |      
     |          C++ signature :
     |              class boost::intrusive_ptr<class Selene::Engine::Graphics::Resource::ITexture> loadTexture(class std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >,bool)
     |      
     |      loadTexture( (str)arg1, (bool)arg2, (ColorF)arg3) -> SpriteTexture :
     |      
     |          C++ signature :
     |              class boost::intrusive_ptr<class Selene::Engine::Graphics::Resource::ITexture> loadTexture(class std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >,bool,struct Selene::ColorF)
     |      
     |      loadTexture( (FileObject)arg1) -> SpriteTexture :
     |      
     |          C++ signature :
     |              class boost::intrusive_ptr<class Selene::Engine::Graphics::Resource::ITexture> loadTexture(class Defs::Util::File::FileObject)
     |      
     |      loadTexture( (FileObject)arg1, (bool)arg2) -> SpriteTexture :
     |      
     |          C++ signature :
     |              class boost::intrusive_ptr<class Selene::Engine::Graphics::Resource::ITexture> loadTexture(class Defs::Util::File::FileObject,bool)
     |      
     |      loadTexture( (FileObject)arg1, (bool)arg2, (ColorF)arg3) -> SpriteTexture :
     |      
     |          C++ signature :
     |              class boost::intrusive_ptr<class Selene::Engine::Graphics::Resource::ITexture> loadTexture(class Defs::Util::File::FileObject,bool,struct Selene::ColorF)
     |  
     |  resetShake(...)
     |      resetShake() -> None :
     |      
     |          C++ signature :
     |              void resetShake()
     |  
     |  setShake(...)
     |      setShake( (float)arg1) -> None :
     |      
     |          C++ signature :
     |              void setShake(float)
     |      
     |      setShake( (float)arg1, (float)arg2) -> None :
     |      
     |          C++ signature :
     |              void setShake(float,float)
     |      
     |      setShake( (Point2DF)arg1) -> None :
     |      
     |          C++ signature :
     |              void setShake(class Selene::Point2D<float>)
     |      
     |      setShake( (Point2DF)arg1, (float)arg2) -> None :
     |      
     |          C++ signature :
     |              void setShake(class Selene::Point2D<float>,float)
     |  
     |  startShake(...)
     |      startShake() -> None :
     |      
     |          C++ signature :
     |              void startShake()
     |  
     |  stopShake(...)
     |      stopShake() -> None :
     |      
     |          C++ signature :
     |              void stopShake()
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __init__ = <built-in function __init__>
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class SpriteAnimationFrameHolder(Boost.Python.instance)
     |  Method resolution order:
     |      SpriteAnimationFrameHolder
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  drawParameter
     |  
     |  frameNum
     |  
     |  framePos
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __init__ = <built-in function __init__>
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class SpriteAnimationManager(Boost.Python.instance)
     |  スプライトアニメーション管理クラス
     |  
     |  @ivar frameHolder: フレーム管理クラス
     |  @ivar frameInterval: フレーム間隔
     |  @ivar playing: 再生中かどうか
     |  
     |  Method resolution order:
     |      SpriteAnimationManager
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      __init__( (object)arg1, (SpriteAnimationFrameHolder)arg2) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class boost::shared_ptr<class Defs::Util::Sprite::Animation::FrameHolder::IFrameHolder>)
     |      
     |      
     |                      コンストラクタ
     |                      
     |                      フレーム管理クラスとフレーム間隔を用いて初期化します
     |                      
     |                      __init__( (object)self, (SpriteAnimationFrameHolder)frameHolder [, (float)frameInterval]) -> None :
     |                      
     |                      @param frameHolder: フレーム管理クラス
     |                      @param frameInterval: フレーム間隔
     |                      
     |                        C++ signature :
     |                                void __init__(
     |                                struct _object * __ptr64,
     |                                class boost::shared_ptr<class Defs::Util::Sprite::Animation::FrameHolder::IFrameHolder>,
     |                                float)
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  draw(...)
     |      フレームを描画します
     |      
     |      draw( (SpriteAnimationManager)self) -> None :
     |      
     |        C++ signature :
     |                void draw(class Defs::Util::Sprite::Animation::Manager {lvalue})
     |  
     |  play(...)
     |      play( (SpriteAnimationManager)arg1) -> None :
     |      
     |          C++ signature :
     |              void play(class Defs::Util::Sprite::Animation::Manager {lvalue})
     |      
     |      
     |                      再生します
     |                      
     |                      play( (SpriteAnimationManager)self [, (int)framePos]) -> None :
     |                      
     |                      @param framePos: 再生開始フレーム位置
     |                      
     |                        C++ signature :
     |                                void play(
     |                                class Defs::Util::Sprite::Animation::Manager {lvalue},
     |                                unsigned int)
     |  
     |  stop(...)
     |      stop( (SpriteAnimationManager)arg1) -> None :
     |      
     |          C++ signature :
     |              void stop(class Defs::Util::Sprite::Animation::Manager {lvalue})
     |  
     |  update(...)
     |      状態を更新します
     |      
     |      update( (SpriteAnimationManager)self) -> None :
     |      
     |        C++ signature :
     |                void update(class Defs::Util::Sprite::Animation::Manager {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  frameHolder
     |  
     |  frameInterval
     |  
     |  playing
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 48
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class SpriteAnimationSequenceFrameHolder(SpriteAnimationFrameHolder)
     |  スプライトアニメーションのフレーム管理クラス
     |  
     |  複数のテクスチャを用いてアニメーションを実現します。
     |  
     |  @ivar frameNum: フレーム数
     |  @ivar framePos: 現在のフレーム位置
     |  @ivar drawParameter: 描画パラメータ
     |  
     |  Method resolution order:
     |      SpriteAnimationSequenceFrameHolder
     |      SpriteAnimationFrameHolder
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      コンストラクタ
     |      
     |      テクスチャのシーケンスと描画パラメータで初期化します。
     |      
     |      __init__( (object)self, (object)textureList, (SpriteDrawParam)drawParam) -> None :
     |      
     |      @param textureList: テクスチャのシーケンス
     |      @param drawParam: 描画パラメータ
     |      
     |        C++ signature :
     |                void __init__(
     |                struct _object * __ptr64,
     |                class boost::python::api::object,
     |                class Game::Util::Sprite::DrawParameter)
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 152
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from SpriteAnimationFrameHolder:
     |  
     |  drawParameter
     |  
     |  frameNum
     |  
     |  framePos
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class SpriteAnimationTextureFrameHolder(SpriteAnimationFrameHolder)
     |  スプライトアニメーションのフレーム管理クラス
     |  
     |  複数のテクスチャを用いてアニメーションを実現します。
     |  
     |  @ivar frameNum: フレーム数
     |  @ivar framePos: 現在のフレーム位置
     |  @ivar drawParameter: 描画パラメータ
     |  
     |  Method resolution order:
     |      SpriteAnimationTextureFrameHolder
     |      SpriteAnimationFrameHolder
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      コンストラクタ
     |      
     |      フレームサイズとフレーム数と描画パラメータで初期化します
     |      
     |      __init__( (object)self, (Point2DI)frameSize, (int)frameNum, (SpriteDrawParam)drawParam) -> None :
     |      
     |      @param frameSize: フレームサイズ
     |      @param frameNum: フレーム数
     |      @param drawParam: 描画パラメータ
     |      
     |        C++ signature :
     |                void __init__(
     |                struct _object * __ptr64,
     |                class Selene::Point2D<long>,
     |                unsigned int,
     |                class Game::Util::Sprite::DrawParameter)
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 128
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from SpriteAnimationFrameHolder:
     |  
     |  drawParameter
     |  
     |  frameNum
     |  
     |  framePos
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class SpriteDrawParam(Boost.Python.instance)
     |  矩形描画用パラメータクラス
     |  
     |  @ivar texture: 描画テクスチャ（NULLでColor単色塗りつぶし）
     |  @ivar src: 描画元
     |  @ivar dst: 描画先
     |  @ivar priority: 描画優先度（値が大きい程手前に描画される）
     |  @ivar alphaBlend: アルファブレンディングの種類
     |  @ivar filtering: フィルタ適用可否
     |  @ivar rotDegree: 回転角度
     |  @ivar rotOffset: 回転時の中心からのオフセット
     |  @ivar color: 描画色（テクスチャの色に乗算）
     |  @ivar shakable: 振動可否
     |  @ivar flipedX: 左右反転しているか
     |  @ivar flipedY: 上下反転しているか
     |  
     |  Method resolution order:
     |      SpriteDrawParam
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      __init__( (object)arg1) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64)
     |      
     |      __init__( (object)arg1, (SpriteDrawParam)arg2) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class Game::Util::Sprite::DrawParameter)
     |      
     |      __init__( (object)arg1, (SpriteTexture)arg2, (RectF)arg3, (RectF)arg4, (int)arg5) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class boost::intrusive_ptr<class Selene::Engine::Graphics::Resource::ITexture>,class Selene::Rect<float>,class Selene::Rect<float>,long)
     |      
     |      __init__( (object)arg1, (SpriteTexture)arg2, (RectF)arg3, (RectF)arg4, (int)arg5, (AlphaBlend)arg6) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class boost::intrusive_ptr<class Selene::Engine::Graphics::Resource::ITexture>,class Selene::Rect<float>,class Selene::Rect<float>,long,enum Game::Util::Sprite::AlphaBlend)
     |      
     |      __init__( (object)arg1, (SpriteTexture)arg2, (RectF)arg3, (RectF)arg4, (int)arg5, (AlphaBlend)arg6, (bool)arg7) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class boost::intrusive_ptr<class Selene::Engine::Graphics::Resource::ITexture>,class Selene::Rect<float>,class Selene::Rect<float>,long,enum Game::Util::Sprite::AlphaBlend,bool)
     |      
     |      __init__( (object)arg1, (SpriteTexture)arg2, (RectF)arg3, (RectF)arg4, (int)arg5, (AlphaBlend)arg6, (bool)arg7, (float)arg8) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class boost::intrusive_ptr<class Selene::Engine::Graphics::Resource::ITexture>,class Selene::Rect<float>,class Selene::Rect<float>,long,enum Game::Util::Sprite::AlphaBlend,bool,float)
     |      
     |      __init__( (object)arg1, (SpriteTexture)arg2, (RectF)arg3, (RectF)arg4, (int)arg5, (AlphaBlend)arg6, (bool)arg7, (float)arg8, (Point2DF)arg9) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class boost::intrusive_ptr<class Selene::Engine::Graphics::Resource::ITexture>,class Selene::Rect<float>,class Selene::Rect<float>,long,enum Game::Util::Sprite::AlphaBlend,bool,float,class Selene::Point2D<float>)
     |      
     |      __init__( (object)arg1, (SpriteTexture)arg2, (RectF)arg3, (RectF)arg4, (int)arg5, (AlphaBlend)arg6, (bool)arg7, (float)arg8, (Point2DF)arg9, (ColorF)arg10) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class boost::intrusive_ptr<class Selene::Engine::Graphics::Resource::ITexture>,class Selene::Rect<float>,class Selene::Rect<float>,long,enum Game::Util::Sprite::AlphaBlend,bool,float,class Selene::Point2D<float>,struct Selene::ColorF)
     |      
     |      
     |              コンストラクタ
     |              
     |              __init__( (object)self) -> None :
     |                      '''
     |                      デフォルト状態で初期化します
     |                      
     |                        C++ signature :
     |                                void __init__(struct _object * __ptr64)
     |                      '''
     |              
     |              __init__( (object)self, (SpriteDrawParam)drawParam) -> None :
     |                      '''
     |                      他のオブジェクトの状態をコピーして初期化します
     |                      
     |                      @param drawParam: 他のオブジェクト
     |                      
     |                        C++ signature :
     |                                void __init__(
     |                                struct _object * __ptr64,
     |                                class Game::Util::Sprite::DrawParameter)
     |                      '''
     |              
     |              __init__( (object)self, (SpriteTexture)texture, (RectF)src, (RectF)dst, 
     |                      [(int)priority, (AlphaBlend)alphaBlend, (bool)filtering, 
     |                      (float)rotDegree, (Point2DF)rotOffset, (ColorF)color, (bool)shakable]) -> None :
     |                      '''
     |                      各種パラメータを指定して初期化します
     |                      
     |                      @param texture: 描画テクスチャ
     |                      @param src: 描画元
     |                      @param dst: 描画先
     |                      @param priority: 描画優先度
     |                      @param alphaBlend: アルファブレンディング
     |                      @param filtering: フィルタ適用可否
     |                      @param rotDegree: 回転角度
     |                      @param rotOffset: 回転中心オフセット
     |                      @param color: 描画色
     |                      @param shakable: 振動可否
     |                      
     |                        C++ signature :
     |                                void __init__(
     |                                struct _object * __ptr64,
     |                                class boost::intrusive_ptr<class Selene::Engine::Graphics::Resource::ITexture>,
     |                                class Selene::Rect<float>,
     |                                class Selene::Rect<float>,
     |                                long,
     |                                enum Game::Util::Sprite::AlphaBlend,
     |                                bool,
     |                                float,
     |                                class Selene::Point2D<float>,
     |                                struct Selene::ColorF,
     |                                bool)
     |                       '''
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  flipX(...)
     |      左右反転させます
     |      
     |      flipX( (SpriteDrawParam)self) -> None :
     |      
     |        C++ signature :
     |                void flipX(class Game::Util::Sprite::DrawParameter {lvalue})
     |  
     |  flipY(...)
     |      上下反転させます
     |      
     |      flipY( (SpriteDrawParam)self) -> None :
     |      
     |        C++ signature :
     |                void flipY(class Game::Util::Sprite::DrawParameter {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  alphaBlend
     |  
     |  color
     |  
     |  dst
     |  
     |  filtering
     |  
     |  flipedX
     |  
     |  flipedY
     |  
     |  priority
     |  
     |  rotDegree
     |  
     |  rotOffset
     |  
     |  shakable
     |  
     |  src
     |  
     |  texture
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 104
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class SpriteTexture(Boost.Python.instance)
     |  テクスチャを表すクラス
     |  
     |  __init__ = <built-in function __init__>
     |    Raises an exception
     |    This class cannot be instantiated from Python
     |  
     |  Method resolution order:
     |      SpriteTexture
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  getRequestSize(...)
     |      テクスチャーの生成時の要求サイズを取得します
     |      
     |      getRequestSize( (SpriteTexture)self) -> Point2DI :
     |      
     |      @return: 生成時の要求サイズ
     |      
     |        C++ signature :
     |                class Selene::Point2D<long> getRequestSize(
     |                class Selene::Engine::Graphics::Resource::ITexture {lvalue})
     |  
     |  getTexel2UVTransform(...)
     |      テクスチャのピクセル位置をUVに変換する為の値を取得します
     |      
     |      getTexel2UVTransform( (SpriteTexture)self) -> Point2DF :
     |      
     |      @return: テクスチャのピクセル位置をUVに変換する為の値
     |      
     |      この値は 1.0 / getTextureSize() と同じものです。
     |      
     |        C++ signature :
     |                class Selene::Point2D<float> getTexel2UVTransform(
     |                class Selene::Engine::Graphics::Resource::ITexture {lvalue})
     |  
     |  getTextureSize(...)
     |      テクスチャーの生成後の実際のサイズを取得します
     |      
     |      getTextureSize( (SpriteTexture)self) -> Point2DI :
     |      
     |      @return: 生成後の実際のサイズ
     |      
     |        C++ signature :
     |                class Selene::Point2D<long> getTextureSize(
     |                class Selene::Engine::Graphics::Resource::ITexture {lvalue})
     |  
     |  saveToBMP(...)
     |      テクスチャをBMPファイルとして保存します
     |      
     |      saveToBMP( (SpriteTexture)self, (object)filePath) -> None :
     |      
     |      @param: filePath: ファイルパス
     |      
     |        C++ signature :
     |                void saveToBMP(
     |                class Selene::Engine::Graphics::Resource::ITexture {lvalue},
     |                wchar_t const * __ptr64)
     |  
     |  saveToDDS(...)
     |      テクスチャをDDSファイルとして保存します
     |      
     |      saveToDDS( (SpriteTexture)self, (object)filePath) -> None :
     |      
     |      @param: filePath: ファイルパス
     |      
     |        C++ signature :
     |                void saveToDDS(
     |                class Selene::Engine::Graphics::Resource::ITexture {lvalue},
     |                wchar_t const * __ptr64)
     |  
     |  saveToPNG(...)
     |      テクスチャをPNGファイルとして保存します
     |      
     |      saveToPNG( (SpriteTexture)self, (object)filePath) -> None :
     |      
     |      @param: filePath: ファイルパス
     |      
     |        C++ signature :
     |                void saveToPNG(
     |                class Selene::Engine::Graphics::Resource::ITexture {lvalue},
     |                wchar_t const * __ptr64)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __init__ = <built-in function __init__>
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Vector2DF(Boost.Python.instance)
     |  ２次元ベクトルクラス
     |  
     |  座標は浮動小数点数で保持されます。
     |  演算子は、+, -, *, /, +=, -=, *=, /=, -(単項) が定義されています。
     |  
     |  @ivar x: X座標
     |  @ivar y: Y座標
     |  
     |  Method resolution order:
     |      Vector2DF
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __add__(...)
     |      __add__( (Vector2DF)arg1, (Vector2DF)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __add__(class Game::Util::STG::Vector2D<float> {lvalue},class Game::Util::STG::Vector2D<float>)
     |      
     |      __add__( (Vector2DF)arg1, (Vector2DI)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __add__(class Game::Util::STG::Vector2D<float> {lvalue},class Game::Util::STG::Vector2D<long>)
     |      
     |      __add__( (Vector2DF)arg1, (float)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __add__(class Game::Util::STG::Vector2D<float> {lvalue},float)
     |      
     |      __add__( (Vector2DF)arg1, (int)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __add__(class Game::Util::STG::Vector2D<float> {lvalue},long)
     |  
     |  __iadd__(...)
     |      __iadd__( (object)arg1, (Vector2DF)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __iadd__(struct boost::python::back_reference<class Game::Util::STG::Vector2D<float> & __ptr64>,class Game::Util::STG::Vector2D<float>)
     |      
     |      __iadd__( (object)arg1, (Vector2DI)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __iadd__(struct boost::python::back_reference<class Game::Util::STG::Vector2D<float> & __ptr64>,class Game::Util::STG::Vector2D<long>)
     |      
     |      __iadd__( (object)arg1, (float)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __iadd__(struct boost::python::back_reference<class Game::Util::STG::Vector2D<float> & __ptr64>,float)
     |      
     |      __iadd__( (object)arg1, (int)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __iadd__(struct boost::python::back_reference<class Game::Util::STG::Vector2D<float> & __ptr64>,long)
     |  
     |  __idiv__(...)
     |      __idiv__( (object)arg1, (Vector2DF)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __idiv__(struct boost::python::back_reference<class Game::Util::STG::Vector2D<float> & __ptr64>,class Game::Util::STG::Vector2D<float>)
     |      
     |      __idiv__( (object)arg1, (Vector2DI)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __idiv__(struct boost::python::back_reference<class Game::Util::STG::Vector2D<float> & __ptr64>,class Game::Util::STG::Vector2D<long>)
     |      
     |      __idiv__( (object)arg1, (float)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __idiv__(struct boost::python::back_reference<class Game::Util::STG::Vector2D<float> & __ptr64>,float)
     |      
     |      __idiv__( (object)arg1, (int)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __idiv__(struct boost::python::back_reference<class Game::Util::STG::Vector2D<float> & __ptr64>,long)
     |  
     |  __imul__(...)
     |      __imul__( (object)arg1, (Vector2DF)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __imul__(struct boost::python::back_reference<class Game::Util::STG::Vector2D<float> & __ptr64>,class Game::Util::STG::Vector2D<float>)
     |      
     |      __imul__( (object)arg1, (Vector2DI)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __imul__(struct boost::python::back_reference<class Game::Util::STG::Vector2D<float> & __ptr64>,class Game::Util::STG::Vector2D<long>)
     |      
     |      __imul__( (object)arg1, (float)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __imul__(struct boost::python::back_reference<class Game::Util::STG::Vector2D<float> & __ptr64>,float)
     |      
     |      __imul__( (object)arg1, (int)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __imul__(struct boost::python::back_reference<class Game::Util::STG::Vector2D<float> & __ptr64>,long)
     |  
     |  __init__(...)
     |      __init__( (object)arg1) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64)
     |      
     |      __init__( (object)arg1, (float)arg2, (float)arg3) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,float,float)
     |      
     |      __init__( (object)arg1, (int)arg2, (int)arg3) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,long,long)
     |      
     |      __init__( (object)arg1, (Vector2DF)arg2) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class Game::Util::STG::Vector2D<float>)
     |      
     |      
     |      コンストラクタ
     |      
     |      __init__( (object)self) -> None :
     |              '''
     |              (0, 0)で初期化します
     |              
     |                C++ signature :
     |                        void __init__(struct _object * __ptr64)
     |              '''
     |      
     |      __init__( (object)self, (float | int)x, (float | int)y) -> None :
     |              '''
     |              XY座標で初期化します
     |              
     |              @param x: X座標
     |              @param y: Y座標
     |              
     |                C++ signature :
     |                        void __init__(
     |                        struct _object * __ptr64,
     |                        (float | long),
     |                        (float | long))
     |              '''
     |      
     |      __init__( (object)self, (Vector2DF | Vector2DI)vector) -> None :
     |              '''
     |              他のオブジェクトで初期化します
     |              
     |              @param vector: 他のオブジェクト
     |              
     |                C++ signature :
     |                        void __init__(
     |                        struct _object * __ptr64,
     |                        (class Game::Util::STG::Vector2D<float> | class Game::Util::STG::Vector2D<long>))
     |              '''
     |  
     |  __isub__(...)
     |      __isub__( (object)arg1, (Vector2DF)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __isub__(struct boost::python::back_reference<class Game::Util::STG::Vector2D<float> & __ptr64>,class Game::Util::STG::Vector2D<float>)
     |      
     |      __isub__( (object)arg1, (Vector2DI)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __isub__(struct boost::python::back_reference<class Game::Util::STG::Vector2D<float> & __ptr64>,class Game::Util::STG::Vector2D<long>)
     |      
     |      __isub__( (object)arg1, (float)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __isub__(struct boost::python::back_reference<class Game::Util::STG::Vector2D<float> & __ptr64>,float)
     |      
     |      __isub__( (object)arg1, (int)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __isub__(struct boost::python::back_reference<class Game::Util::STG::Vector2D<float> & __ptr64>,long)
     |  
     |  __mul__(...)
     |      __mul__( (Vector2DF)arg1, (Vector2DF)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __mul__(class Game::Util::STG::Vector2D<float> {lvalue},class Game::Util::STG::Vector2D<float>)
     |      
     |      __mul__( (Vector2DF)arg1, (Vector2DI)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __mul__(class Game::Util::STG::Vector2D<float> {lvalue},class Game::Util::STG::Vector2D<long>)
     |      
     |      __mul__( (Vector2DF)arg1, (float)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __mul__(class Game::Util::STG::Vector2D<float> {lvalue},float)
     |      
     |      __mul__( (Vector2DF)arg1, (int)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __mul__(class Game::Util::STG::Vector2D<float> {lvalue},long)
     |  
     |  __neg__(...)
     |      __neg__( (Vector2DF)arg1) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __neg__(class Game::Util::STG::Vector2D<float> {lvalue})
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  __sub__(...)
     |      __sub__( (Vector2DF)arg1, (Vector2DF)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __sub__(class Game::Util::STG::Vector2D<float> {lvalue},class Game::Util::STG::Vector2D<float>)
     |      
     |      __sub__( (Vector2DF)arg1, (Vector2DI)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __sub__(class Game::Util::STG::Vector2D<float> {lvalue},class Game::Util::STG::Vector2D<long>)
     |      
     |      __sub__( (Vector2DF)arg1, (float)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __sub__(class Game::Util::STG::Vector2D<float> {lvalue},float)
     |      
     |      __sub__( (Vector2DF)arg1, (int)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __sub__(class Game::Util::STG::Vector2D<float> {lvalue},long)
     |  
     |  __truediv__(...)
     |      __truediv__( (Vector2DF)arg1, (Vector2DF)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __truediv__(class Game::Util::STG::Vector2D<float> {lvalue},class Game::Util::STG::Vector2D<float>)
     |      
     |      __truediv__( (Vector2DF)arg1, (Vector2DI)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __truediv__(class Game::Util::STG::Vector2D<float> {lvalue},class Game::Util::STG::Vector2D<long>)
     |      
     |      __truediv__( (Vector2DF)arg1, (float)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __truediv__(class Game::Util::STG::Vector2D<float> {lvalue},float)
     |      
     |      __truediv__( (Vector2DF)arg1, (int)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __truediv__(class Game::Util::STG::Vector2D<float> {lvalue},long)
     |  
     |  getAbs(...)
     |      絶対値を取得します
     |      
     |      getAbs( (Vector2DF)self) -> float :
     |      
     |      @return: 絶対値
     |      
     |        C++ signature :
     |                float getAbs(class Game::Util::STG::Vector2D<float> {lvalue})
     |  
     |  getAngle(...)
     |      getAngle( (Vector2DF)arg1) -> float :
     |      
     |          C++ signature :
     |              float getAngle(class Game::Util::STG::Vector2D<float> {lvalue})
     |      
     |      getAngle( (Vector2DF)arg1, (float)arg2, (float)arg3) -> float :
     |      
     |          C++ signature :
     |              float getAngle(class Game::Util::STG::Vector2D<float> {lvalue},float,float)
     |      
     |      
     |      角度を求めます
     |      
     |      getAngle( (Vector2DF)self) -> float :
     |              '''
     |              原点からの角度を求めます
     |              
     |              @return: 角度
     |              
     |                C++ signature :
     |                        float getAngle(class Game::Util::STG::Vector2D<float> {lvalue})
     |              '''
     |      
     |      getAngle( (Vector2DF)self, (float)x, (float)y) -> float :
     |              '''
     |              他の座標への角度を求めます
     |              
     |              @param x: 他のX座標
     |              @param y: 他のY座標
     |              @return: 角度
     |              
     |                C++ signature :
     |                        float getAngle(
     |                        class Game::Util::STG::Vector2D<float> {lvalue},
     |                        float,
     |                        float)
     |              '''
     |      
     |      getAngle( (Vector2DF)self, (Vector2DF)pos) -> float :
     |              '''
     |              他の座標への角度を求めます
     |              
     |              @param pos: 他の座標の位置ベクトル
     |              @return: 角度
     |              
     |                C++ signature :
     |                        float getAngle(
     |                        class Game::Util::STG::Vector2D<float> {lvalue},
     |                        class Game::Util::STG::Vector2D<float>)
     |              '''
     |  
     |  getDistance(...)
     |      他の座標への距離を求めます
     |      
     |      getDistance( (Vector2DI)self, (Vector2DI)pos) -> int :
     |      
     |      @param pos: 他の座標の位置ベクトル
     |      @return: 距離
     |      
     |        C++ signature :
     |                float getDistance(
     |                class Game::Util::STG::Vector2D<long> {lvalue},
     |                class Game::Util::STG::Vector2D<long>)
     |  
     |  getXY(...)
     |      XY座標を取得します
     |      
     |      getXY( (Vector2DF)self) -> object :
     |      
     |      @return: XY座標
     |      
     |        C++ signature :
     |                struct std::pair<float,float> getXY(
     |                class Game::Util::STG::Vector2D<float> {lvalue})
     |  
     |  makeRect(...)
     |      makeRect( (Vector2DF)arg1, (float)arg2, (float)arg3, (bool)arg4) -> RectF :
     |      
     |          C++ signature :
     |              class Selene::Rect<float> makeRect(class Game::Util::STG::Vector2D<float> {lvalue},float,float,bool)
     |      
     |      
     |      矩形領域を生成します
     |      
     |      makeRect( (Vector2DI)self, (int)w, (int)h, (bool)center) -> RectI :
     |              '''
     |              @param w: 幅
     |              @param h: 高さ
     |              @param center: 中心座標ならTrue、左上の座標ならFalse
     |              @return: 矩形領域
     |              
     |                C++ signature :
     |                        class Selene::Rect<long> makeRect(
     |                        class Game::Util::STG::Vector2D<long> {lvalue},
     |                        long,
     |                        long,
     |                        bool)
     |              '''
     |      
     |      makeRect( (Vector2DI)self, (Vector2DI)widthHeight, (bool)center) -> RectI :
     |              '''
     |              @param widthHeight: 幅と高さのベクトル
     |              @param center: 中心座標ならTrue、左上の座標ならFalse
     |              @return: 矩形領域
     |              
     |                C++ signature :
     |                        class Selene::Rect<long> makeRect(
     |                        class Game::Util::STG::Vector2D<long> {lvalue},
     |                        class Game::Util::STG::Vector2D<long>,
     |                        bool)
     |              '''
     |  
     |  normalize(...)
     |      正規化します
     |      
     |      normalize( (Vector2DF)self) -> Vector2DF :
     |      
     |      @return: このオブジェクトへの参照
     |      
     |        C++ signature :
     |                class Game::Util::STG::Vector2D<float> {lvalue} normalize(
     |                class Game::Util::STG::Vector2D<float> {lvalue})
     |  
     |  rotate(...)
     |      rotate( (Vector2DF)arg1, (float)arg2) -> None :
     |      
     |          C++ signature :
     |              void rotate(class Game::Util::STG::Vector2D<float> {lvalue},float)
     |      
     |      
     |      回転します
     |      
     |      rotate( (Vector2DI)self, (int)degree) -> None :
     |              '''
     |              原点を中心に回転します
     |              
     |              @param degree: 回転角度
     |              
     |                C++ signature :
     |                        void rotate(
     |                        class Game::Util::STG::Vector2D<long> {lvalue},
     |                        long)
     |              '''
     |      
     |      rotate( (Vector2DI)self, (int)degree, (Vector2DI)center) -> None :
     |              '''
     |              任意の位置を中心に回転します
     |              
     |              @param degree: 回転角度
     |              @param center: 中心の位置ベクトル
     |              
     |                C++ signature :
     |                        void rotate(
     |                        class Game::Util::STG::Vector2D<long> {lvalue},
     |                        long,
     |                        class Game::Util::STG::Vector2D<long>)
     |              '''
     |  
     |  setUnitVector(...)
     |      角度から単位ベクトルを設定します
     |      
     |      setUnitVector( (Vector2DF)self, (float)degree) -> Vector2DF :
     |      
     |      @param degree: 角度
     |      @result: このオブジェクトへの参照
     |      
     |        C++ signature :
     |                class Game::Util::STG::Vector2D<float> {lvalue} setUnitVector(
     |                class Game::Util::STG::Vector2D<float> {lvalue},
     |                float)
     |  
     |  setXY(...)
     |      XY座標を設定します
     |      
     |      setXY( (Vector2DF)self, (float)x, (float)y) -> Vector2DF :
     |      
     |      @param x: X座標
     |      @param y: Y座標
     |      @return: このオブジェクトへの参照
     |      
     |        C++ signature :
     |                class Game::Util::STG::Vector2D<float> {lvalue} setXY(
     |                class Game::Util::STG::Vector2D<float> {lvalue},
     |                float,
     |                float)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  x
     |  
     |  y
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 24
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Vector2DI(Boost.Python.instance)
     |  ２次元ベクトルクラス
     |  
     |  座標は整数で保持されます。
     |  演算子は、+, -, *, /, +=, -=, *=, /=, -(単項) が定義されています。
     |  
     |  @ivar x: X座標
     |  @ivar y: Y座標
     |  
     |  Method resolution order:
     |      Vector2DI
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __add__(...)
     |      __add__( (Vector2DI)arg1, (Vector2DI)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __add__(class Game::Util::STG::Vector2D<long> {lvalue},class Game::Util::STG::Vector2D<long>)
     |      
     |      __add__( (Vector2DI)arg1, (Vector2DF)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __add__(class Game::Util::STG::Vector2D<long> {lvalue},class Game::Util::STG::Vector2D<float>)
     |      
     |      __add__( (Vector2DI)arg1, (float)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __add__(class Game::Util::STG::Vector2D<long> {lvalue},float)
     |      
     |      __add__( (Vector2DI)arg1, (int)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __add__(class Game::Util::STG::Vector2D<long> {lvalue},long)
     |  
     |  __iadd__(...)
     |      __iadd__( (object)arg1, (Vector2DI)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __iadd__(struct boost::python::back_reference<class Game::Util::STG::Vector2D<long> & __ptr64>,class Game::Util::STG::Vector2D<long>)
     |      
     |      __iadd__( (object)arg1, (Vector2DF)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __iadd__(struct boost::python::back_reference<class Game::Util::STG::Vector2D<long> & __ptr64>,class Game::Util::STG::Vector2D<float>)
     |      
     |      __iadd__( (object)arg1, (float)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __iadd__(struct boost::python::back_reference<class Game::Util::STG::Vector2D<long> & __ptr64>,float)
     |      
     |      __iadd__( (object)arg1, (int)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __iadd__(struct boost::python::back_reference<class Game::Util::STG::Vector2D<long> & __ptr64>,long)
     |  
     |  __idiv__(...)
     |      __idiv__( (object)arg1, (Vector2DI)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __idiv__(struct boost::python::back_reference<class Game::Util::STG::Vector2D<long> & __ptr64>,class Game::Util::STG::Vector2D<long>)
     |      
     |      __idiv__( (object)arg1, (Vector2DF)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __idiv__(struct boost::python::back_reference<class Game::Util::STG::Vector2D<long> & __ptr64>,class Game::Util::STG::Vector2D<float>)
     |      
     |      __idiv__( (object)arg1, (float)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __idiv__(struct boost::python::back_reference<class Game::Util::STG::Vector2D<long> & __ptr64>,float)
     |      
     |      __idiv__( (object)arg1, (int)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __idiv__(struct boost::python::back_reference<class Game::Util::STG::Vector2D<long> & __ptr64>,long)
     |  
     |  __imul__(...)
     |      __imul__( (object)arg1, (Vector2DI)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __imul__(struct boost::python::back_reference<class Game::Util::STG::Vector2D<long> & __ptr64>,class Game::Util::STG::Vector2D<long>)
     |      
     |      __imul__( (object)arg1, (Vector2DF)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __imul__(struct boost::python::back_reference<class Game::Util::STG::Vector2D<long> & __ptr64>,class Game::Util::STG::Vector2D<float>)
     |      
     |      __imul__( (object)arg1, (float)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __imul__(struct boost::python::back_reference<class Game::Util::STG::Vector2D<long> & __ptr64>,float)
     |      
     |      __imul__( (object)arg1, (int)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __imul__(struct boost::python::back_reference<class Game::Util::STG::Vector2D<long> & __ptr64>,long)
     |  
     |  __init__(...)
     |      __init__( (object)arg1) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64)
     |      
     |      __init__( (object)arg1, (int)arg2, (int)arg3) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,long,long)
     |      
     |      __init__( (object)arg1, (float)arg2, (float)arg3) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,float,float)
     |      
     |      __init__( (object)arg1, (Vector2DI)arg2) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64,class Game::Util::STG::Vector2D<long>)
     |      
     |      
     |      コンストラクタ
     |      
     |      __init__( (object)self) -> None :
     |              '''
     |              (0, 0)で初期化します
     |              
     |                C++ signature :
     |                        void __init__(struct _object * __ptr64)
     |              '''
     |      
     |      __init__( (object)self, (int | float)x, (int | float)y) -> None :
     |              '''
     |              XY座標で初期化します
     |              
     |              @param x: X座標
     |              @param y: Y座標
     |              
     |                C++ signature :
     |                        void __init__(
     |                        struct _object * __ptr64,
     |                        (long | float),
     |                        (long | float))
     |              '''
     |      
     |      __init__( (object)self, (Vector2DI | Vector2DF)vector) -> None :
     |              '''
     |              他のオブジェクトで初期化します
     |              
     |              @param vector: 他のオブジェクト
     |              
     |                C++ signature :
     |                        void __init__(
     |                        struct _object * __ptr64,
     |                        (class Game::Util::STG::Vector2D<long> | class Game::Util::STG::Vector2D<float>))
     |              '''
     |  
     |  __isub__(...)
     |      __isub__( (object)arg1, (Vector2DI)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __isub__(struct boost::python::back_reference<class Game::Util::STG::Vector2D<long> & __ptr64>,class Game::Util::STG::Vector2D<long>)
     |      
     |      __isub__( (object)arg1, (Vector2DF)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __isub__(struct boost::python::back_reference<class Game::Util::STG::Vector2D<long> & __ptr64>,class Game::Util::STG::Vector2D<float>)
     |      
     |      __isub__( (object)arg1, (float)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __isub__(struct boost::python::back_reference<class Game::Util::STG::Vector2D<long> & __ptr64>,float)
     |      
     |      __isub__( (object)arg1, (int)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __isub__(struct boost::python::back_reference<class Game::Util::STG::Vector2D<long> & __ptr64>,long)
     |  
     |  __mul__(...)
     |      __mul__( (Vector2DI)arg1, (Vector2DI)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __mul__(class Game::Util::STG::Vector2D<long> {lvalue},class Game::Util::STG::Vector2D<long>)
     |      
     |      __mul__( (Vector2DI)arg1, (Vector2DF)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __mul__(class Game::Util::STG::Vector2D<long> {lvalue},class Game::Util::STG::Vector2D<float>)
     |      
     |      __mul__( (Vector2DI)arg1, (float)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __mul__(class Game::Util::STG::Vector2D<long> {lvalue},float)
     |      
     |      __mul__( (Vector2DI)arg1, (int)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __mul__(class Game::Util::STG::Vector2D<long> {lvalue},long)
     |  
     |  __neg__(...)
     |      __neg__( (Vector2DI)arg1) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __neg__(class Game::Util::STG::Vector2D<long> {lvalue})
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  __sub__(...)
     |      __sub__( (Vector2DI)arg1, (Vector2DI)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __sub__(class Game::Util::STG::Vector2D<long> {lvalue},class Game::Util::STG::Vector2D<long>)
     |      
     |      __sub__( (Vector2DI)arg1, (Vector2DF)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __sub__(class Game::Util::STG::Vector2D<long> {lvalue},class Game::Util::STG::Vector2D<float>)
     |      
     |      __sub__( (Vector2DI)arg1, (float)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __sub__(class Game::Util::STG::Vector2D<long> {lvalue},float)
     |      
     |      __sub__( (Vector2DI)arg1, (int)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __sub__(class Game::Util::STG::Vector2D<long> {lvalue},long)
     |  
     |  __truediv__(...)
     |      __truediv__( (Vector2DI)arg1, (Vector2DI)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __truediv__(class Game::Util::STG::Vector2D<long> {lvalue},class Game::Util::STG::Vector2D<long>)
     |      
     |      __truediv__( (Vector2DI)arg1, (Vector2DF)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __truediv__(class Game::Util::STG::Vector2D<long> {lvalue},class Game::Util::STG::Vector2D<float>)
     |      
     |      __truediv__( (Vector2DI)arg1, (float)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __truediv__(class Game::Util::STG::Vector2D<long> {lvalue},float)
     |      
     |      __truediv__( (Vector2DI)arg1, (int)arg2) -> object :
     |      
     |          C++ signature :
     |              struct _object * __ptr64 __truediv__(class Game::Util::STG::Vector2D<long> {lvalue},long)
     |  
     |  getAbs(...)
     |      絶対値を取得します
     |      
     |      getAbs( (Vector2DI)self) -> int :
     |      
     |      @return: 絶対値
     |      
     |        C++ signature :
     |                long getAbs(class Game::Util::STG::Vector2D<long> {lvalue})
     |  
     |  getAngle(...)
     |      getAngle( (Vector2DI)arg1) -> int :
     |      
     |          C++ signature :
     |              long getAngle(class Game::Util::STG::Vector2D<long> {lvalue})
     |      
     |      getAngle( (Vector2DI)arg1, (int)arg2, (int)arg3) -> int :
     |      
     |          C++ signature :
     |              long getAngle(class Game::Util::STG::Vector2D<long> {lvalue},long,long)
     |      
     |      
     |      角度を求めます
     |      
     |      getAngle( (Vector2DI)self) -> int :
     |              '''
     |              原点からの角度を求めます
     |              
     |              @return: 角度
     |              
     |                C++ signature :
     |                        long getAngle(class Game::Util::STG::Vector2D<long> {lvalue})
     |              '''
     |      
     |      getAngle( (Vector2DI)self, (int)x, (int)y) -> int :
     |              '''
     |              他の座標への角度を求めます
     |              
     |              @param x: 他のX座標
     |              @param y: 他のY座標
     |              @return: 角度
     |              
     |                C++ signature :
     |                        long getAngle(
     |                        class Game::Util::STG::Vector2D<long> {lvalue},
     |                        long,
     |                        long)
     |              '''
     |      
     |      getAngle( (Vector2DI)self, (Vector2DI)pos) -> int :
     |              '''
     |              他の座標への角度を求めます
     |              
     |              @param pos: 他の座標の位置ベクトル
     |              @return: 角度
     |              
     |                C++ signature :
     |                        long getAngle(
     |                        class Game::Util::STG::Vector2D<long> {lvalue},
     |                        class Game::Util::STG::Vector2D<long>)
     |              '''
     |  
     |  getDistance(...)
     |      getDistance( (Vector2DI)arg1, (Vector2DI)arg2) -> int :
     |      
     |          C++ signature :
     |              long getDistance(class Game::Util::STG::Vector2D<long> {lvalue},class Game::Util::STG::Vector2D<long>)
     |  
     |  getXY(...)
     |      XY座標を取得します
     |      
     |      getXY( (Vector2DI)self) -> object :
     |      
     |      @return: XY座標
     |      
     |        C++ signature :
     |                struct std::pair<long,long> getXY(
     |                class Game::Util::STG::Vector2D<long> {lvalue})
     |  
     |  makeRect(...)
     |      makeRect( (Vector2DI)arg1, (int)arg2, (int)arg3, (bool)arg4) -> RectI :
     |      
     |          C++ signature :
     |              class Selene::Rect<long> makeRect(class Game::Util::STG::Vector2D<long> {lvalue},long,long,bool)
     |      
     |      makeRect( (Vector2DI)arg1, (Vector2DI)arg2, (bool)arg3) -> RectI :
     |      
     |          C++ signature :
     |              class Selene::Rect<long> makeRect(class Game::Util::STG::Vector2D<long> {lvalue},class Game::Util::STG::Vector2D<long>,bool)
     |  
     |  normalize(...)
     |      正規化します
     |      
     |      normalize( (Vector2DI)self) -> Vector2DI :
     |      
     |      @return: このオブジェクトへの参照
     |      
     |        C++ signature :
     |                class Game::Util::STG::Vector2D<long> {lvalue} normalize(
     |                class Game::Util::STG::Vector2D<long> {lvalue})
     |  
     |  rotate(...)
     |      rotate( (Vector2DI)arg1, (int)arg2) -> None :
     |      
     |          C++ signature :
     |              void rotate(class Game::Util::STG::Vector2D<long> {lvalue},long)
     |      
     |      rotate( (Vector2DI)arg1, (int)arg2, (Vector2DI)arg3) -> None :
     |      
     |          C++ signature :
     |              void rotate(class Game::Util::STG::Vector2D<long> {lvalue},long,class Game::Util::STG::Vector2D<long>)
     |  
     |  setUnitVector(...)
     |      角度から単位ベクトルを設定します
     |      
     |      setUnitVector( (Vector2DI)self, (int)degree) -> Vector2DI :
     |      
     |      @param degree: 角度
     |      @result: このオブジェクトへの参照
     |      
     |        C++ signature :
     |                class Game::Util::STG::Vector2D<long> {lvalue} setUnitVector(
     |                class Game::Util::STG::Vector2D<long> {lvalue},
     |                long)
     |  
     |  setXY(...)
     |      XY座標を設定します
     |      
     |      setXY( (Vector2DI)self, (int)x, (int)y) -> Vector2DI :
     |      
     |      @param x: X座標
     |      @param y: Y座標
     |      @return: このオブジェクトへの参照
     |      
     |        C++ signature :
     |                class Game::Util::STG::Vector2D<long> {lvalue} setXY(
     |                class Game::Util::STG::Vector2D<long> {lvalue},
     |                long,
     |                long)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  x
     |  
     |  y
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 24
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class stdout(Boost.Python.instance)
     |  Method resolution order:
     |      stdout
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      __init__( (object)arg1) -> None :
     |      
     |          C++ signature :
     |              void __init__(struct _object * __ptr64)
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  write(...)
     |      write( (str)arg1) -> None :
     |      
     |          C++ signature :
     |              void write(class std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> >)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 24
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  __new__ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T

FUNCTIONS
    atan2(...)
        指定した座標の逆正接を度数で取得する
        
        atan2( (float)y, (float)x) -> float :
        
        @param y: Y座標
        @param x: X座標
        @return: 度数
        
                C++ signature :
                        float atan2(float,float)
    
    cos(...)
        指定した度数の余弦を取得する
        
        cos( (float)degree) -> float :
        
        @param degree: 度数
        @return: 余弦値
        
                C++ signature :
                        float cos(float)
    
    sin(...)
        指定した度数の正弦を取得する
        
        sin( (float)degree) -> float :
        
        @param degree: 度数
        @return: 正弦値
        
                C++ signature :
                        float sin(float)

FILE
    d:\mydata\stgproject-pleiades-e3.7-platform\workspace\stgproject\script\python\src\x64\game.pyd


